<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一刻笔记</title>
  <subtitle>带着一颗变态的、积极的心走向未来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dyike.com/"/>
  <updated>2019-03-31T14:01:55.556Z</updated>
  <id>http://www.dyike.com/</id>
  
  <author>
    <name>ityike</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蜗牛星际NAS安装黑裙+洗白</title>
    <link href="http://www.dyike.com/2019/03/31/nas-machine/"/>
    <id>http://www.dyike.com/2019/03/31/nas-machine/</id>
    <published>2019-03-31T08:04:53.000Z</published>
    <updated>2019-03-31T14:01:55.556Z</updated>
    
    <content type="html"><![CDATA[<p>感谢3月份的“矿难”，就上了蜗牛星际的车，在咸鱼上收了一台。</p>
<blockquote>
<p>基本配置</p>
</blockquote>
<p>4盘位 + J1900处理器 + 4G RAM + 16G MSATA SSD + 200w电源 + 单口网卡</p>
<p>这是蜗牛星际的C款(单口)，也有双口，就是贵了一点，有条件的可以直接上C双。拿到手就是用U盘做引导安装黑群晖。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p>硬件准备</p>
</blockquote>
<ul>
<li>U盘 X 1(我使用的是8G，能装下PE和引导文件);</li>
<li>显示器 X 1 和 HDML连接线 X 1</li>
<li>鼠标 X 1</li>
<li>键盘 X 1(安装的时候，家里没有也能搞)</li>
<li>电源线(买的主机没有电源线，一般来说家里的电饭煲的电源线就行，可以线下五金店购买)</li>
</ul>
<blockquote>
<p>软件准备</p>
</blockquote>
<ul>
<li>黑群晖工具获取器 V1.0(下载引导文件与对应版本系统)</li>
<li>DiskImg(将引导文件镜像写入内置SSD)</li>
<li>DiskGenius(分区管理工具，PE版)</li>
<li>Notepad++(文本编辑器)</li>
<li>微PE工具箱</li>
<li>Mac系统安装Windows虚拟机(这里不多介绍)</li>
</ul>
<p>打包下载：<a href="https://pan.baidu.com/s/1-8g1d9MbX34itX75rwV69g" target="_blank" rel="external">百度网盘</a>; 提取码: bvpf</p>
<h2 id="制作PE盘"><a href="#制作PE盘" class="headerlink" title="制作PE盘"></a>制作PE盘</h2><ol>
<li><p>将U盘插入电脑，运行PE盘制作工具，右下角选择“安装PE到U盘”；<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/PE-1.jpeg" alt="安装PE到U盘"></p>
</li>
<li><p>如图设置，点击“立即安装进U盘”；<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/PE-2.png" alt="安装PE到U盘"></p>
</li>
<li><p>PE盘制作工具生成了两个分区，EFI为PE引导分区，“微PE工具箱”为文件区，将黑群晖引导镜像（img）、DiskImg、DiskGenius（PE版）放入U盘内。<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/PE-3.png" alt="PE分区"></p>
</li>
</ol>
<h2 id="黑裙洗白"><a href="#黑裙洗白" class="headerlink" title="黑裙洗白"></a>黑裙洗白</h2><p>这里介绍一种洗白方案，需要花钱，淘宝自行购买。不想洗白的可以跳过！！！</p>
<p>在windows下操作:</p>
<ol>
<li><p>安装OSFMount，完成后运行OSFMount <a href="https://pan.baidu.com/s/1Mo_lXEGI1qo-8tUHDgGqDg" target="_blank" rel="external">下载途径</a> 提取码:6eyz；</p>
</li>
<li><p>点击左下角-Mount new，选择下载的img镜像(img镜像目录必须是英文或着数字，不能是中文)；<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/OSFMount1.png" alt="选择镜像"></p>
</li>
<li><p>选择Partition 0，点击OK；<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/OSFMount2.png" alt="选项"></p>
</li>
<li><p>再把下面Read-only drive的选项去勾后点击OK；<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/OSFMount3.png" alt="选项"></p>
</li>
<li><p>在OSFMount软件里双击镜像后打开grub目录，编辑grub.cfg文件，建议使用Notepad++编辑grub.cfg文件<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/OSFMount4.png" alt="查看grub.cfg文件"></p>
</li>
<li><p>根据自己的要求填写正版的SN码和Mac地址，就可以全洗白了<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/OSFMount6.jpeg" alt="填写SN码和MAC地址"></p>
</li>
<li><p>修改完成后点击Dismount all &amp; Exit<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/OSFMount5.png" alt="退出"></p>
</li>
</ol>
<h2 id="引导文件写入NAS机SSD"><a href="#引导文件写入NAS机SSD" class="headerlink" title="引导文件写入NAS机SSD"></a>引导文件写入NAS机SSD</h2><ol>
<li><p>将制作好的PE U盘插入蜗牛星际背部的USB接口，通电开机，有键盘的话，可以按下F7选择PE U盘启动(没有键盘也能操作的);</p>
</li>
<li><p>使用DiskGenius，将自带16G SSD内所有分区删除并保存;</p>
</li>
<li><p>启动 DiskImg，驱动器选择机器内置SSD，浏览选择镜像写入(路径、文件名不能有任何中文字符);<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/SSD-3.png" alt="启动 DiskImg"></p>
</li>
<li><p>写入完成后，使用DiskGenius(PE自带版本太旧了，一定要用复制进去的DiskGenius)，浏览系统内置SSD引导分区文件(ESP)，将grub.cfg文件复制到U盘(之后洗白要用)；</p>
</li>
<li><p>设备关机，拔出U盘。</p>
</li>
</ol>
<h2 id="安装DSM到NAS机"><a href="#安装DSM到NAS机" class="headerlink" title="安装DSM到NAS机"></a>安装DSM到NAS机</h2><ol>
<li><p>NAS主机连接网线并启动(此时显示器上显示Happy Hacking)；</p>
</li>
<li><p>Mac上安装Synology Assistant(群晖助手)，保持在同一局域网并搜索，搜出结果后，最后选择联机；<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/DSM-2.png" alt="群晖助手"></p>
</li>
<li><p>选中NAS主机安装DSM系统，浏览找到pat格式，依照提示安装即可；</p>
</li>
<li><p>这里不要把自动更新打开，也不要开启任何反馈计划；<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/nas/DSM-4.jpeg" alt="安装DSM选项"></p>
</li>
<li><p>初始化DSM完成，进入桌面后，关机。</p>
</li>
</ol>
<h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy~~"></a>Enjoy~~</h2><p>如果上面的步骤，你有全洗白的话，到此应该是安装黑裙成功，并洗白了。开机体验，最大的缺点就是噪音挺大的。</p>
<ol>
<li><p>NAS主机(249元) + 河南-&gt;上海顺丰运费(46元)</p>
</li>
<li><p>一块西部数据2T红盘(330元，咸鱼收)</p>
</li>
<li><p>黑裙洗白(30元)</p>
</li>
<li><p>更换了电源风扇(12元)</p>
</li>
</ol>
<h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://mapgun.com/archives/2341" target="_blank" rel="external">推特儿某大佬的blog</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感谢3月份的“矿难”，就上了蜗牛星际的车，在咸鱼上收了一台。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4盘位 + J1900处理器 + 4G RAM + 16G MSATA SSD + 200w电源 + 单口网卡&lt;/p&gt;

    
    </summary>
    
    
      <category term="黑裙、蜗牛星际" scheme="http://www.dyike.com/tags/%E9%BB%91%E8%A3%99%E3%80%81%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85/"/>
    
  </entry>
  
  <entry>
    <title>Rust智能指针——Box</title>
    <link href="http://www.dyike.com/2018/09/24/rust-box-tree/"/>
    <id>http://www.dyike.com/2018/09/24/rust-box-tree/</id>
    <published>2018-09-24T10:05:15.000Z</published>
    <updated>2018-09-24T14:08:37.137Z</updated>
    
    <content type="html"><![CDATA[<p>在C++11中也有智能指针shared_ptr，unique_ptr，weak_ptr，在Rust中也有叫智能指针的东西，今天我们来讨论一下Box。现在我们要构建一个二叉树。在Python中实现是比较简单的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root_val, left = None, right = None)</span>:</span></div><div class="line">        self.root = root_val</div><div class="line">        self.left = left</div><div class="line">        self.right = right</div><div class="line">        </div><div class="line">        </div><div class="line">t = Tree(<span class="number">12</span>,</div><div class="line">        Tree(<span class="number">10</span>, <span class="keyword">None</span>, Tree(<span class="number">14</span>)),</div><div class="line">        Tree(<span class="number">16</span>, Tree(<span class="number">15</span>), Tree(<span class="number">22</span>))))</div></pre></td></tr></table></figure>
<p>最终的树形结构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    12 </div><div class="line">  /    \</div><div class="line">10      16                                    </div><div class="line"> \      / \</div><div class="line">  14  15   22</div></pre></td></tr></table></figure>
<p>现在用Rust来实现一个？</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span> &#123;</div><div class="line">    root: <span class="keyword">i64</span>,</div><div class="line">    left: Tree,</div><div class="line">    right: Tree,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上一篇我们已经提到了，上面的代码Rust肯定不会让我们编译通过。已经提示我们使用<code>&amp;</code>、<code>Box</code>、<code>Rc</code>。他们都是指针类型，都是指向内存上某一个位置。</p>
<ul>
<li><code>&amp;</code> 在Rust里面称作borrow类型。只是引用内存上某个位置的值，并不拥有所指的值。如果我们想使用<code>&amp;</code>来修复这个问题，我们需要注意一个问题就是生命周期，borrow类型生命周期取决owner的生命周期。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span>&lt;<span class="symbol">'a</span>&gt; &#123;</div><div class="line">    root: <span class="keyword">i64</span>,</div><div class="line">    left: &amp;<span class="symbol">'a</span> Tree&lt;<span class="symbol">'a</span>&gt;,</div><div class="line">    right: &amp;<span class="symbol">'a</span> Tree&lt;<span class="symbol">'a</span>&gt;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>Box</code>是一种智能指针，零运行时开销。拥有它所指向的数据。我们为什么称做智能的，是因为当执行过边界，它将drop掉它所指向的数据然后drop本身。不需要手动管理内存！！！</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span> &#123;</div><div class="line">  root: <span class="keyword">i64</span>,</div><div class="line">  left: <span class="built_in">Box</span>&lt;Tree&gt;,</div><div class="line">  right: <span class="built_in">Box</span>&lt;Tree&gt;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>Rc</code>是另外一种智能指针，是<code>reference count</code>的简称。用于记录数据结构被引用的次数。当引用的数字减小到0时，就自行清理。如果在一个线程，对于同一个数据有多个owner的时候，我们选用<code>Rc</code>。对于多线程，我们有<code>Arc</code>（atomic reference count)</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span> &#123;</div><div class="line">  root: <span class="keyword">i64</span>,</div><div class="line">  left: Rc&lt;Tree&gt;,</div><div class="line">  right: Rc&lt;Tree&gt;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的三个方法都可以解决之前的问题，那我们该怎么选择呢，这取决于自己的使用场景。</p>
<h3 id="Make-subtrees-optional"><a href="#Make-subtrees-optional" class="headerlink" title="Make subtrees optional"></a>Make subtrees optional</h3><p>紧接着我们又面临的问题就是无法实例化之前定义的tree结构。为什么呢？现有的数据结构，left和right子树都是Box<tree>的类型，但是我们定义的tree节点有一些是空子树。在Python代码中，我们使用了<code>None</code>,但在Rust中有<code>Option</code>：</tree></p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span> &#123;</div><div class="line">  root: <span class="keyword">i64</span>,</div><div class="line">  left: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;Tree&gt;&gt;,</div><div class="line">  right: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;Tree&gt;&gt;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们就可以创建我们第一个tree：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Tree &#123;</div><div class="line">    root: <span class="number">12</span>,</div><div class="line">    left: <span class="literal">Some</span>(<span class="built_in">Box</span>::new(Tree &#123;</div><div class="line">            root: <span class="number">10</span>,</div><div class="line">            left: <span class="literal">None</span>,</div><div class="line">            right: <span class="literal">Some</span>(<span class="built_in">Box</span>::new(Tree &#123;</div><div class="line">                    root: <span class="number">14</span>,</div><div class="line">                    left: <span class="literal">None</span>,</div><div class="line">                    right: <span class="literal">None</span>,</div><div class="line">            &#125;)),</div><div class="line">    &#125;)),</div><div class="line">    right: <span class="literal">Some</span>(<span class="built_in">Box</span>::new(Tree &#123;</div><div class="line">            root: <span class="number">16</span>,</div><div class="line">            left: <span class="literal">Some</span>(<span class="built_in">Box</span>::new(Tree &#123;</div><div class="line">                    root: <span class="number">15</span>,</div><div class="line">                    left: <span class="literal">None</span>,</div><div class="line">                    right: <span class="literal">None</span>,</div><div class="line">            &#125;)),</div><div class="line">            right: <span class="literal">Some</span>(<span class="built_in">Box</span>::new(Tree &#123;</div><div class="line">                    root: <span class="number">22</span>,</div><div class="line">                    left: <span class="literal">None</span>,</div><div class="line">                    right: <span class="literal">None</span>,</div><div class="line">            &#125;)),</div><div class="line">    &#125;)),</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>现在将代码做一些优化：</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#[derive(Default)]</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span> &#123;</div><div class="line">  root: <span class="keyword">i64</span>,</div><div class="line">  left: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;Tree&gt;&gt;,</div><div class="line">  right: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;Tree&gt;&gt;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">impl</span> Tree &#123;</div><div class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(root: <span class="keyword">i64</span>) -&gt; Tree &#123;</div><div class="line">    Tree &#123;</div><div class="line">      root: root,</div><div class="line">      ..<span class="built_in">Default</span>::<span class="keyword">default</span>()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">left</span></span>(<span class="keyword">mut</span> <span class="keyword">self</span>, leaf: Tree) -&gt; <span class="keyword">Self</span> &#123;</div><div class="line">    <span class="keyword">self</span>.left = <span class="literal">Some</span>(<span class="built_in">Box</span>::new(leaf));</div><div class="line">    <span class="keyword">self</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">fn</span> <span class="title">right</span></span>(<span class="keyword">mut</span> <span class="keyword">self</span>, leaf: Tree) -&gt; <span class="keyword">Self</span> &#123;</div><div class="line">    <span class="keyword">self</span>.right = <span class="literal">Some</span>(<span class="built_in">Box</span>::new(leaf));</div><div class="line">    <span class="keyword">self</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Tree::new(<span class="number">12</span>)</div><div class="line">  .left(</div><div class="line">    Tree::new(<span class="number">10</span>)</div><div class="line">      .right(Tree::new(<span class="number">14</span>))</div><div class="line">  )</div><div class="line">  .right(</div><div class="line">    Tree::new(<span class="number">16</span>)</div><div class="line">      .left(Tree::new(<span class="number">15</span>))</div><div class="line">      .right(Tree::new(<span class="number">22</span>))</div><div class="line">  );</div></pre></td></tr></table></figure>
<p>那为什么在Python就能完美运行呢？Python在运行的时候为树对象动态分配内存，将所有内容包装在PyObject中，类似Rc。</p>
<p>遇到类似的情况我们该怎么处理和选择呢？我们需要了解所有可能的解决方案，如果可以，我们就远离使用智能指针，坚持简单借用。如果不能，我们就选择侵入性更小的一个。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在C++11中也有智能指针shared_ptr，unique_ptr，weak_ptr，在Rust中也有叫智能指针的东西，今天我们来讨论一下Box。现在我们要构建一个二叉树。在Python中实现是比较简单的：&lt;/p&gt;
&lt;figure class=&quot;highlight pyt
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dyike.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust中的递归struct的注意点</title>
    <link href="http://www.dyike.com/2018/09/24/why-are-recursive-struct-types-illegal-in-rust/"/>
    <id>http://www.dyike.com/2018/09/24/why-are-recursive-struct-types-illegal-in-rust/</id>
    <published>2018-09-24T06:34:31.000Z</published>
    <updated>2018-09-24T10:04:59.788Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="https://stackoverflow.com/questions/25296195/why-are-recursive-struct-types-illegal-in-rust" target="_blank" rel="external">https://stackoverflow.com/questions/25296195/why-are-recursive-struct-types-illegal-in-rust</a></p>
</blockquote>
<p>我们来看一个例子吧：</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span> &#123;</div><div class="line">    mother: <span class="built_in">Option</span>&lt;Person&gt;,</div><div class="line">    father: <span class="built_in">Option</span>&lt;Person&gt;,</div><div class="line">    partner: <span class="built_in">Option</span>&lt;Person&gt;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</div><div class="line">    <span class="keyword">let</span> susan = Person &#123;</div><div class="line">        mother: <span class="literal">None</span>,</div><div class="line">        father: <span class="literal">None</span>,</div><div class="line">        partner: <span class="literal">None</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> john = Person &#123;</div><div class="line">        mother: <span class="literal">None</span>,</div><div class="line">        father: <span class="literal">None</span>,</div><div class="line">        partner: <span class="literal">Some</span>(susan),</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译会出错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">error[E0072]: recursive type `Person` has infinite size</div><div class="line"> --&gt; recursive.rs:1:1</div><div class="line">  |</div><div class="line">1 | struct Person &#123;</div><div class="line">  | ^^^^^^^^^^^^^ recursive type has infinite size</div><div class="line">2 |     mother: Option&lt;Person&gt;,</div><div class="line">  |     ---------------------- recursive without indirection</div><div class="line">3 |     father: Option&lt;Person&gt;,</div><div class="line">  |     ---------------------- recursive without indirection</div><div class="line">4 |     partner: Option&lt;Person&gt;,</div><div class="line">  |     ----------------------- recursive without indirection</div><div class="line">  |</div><div class="line">  = help: insert indirection (e.g., a `Box`, `Rc`, or `&amp;`) at some point to make `Person` representable</div></pre></td></tr></table></figure></p>
<p>出错的意思：Person是无限大小的。</p>
<p>在Rust中该怎么修复呢？上面也提示了使用<code>Box</code>, <code>Rc</code>, <code>&amp;</code>。 将<code>Person</code>放进一个<code>Box</code>,然后就正常work了。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span> &#123;</div><div class="line">    mother: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;Person&gt;&gt;,</div><div class="line">    father: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;Person&gt;&gt;,</div><div class="line">    partner: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;Person&gt;&gt;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</div><div class="line">    <span class="keyword">let</span> susan = Person &#123;</div><div class="line">        mother: <span class="literal">None</span>,</div><div class="line">        father: <span class="literal">None</span>,</div><div class="line">        partner: <span class="literal">None</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> john = Person &#123;</div><div class="line">        mother: <span class="literal">None</span>,</div><div class="line">        father: <span class="literal">None</span>,</div><div class="line">        partner: <span class="literal">Some</span>(<span class="built_in">Box</span>::new(susan)),</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这背后究竟是为什么呢？</p>
<p>我们都知道Rust在编译的时候就需要知道一个类型究竟该分配多少内存。如果一个类型的内存不知道是多少的话，比如说上面的recursive就是其中一种，需要无限的空隙间，Rust就会在编译阶段直接报错。</p>
<p>但是<code>Box</code>是知道空间大小的，上面的例子中就在一个递归中插入一个box。Susan有一个mother，father和partner，他们每一个都有一个mother，father，partner……而Box使用一个指针，这个指针是固定大小动态内存分配的。</p>
<p>在<code>structs</code>,<code>enums</code>（tuples）中的数据是直接内联存储在struct值的内存中的。给定一个struct：</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Recursive</span></span> &#123;</div><div class="line">    x: <span class="keyword">u8</span>,</div><div class="line">    y: <span class="built_in">Option</span>&lt;Recursive&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们来计算该大小：size_of::<recursive>()。很明显，x字段需要1byte， Option也需要1byte作为判别，然后就是struct中包含的Recursive的size_of::<recursive>()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">size_of::&lt;Recursive&gt;() = 2 + size_of::&lt;Recursive&gt;()</div></pre></td></tr></table></figure></recursive></recursive></p>
<p>这个size将会变得无限的大：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Recursive ==</div><div class="line">(u8, Option&lt;Recursive&gt;) ==</div><div class="line">(u8, Option&lt;(u8, Option&lt;Recursive&gt;)&gt;) ==</div><div class="line">(u8, Option&lt;(u8, Option&lt;(u8, Option&lt;Recursive&gt;)&gt;)&gt;) ==</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>而<code>Box&lt;T&gt;</code>是一个指针，有固定的大小的，所以(u8, Option<box<recursive>&gt;)的大小就是 1 + 8 bytes，此时Rust编译就知道该分配多少内存。</box<recursive></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://stackoverflow.com/questions/25296195/why-are-recursive-struct-types-illegal-in-rust&quot; target=&quot;_blank&quot; r
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dyike.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust中的String VS str</title>
    <link href="http://www.dyike.com/2018/09/22/rust-string-vs-str/"/>
    <id>http://www.dyike.com/2018/09/22/rust-string-vs-str/</id>
    <published>2018-09-22T06:34:14.000Z</published>
    <updated>2018-09-24T06:40:45.491Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写C++，业余时间在学习Rust，这好像是我第二次学了，第一次学习对有的概念还是很懵逼的，最近写了C++之后，好多东西理解起来不是那么吃力了，里面的概念超级多，好记性不如烂笔头，还是记录一下吧。</p>
<p>在Rust的官方文档References and Borrowing [<a href="https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html" target="_blank" rel="external">https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html</a>] 用到了三种不同类型的string变量：String，&amp;String 和 &amp;str</p>
<p>首先看一下str 和 String之间的区别：String是一个可变的、堆上分配的UTF-8的字节缓冲区。而str是一个不可变的固定长度的字符串，如果是从String解引用而来的，则指向堆上，如果是字面值，则指向静态内存。</p>
<h3 id="举例说明-String-和-amp-str"><a href="#举例说明-String-和-amp-str" class="headerlink" title="举例说明 String 和 &amp;str"></a>举例说明 String 和 &amp;str</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="string">"hello world"</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="string">"OK"</span>;</div><div class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"Hello Rust"</span>);</div><div class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s.capacity());    <span class="comment">// prints 12</span></div><div class="line">s.push_str(<span class="string">"Here I come!"</span>);</div><div class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s.len()); <span class="comment">// prints 24</span></div><div class="line"><span class="keyword">let</span> s = <span class="string">"Hello, Rust!"</span>;</div><div class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s.capacity()); <span class="comment">// compile error: no method named `capacity` found for type `&amp;str`</span></div><div class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s.len()); <span class="comment">// prints 12</span></div></pre></td></tr></table></figure>
<ul>
<li><p>上面的a, b 是&amp;str，不是String，&amp;str更像一个固定的数组，String像一个可变的数组。</p>
</li>
<li><p>String保留了一个len()和capacity()，但str只有一个len()。</p>
</li>
<li><p>&amp;str 是 str的一个的borrowed 类型，可以称为一个字符串切片，一个不可变的string。</p>
</li>
</ul>
<h3 id="关于-amp-String"><a href="#关于-amp-String" class="headerlink" title="关于&amp;String"></a>关于&amp;String</h3><p>&amp;String 是String的borrowed类型，这只不过是一个指针类型，可以传递而不放弃ownership。事实上，一个&amp;String可以当做是&amp;str。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</div><div class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">"Hello, Rust!"</span>);</div><div class="line">    foo(&amp;s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(s: &amp;<span class="keyword">str</span>) &#123;</div><div class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>foo()可以使用string slice或者borrowed String类型。</p>
<p>如果我们想修改字符串的内容，只需要传递一个可变引用就行了。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</div><div class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">"Hello, Rust!"</span>);</div><div class="line">    foo(&amp;<span class="keyword">mut</span> s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(s: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>) &#123;</div><div class="line">    s.push_str(<span class="string">"appending foo.."</span>);</div><div class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h3><h4 id="amp-str-gt-String"><a href="#amp-str-gt-String" class="headerlink" title="&amp;str =&gt; String"></a>&amp;str =&gt; String</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> c = a.to_string();</div><div class="line"><span class="keyword">let</span> d = <span class="built_in">String</span>::from(b);</div><div class="line"><span class="keyword">let</span> d = a.to_owned();</div></pre></td></tr></table></figure>
<h4 id="String-gt-amp-str"><a href="#String-gt-amp-str" class="headerlink" title="String =&gt; &amp;str"></a>String =&gt; &amp;str</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> e = &amp;<span class="built_in">String</span>::from(<span class="string">"Hello Rust"</span>);</div><div class="line"><span class="comment">// 或使用as_str()</span></div><div class="line"><span class="keyword">let</span> e_tmp = <span class="built_in">String</span>::from(<span class="string">"Hello Rust"</span>);</div><div class="line"><span class="keyword">let</span> e = e_tmp.as_str();</div><div class="line"><span class="comment">// 不能直接这样使用 </span></div><div class="line"><span class="comment">// let e = String::from("Hello Rust").as_str();</span></div></pre></td></tr></table></figure>
<h4 id="String-amp-str-gt-String"><a href="#String-amp-str-gt-String" class="headerlink" title="String + &amp;str =&gt; String"></a>String + &amp;str =&gt; String</h4><p>String后面接上N个&amp;str<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">mut</span> strs = <span class="string">"Hello"</span>.to_string();</div><div class="line"><span class="comment">// let mut strs = String::from("Hello");</span></div><div class="line">strs.push_str(<span class="string">" Rust"</span>);</div><div class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, strs);</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果只想要一个字符串的只读视图，或者&amp;str作为一个函数的参数，那就首选&amp;str。如果想拥有所有权，想修改字符串那就用String吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写C++，业余时间在学习Rust，这好像是我第二次学了，第一次学习对有的概念还是很懵逼的，最近写了C++之后，好多东西理解起来不是那么吃力了，里面的概念超级多，好记性不如烂笔头，还是记录一下吧。&lt;/p&gt;
&lt;p&gt;在Rust的官方文档References and Borr
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dyike.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>记入职你站一周年</title>
    <link href="http://www.dyike.com/2018/07/17/anniversary-in-bilibili/"/>
    <id>http://www.dyike.com/2018/07/17/anniversary-in-bilibili/</id>
    <published>2018-07-17T15:07:35.000Z</published>
    <updated>2018-07-17T16:11:19.568Z</updated>
    
    <content type="html"><![CDATA[<p>从16年7月份毕业，到现在工作也算有两个年头了。上一份工作在杭州，可惜没有呆满一年，最后离开了，上个周末回了一趟杭州，跟前同事一起吃了饭，聊了聊，在西湖边走一走喔鸣喔。内心还是很喜欢杭州这座城市，要不是再换一个城市成本太高了，我肯定还会回去。转眼间，在你站入职就这样一年了。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>刚到上海，顶着火辣辣的太阳，跟DIY同学一起找房子，开始两个月离公司很远，每天上班还要坐地铁，我还是挺适应坐地铁1小时上班，让我想起了北京的日子，每天坐一个小时的地铁去中关村。后来公司搬家了，从航运搬到了杨浦国正，离公司更近了。每天上下班习惯了踩单车，在复旦邯郸路等红绿灯还被送外卖的小哥干翻了两次，大家的生活都不容易，我屁股摔得很疼，也不去计较。</p>
<p>平时周末也就宅在家里，爱去菜市场买点菜，做几道菜，自己吃着合口味就行。我也发现一个奇怪的现象，每每炒两个菜的时候，一个菜会很淡一个菜会很咸。后来，总结出要是自己不会炒的菜，就尽量偏咸一点，这样吃起来不那么难吃(꒦<em>꒦) </em>)</p>
<p>没有规律地跑步，最长的坚持是连续坚持了46天，那些日子，感觉自己的颈椎不是那么疼了。跑步一定程度上能缓解我的颈椎。</p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>一年前，我顶多算是一个代码的搬运工，ctr+c和ctr+v比较多，自己在写代码上面没有太多的追求，可能自己当初的追求就是实现功能，缺少了一些多实现功能的思考。来了你站后，跟着json工作了半年多，虽然我跟他在工作上交流相处是有一些问题，我不喜欢他强势的方式，但是他对我的帮助也很大，学到的路子是野了一点，渐渐地追求代码的质量，逼迫自己在vim下编程，遇到问题怎么定位问题，解决问题发现困难怎么绕开困难等等。</p>
<p>接触写一些静态强类型的语言，这是一个对自己思维的考验，从一开始的不适应到后来的适应。想更多地接触底层的东西，自己也买了一些书籍【有的还没有看完】。接触一些关于架构设计的东西，一个系统为什么要这样设计，这样设计的业务场景，能不能做优化。如果在面试中，回答出为什么也是加分项哟！</p>
<p>年初的定的计划，技术相关的继续落实中….(刷题的感觉)</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>入职你站，无疑看到很多小姐姐，晚上无意间跟小姐姐聊了一下。想起了，公司的那啥活动，记得她是旁边小组的成员，对她的印象就是气质。后来群里下发了活动照片，那是最没有怂的一次——截图发群里求联系，简单粗暴，总之感谢大佬帮助！！！后面啥的。。。(我不编了)</p>
<p>最后，也是最重要的，就是感谢父母亲戚朋友，对自己的要求就是做好本职工作提升实力，多领点工钱！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从16年7月份毕业，到现在工作也算有两个年头了。上一份工作在杭州，可惜没有呆满一年，最后离开了，上个周末回了一趟杭州，跟前同事一起吃了饭，聊了聊，在西湖边走一走喔鸣喔。内心还是很喜欢杭州这座城市，要不是再换一个城市成本太高了，我肯定还会回去。转眼间，在你站入职就这样一年了。
    
    </summary>
    
    
      <category term="年记" scheme="http://www.dyike.com/tags/%E5%B9%B4%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>区块链学习笔记——钱包、地址、公钥、私钥</title>
    <link href="http://www.dyike.com/2018/03/19/blockchain-note-002/"/>
    <id>http://www.dyike.com/2018/03/19/blockchain-note-002/</id>
    <published>2018-03-19T13:21:22.000Z</published>
    <updated>2018-03-19T14:36:35.506Z</updated>
    
    <content type="html"><![CDATA[<p>说到区块链，大家都听到过钱包、地址、公钥、私钥这些概念。这些东西究竟是什么呢，也没有什么高大上的。</p>
<h2 id="钱包"><a href="#钱包" class="headerlink" title="钱包"></a>钱包</h2><p>如果你拥有和保存比特币，就需要通过客户端，通常这个客户端就是钱包。关于钱包的解释就不多介绍了，简单的来说就是连接区块的一个入口。像成熟的比特币、以太坊就有很多钱包工具。比特币钱包实际上是不包含比特币的，比特币钱包是由私钥和公钥所组成的数据库。<em>比特币本身是存储在区块链中</em>。用户用私钥来签名交易，从而证明他们有这笔交易。</p>
<p>对于钱包而言，最重要的就是私钥。一般钱包需要访问你的用户资产，就会要求输入私钥。</p>
<p>一个钱包包含的信息有：</p>
<ul>
<li>公钥、私钥、地址</li>
<li>与钱包中地址相关的交易信息</li>
<li>其他数据</li>
</ul>
<p>钱包中的地址生成过程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">私钥 ---&gt; 公钥 ---&gt; 地址</div></pre></td></tr></table></figure></p>
<p>上面的过程是单向的，反过来是不的行。</p>
<p>钱包根据不同的维度还分为多种。<br>根据访问钱包数据类型，钱包分类如下：</p>
<ul>
<li>CS 型 (Server-Client)：服务端-客户端模式，大部分数据存储在服务端</li>
<li>BS 型：所有数据均通过浏览器在线使用</li>
</ul>
<p>根据同步数据类型，钱包分类如下：</p>
<ul>
<li>完全节点型 (Full Node)：含有 BlockChain 所有完整数据</li>
<li>简易节点型 (SPV Node)：Header-Only Clients，仅有 Block 头部信息，无需交易数据</li>
</ul>
<p>拥有了一个钱包，获得自己的地址。就像银行账户，有了它别人就可以给你转账。很多钱包软件可以帮你生成自己的地址。此外钱包还是可以自己开发的，这儿就不多介绍了。</p>
<h2 id="私钥、公钥、地址"><a href="#私钥、公钥、地址" class="headerlink" title="私钥、公钥、地址"></a>私钥、公钥、地址</h2><p>刚刚也说了，对于钱包最核心的就是私钥。私钥是一个大于零，小于1.158 * 10^77的一个任意数字，挑中了就是你的。然后通过椭圆曲线函数，生成对应的公钥，再经过一系列的hash计算得到地址。</p>
<p>如果一个人公开了他的比特币地址，我们就可以在Blockchain.info 网站输入比特币地址查询到他的资产和交易记录，我们只能看到他的资产，却没法通过地址反推出他的私钥。私钥就可以认为是银行账号的密码。如果私钥丢失了，我们就没法找到会这部分资产。</p>
<h2 id="钱在哪里？"><a href="#钱在哪里？" class="headerlink" title="钱在哪里？"></a>钱在哪里？</h2><p>前面就提到了，比特币本身是存储在区块链中。可见，钱不是存在钱包里。钱包这个软件只是可以显示余额，完成交易【唯一记录就是私钥，交易需要私钥签名】。</p>
<p>钱的数量存在区块链上，如果你下载一个比特币的客户端，同步以后有大约100多G的数据。里面包含了从第一笔交易到现在快10年的所有数据。钱并不存在在任何地方，钱的余额存在无数的电脑共同维护的一个账本里。</p>
<h2 id="钱包的创建、恢复"><a href="#钱包的创建、恢复" class="headerlink" title="钱包的创建、恢复"></a>钱包的创建、恢复</h2><p>钱包创建后，我想恢复怎么办？就需要助记词。我在创建钱包的时候，钱包就帮我生成了一串12个单词的句子。说这句话要抄下来，不要截屏保存。每个单词都有一个自己的编号，这些编号按照复杂的算法拼起来就可以还原出私钥。</p>
<p>助记词生成的过程：</p>
<ul>
<li>创造一个 128 到 256 位的随机顺序（熵）。</li>
<li>提出 SHA256 哈希前几位，就可以创造一个随机序列的校验和。</li>
<li>把校验和加在随机顺序的后面。</li>
<li>把顺序分解成 11 位的不同集合，并用这些集合去和一个预先已经定义的 2048 个单词字典做对应。</li>
<li>生成一个 12 至 24 个词的助记码。</li>
</ul>
<p>128 位熵产生 12 位单词的助记词，助记词产生 512 位的种子。什么是种子呢？种子就是能生成主密钥的数据，钱包所有的数据都衍生自这个种子。通常某些钱包还会包含一个密码，这个密码是进入钱包的凭证。它仅仅是是一个保护私钥的密码，丢了存私钥的文件，有密码也没有用了。</p>
<p>！注：BIP39（Bitcoin Improvement Proposal 39）定义了2048个单词的列表。</p>
<p>选择正确的钱包很重要，如果往不支持该token的钱包里转token，可能会导致token再也找不回来。</p>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ul>
<li>私钥不能更改，私钥改了 -&gt; 公钥变了 -&gt; 地址就变了，就成了另外一个钱包了。私钥泄露，也没有办法了。</li>
<li>私钥忘了，忘了就忘了，没有办法了。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到区块链，大家都听到过钱包、地址、公钥、私钥这些概念。这些东西究竟是什么呢，也没有什么高大上的。&lt;/p&gt;
&lt;h2 id=&quot;钱包&quot;&gt;&lt;a href=&quot;#钱包&quot; class=&quot;headerlink&quot; title=&quot;钱包&quot;&gt;&lt;/a&gt;钱包&lt;/h2&gt;&lt;p&gt;如果你拥有和保存比特币，就
    
    </summary>
    
    
      <category term="BlockChain" scheme="http://www.dyike.com/tags/BlockChain/"/>
    
  </entry>
  
  <entry>
    <title>区块链学习笔记——链、哈希、比特币、挖矿</title>
    <link href="http://www.dyike.com/2018/03/18/blockchain-note-001/"/>
    <id>http://www.dyike.com/2018/03/18/blockchain-note-001/</id>
    <published>2018-03-18T07:28:14.000Z</published>
    <updated>2018-03-18T09:34:38.432Z</updated>
    
    <content type="html"><![CDATA[<p>当前火热的区块链技术，让好多人都为之疯狂。单纯地研究技术的话，还是可以花一点时间。所以这儿就记录一点自己的学习笔记。</p>
<h2 id="链"><a href="#链" class="headerlink" title="链"></a>链</h2><p>区块链的英文名字叫BlockChain，从字面上理解是不是可以拆成Block和Chain。从Wikipedia上的解释是一些记录的列表打包在一起，称为区块，这些区块通过密码学的知识将他们连接在一起。</p>
<p>学计算机的同学可能都知道什么是链表，链表其实是一个数据结构，是一种线性表，并不会按线性的顺序存储数据，而是在每一个节点里存下一个节点的指针。</p>
<p>区块链的底层就是使用了链表数据结构，这个数据块是有顺序的，当前的数据块总能找到上一个数据块。</p>
<p>链表中有头(首)节点，区块链中的首块称为创世区块。在区块链中，每一个区块(链表中数据块)有两个基本结构：Head和Body。</p>
<p>先看区块的结构图：<br><img src="https://raw.githubusercontent.com/dyike/dyike.github.io/master/images/blockchain/block.jpg" alt="区块的结构图"><br>以比特币分析：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">|-----HEAD  - 6 attributes  --- 80B(字节)</div><div class="line">|      |--- VERSION   --- 4B    区块版本号，验证规则</div><div class="line">|      |--- CURRENT   --- 32B   当前区块Hash</div><div class="line">|      |--- PREVIOUS  --- 32B   前一个区块的Hash，SHA256(SHA256(父区块头))</div><div class="line">|      |--- TARGET    --- 4B    该区块工作量证明算法的难度目标</div><div class="line">|      |--- TIME      --- 4B    时间戳</div><div class="line">|      |--- NONCE     --- 4B</div><div class="line">|</div><div class="line">|-----Body - 1 or more TRANSACTIONS(交易记录)      </div><div class="line">|      |--- TRANSACTIONS</div><div class="line">|               |--- INPUT</div><div class="line">|               |--- OUTPUT</div></pre></td></tr></table></figure></p>
<p>其中头部的CURRENT和PREVIOUS就是一串哈希值。NONCE和TARGET跟POW共识机制挖矿有关。<br>比特币目前的版本VERISON是0x20000000，相当于block的第五个版本。用一个位数表示一个独立的功能，以区分未来的软分叉。</p>
<h2 id="Hash哈希"><a href="#Hash哈希" class="headerlink" title="Hash哈希"></a>Hash哈希</h2><p>写代码的人都知道哈希是一种算法，输入一个东西(字符串，图片，视频等等)，最后变成一个有固定长度的哈希值，这个值是唯一的，输入的内容稍微改了一点，哈希值都会改变。从这个哈希也很难推导出原始数据。在比特币中用的哈希算法是SHA256。</p>
<p>比如说PHP中</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">php &gt; <span class="keyword">echo</span> hash(<span class="string">'sha256'</span>, <span class="string">'ityike'</span>);</div><div class="line">fc4b100a38b5c9894cfff0dab6c258bcbcfd34a79c7c4b54f440b30846aa581b</div><div class="line">php &gt; <span class="keyword">echo</span> hash(<span class="string">'sha256'</span>, <span class="string">'iiyike'</span>);</div><div class="line">dd81a0135044ea78686dd97503757eca984f8047c965db75dde5ce53b2202100</div></pre></td></tr></table></figure>
<p>不难看出，稍微改了一个字符，输出的哈希值就是完全不一样，完全没有规律。</p>
<h2 id="区块头和ID、挖矿"><a href="#区块头和ID、挖矿" class="headerlink" title="区块头和ID、挖矿"></a>区块头和ID、挖矿</h2><p>在上面提到了区块头部的CURRENT和PREVIOUS就是一串哈希值。每个区块的ID从他的区块头80个字节数据两次SHA256哈希得到。在比特币中，对于这个ID有要求，符合条件的ID才是合法的。区块头的哈希值必须小于一个数。每一个新的区块的长达64字节的id前面都用零补全，一个合法的区块id是长这样子的：<code>0000000000000000003c19cdbebe2df5c7f82558e2c80a0c7341e25072b732a2</code></p>
<p>数据区块的产生就是要计算出新的区块Id，其实就是挖矿的过程。挖矿的机器，只要找到一个幸运数字填到Nonce的位置，使得区块头的数据两次哈希后的值以18个以上0位开头，就表明区块生成，符合条件。不断的尝试幸运数据，知道符合条件。</p>
<p>此外，比特币还会动态的调整调整难度，这样做主要为了保证大约每10分钟产生一个区块。然而全网算力是变化的，如果想要新区块的产生保持都基本这个速率，难度值必须根据全网算力的变化进行调整。难度的调整是在每个完整节点中独立自动发生的。每2016个区块，所有节点都会按统一的公式自动调整难度，也就是说，如果区块产生的速率比10分钟快则增加难度，比10分钟慢则降低难度。这个公式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">新难度值 = 旧难度值 * ( 过去2016个区块花费时长 / 20160 分钟 )</div></pre></td></tr></table></figure></p>
<p>比特币POW的目标值(target)计算公式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">目标值 = 最大目标值 / 难度值</div></pre></td></tr></table></figure></p>
<p>目标值的最大值为一个恒定值：<code>0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</code></p>
<p>难度系数越调越高（目标值越来越小），导致了采矿越来越难。</p>
<p>当计算出符合条件的区块ID后，就开始向全网广播这个新区块，从而获得奖励，目前的奖励是12.5个比特币，每4年减半。这个12.5个比特币是比特网络上唯一没有发款人只有收款人的交易，新比特币就这样凭空诞生了。</p>
<h2 id="区块链的分叉"><a href="#区块链的分叉" class="headerlink" title="区块链的分叉"></a>区块链的分叉</h2><p>如果两个人同时向区块写入数据，也就是说有两个区块加入，因为他们的前一个区块是同一个，这就形成了分叉。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">          []</div><div class="line">         /</div><div class="line">[]&lt;=[]&lt;=</div><div class="line">         \</div><div class="line">          []</div></pre></td></tr></table></figure>
<p>目前的规则是，新节点总是采用最长的那条区块链。如果区块链有分叉，将看哪个分支在分叉点后面，先达到6个新区块（称为”六次确认”）。按照10分钟一个区块计算，一小时就可以确认。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">          []</div><div class="line">         /</div><div class="line">[]&lt;=[]&lt;=</div><div class="line">         \</div><div class="line">          []&lt;=[]&lt;=[]&lt;=[]&lt;=[]&lt;=[]</div></pre></td></tr></table></figure></p>
<p>其实添加新的区块是需要算理的，最终拥有最大算力的一方获胜。如果有人掌握了51%以上的算力就能控制区块链。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>区块链是分布式的数据库，对于数据，哪怕修改了很小的一部分，数据的哈希就变了，区块头就变了。在目前来看，还是安全的，可行的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当前火热的区块链技术，让好多人都为之疯狂。单纯地研究技术的话，还是可以花一点时间。所以这儿就记录一点自己的学习笔记。&lt;/p&gt;
&lt;h2 id=&quot;链&quot;&gt;&lt;a href=&quot;#链&quot; class=&quot;headerlink&quot; title=&quot;链&quot;&gt;&lt;/a&gt;链&lt;/h2&gt;&lt;p&gt;区块链的英文名字
    
    </summary>
    
    
      <category term="BlockChain" scheme="http://www.dyike.com/tags/BlockChain/"/>
    
  </entry>
  
  <entry>
    <title>WebPack配置vue多页面</title>
    <link href="http://www.dyike.com/2018/01/03/vue-webpack-mutiple-pages/"/>
    <id>http://www.dyike.com/2018/01/03/vue-webpack-mutiple-pages/</id>
    <published>2018-01-03T14:53:57.000Z</published>
    <updated>2018-01-03T15:20:34.845Z</updated>
    
    <content type="html"><![CDATA[<p>WebPack虐我千百遍，我带她如初恋。一个项目前台页面写差不多了，webpack几乎零配置，也算work起来了。现在需要编写后台管理界面，另起一个单独的项目，那是不存在的。于是网上了搜了大把大把的文章，很多都是修改了项目的结构，讨厌，vue-cli搞的那一套，干嘛要修改来修改去的。像我这种前端小萌新，webpack的配置改着就把前台部分run不起来了。。。</p>
<p>于是就有了这个笔记：</p>
<p>先看看项目的结构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">├── build</div><div class="line">├── config</div><div class="line">├── src</div><div class="line">│   ├── api</div><div class="line">│   ├── assets</div><div class="line">│   ├── components</div><div class="line">│   ├── pages</div><div class="line">│   ├── router</div><div class="line">│   ├── utils</div><div class="line">│   ├── vuex</div><div class="line">│   ├── App.vue</div><div class="line">│   ├── main.js</div><div class="line">│   ├── admin.js</div><div class="line">│   └── Admin.vue</div><div class="line">├── static</div><div class="line">│   └── images</div><div class="line">├── README.md</div><div class="line">├── admin.html</div><div class="line">├── index.html</div><div class="line">├── package.json</div><div class="line">└── yarn.lock</div></pre></td></tr></table></figure>
<p>我相信这样的结构大家一定很熟悉，除了<code>admin.html</code>和src文件夹下面的<code>Admin.vue</code>、<code>admin.js</code>，还有一些api，pages，vuex等文件夹，就是最常见的一个vue-cli初始化的项目结构。</p>
<p>我想要就是新增一个后台管理界面的入口admin.html，其他能够共用的还是共用，进入正题：</p>
<h2 id="修改webpack的配置文件"><a href="#修改webpack的配置文件" class="headerlink" title="修改webpack的配置文件"></a>修改webpack的配置文件</h2><h3 id="修改-webpack-base-conf-js"><a href="#修改-webpack-base-conf-js" class="headerlink" title="修改 webpack.base.conf.js"></a>修改 webpack.base.conf.js</h3><p>打开 <code>~\build\webpack.base.conf.js</code> ，找到entry，添加多入口:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">  <span class="attr">app</span>: <span class="string">'./src/main.js'</span>,</div><div class="line">  <span class="attr">admin</span>: <span class="string">'./src/admin.js'</span>   <span class="comment">//新增</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>这样运行编译的时候，每一个入口都会对应一个chunk。</p>
<h2 id="run-dev配置的修改"><a href="#run-dev配置的修改" class="headerlink" title="run dev配置的修改"></a>run dev配置的修改</h2><p>打开 ·~\build\webpack.dev.conf.js· ，在plugins下找到<code>HtmlWebpackPlugin</code>，在其后面添加对应的多页，并为每个页面添加Chunk配置如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">  <span class="attr">filename</span>: <span class="string">'index.html'</span>, <span class="comment">//生成的html</span></div><div class="line">  template: <span class="string">'index.html'</span>, <span class="comment">//来源html</span></div><div class="line">  inject: <span class="literal">true</span>,   </div><div class="line">  <span class="attr">chunks</span>: [<span class="string">'app'</span>]<span class="comment">//需要引入的Chunk，不配置就会引入所有页面的资源</span></div><div class="line">&#125;),</div><div class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">  <span class="attr">filename</span>: <span class="string">'admin.html'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">'admin.html'</span>,</div><div class="line">  <span class="attr">inject</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">chunks</span>: [<span class="string">'admin'</span>]</div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<h2 id="run-build配置的修改"><a href="#run-build配置的修改" class="headerlink" title="run build配置的修改"></a>run build配置的修改</h2><h3 id="修改config-index-js"><a href="#修改config-index-js" class="headerlink" title="修改config/index.js"></a>修改config/index.js</h3><p>打开<code>~\config\index.js</code>，找到build下的<code>index: path.resolve(__dirname, &#39;../dist/index.html&#39;)</code>，在其后添加多页:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">admin: path.resolve(__dirname, <span class="string">'../dist/admin.html'</span>),</div></pre></td></tr></table></figure>
<h3 id="修改webpack-prod-conf-js"><a href="#修改webpack-prod-conf-js" class="headerlink" title="修改webpack.prod.conf.js"></a>修改<code>webpack.prod.conf.js</code></h3><p>打开<code>~\build\webpack.prod.conf.js</code>，在plugins下找到<code>HtmlWebpackPlugin</code>，在其后面添加对应的多页，并为每个页面添加Chunk配置:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">  <span class="attr">filename</span>: config.build.index,</div><div class="line">  <span class="attr">template</span>: <span class="string">'index.html'</span>,</div><div class="line">  <span class="attr">inject</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">minify</span>: &#123;</div><div class="line">    <span class="attr">removeComments</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">removeAttributeQuotes</span>: <span class="literal">true</span></div><div class="line">    <span class="comment">// more options:</span></div><div class="line">    <span class="comment">// https://github.com/kangax/html-minifier#options-quick-reference</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// necessary to consistently work with multiple chunks via CommonsChunkPlugin</span></div><div class="line">  chunksSortMode: <span class="string">'dependency'</span>,</div><div class="line">  <span class="attr">chunks</span>: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, <span class="string">'app'</span>]</div><div class="line">&#125;),</div><div class="line"></div><div class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">  <span class="attr">filename</span>: config.build.admin,</div><div class="line">  <span class="attr">template</span>: <span class="string">'admin.html'</span>,</div><div class="line">  <span class="attr">inject</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">minify</span>: &#123;</div><div class="line">    <span class="attr">removeComments</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">removeAttributeQuotes</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">chunksSortMode</span>: <span class="string">'dependency'</span>,</div><div class="line">  <span class="attr">chunks</span>: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, <span class="string">'admin'</span>]</div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>恩，没有了，就不修改什么项目结构了，过程越复杂越容易出错。上面webpack的配置简单能看懂。Enjoy~~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebPack虐我千百遍，我带她如初恋。一个项目前台页面写差不多了，webpack几乎零配置，也算work起来了。现在需要编写后台管理界面，另起一个单独的项目，那是不存在的。于是网上了搜了大把大把的文章，很多都是修改了项目的结构，讨厌，vue-cli搞的那一套，干嘛要修改来
    
    </summary>
    
    
      <category term="vue" scheme="http://www.dyike.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>继往开来</title>
    <link href="http://www.dyike.com/2017/12/31/2017-in-all/"/>
    <id>http://www.dyike.com/2017/12/31/2017-in-all/</id>
    <published>2017-12-31T14:11:40.000Z</published>
    <updated>2018-01-02T14:37:37.394Z</updated>
    
    <content type="html"><![CDATA[<p>2017年就这样过去了，不是很敢回忆2017年是怎么过来的，虽然2017年不是本命年，但我总的感觉比本命年过得还有寒碜，总之不顺。上半年的计划几乎完成，下半年的计划几乎没有完成！</p>
<h2 id="工作部分"><a href="#工作部分" class="headerlink" title="工作部分"></a>工作部分</h2><p>这一年，从杭州到上海，来上海有多种原因，最终还是来了。中间在六月份的时候提出离职，最后七月初离开的。离开DXY也有一点点埋怨，这个之前也写了一篇文章，第一次抹黑一家我工作过的公司，我希望也是最后一次。写那个文章的时候，可能当初真的不是懂事，后来来慢慢地就明白了一些道理，这就是成长的经历吧。来到上海也差不多快半年了，工作的内容跟以前也不大一样，学到了不少东西，这里就不展开细说了，要说可能说两天都说不完。以前的工作也算是比较单调，做来做去就是那些东西，感觉也没有什么新意，时间长了自然感觉到厌倦，那种的环境待久了真的不是很适合自己的成长，走出来也是一种自我的觉醒。现在的工作谈不上多么的有趣，但总能从中悟出一些东西，还是值得的。平时也没有什么加班，晚上回到家，也能写点自己的相关。反正都是瞎折腾嘛。</p>
<h2 id="生活相关"><a href="#生活相关" class="headerlink" title="生活相关"></a>生活相关</h2><p>来到上海后，生活的节奏比以前快多了，之前在北京生活过，知道什么样的生活节奏比较快，从杭州到上海，自然能感觉到。杭州其实是很美的城市，适宜居住，当然了现在的房价也很高。也许有一天还是会回到杭州。在杭州的时候，生活的压力也不是很大，工作日都是在外面或者公司吃饭，周末了有闲情的话就自己煮饭。到了上海，吃了一些日子的外卖，厌倦了外卖，就每天自己做饭，想吃什么就做什么，唯二的缺点就是自己长胖了和每天要花一个小时在做饭上面。快年底的时候，开始锻炼了，每天坚持跑步锻炼了。总得来说，生活还是很单调的！</p>
<h2 id="情感部分"><a href="#情感部分" class="headerlink" title="情感部分"></a>情感部分</h2><p>这个是我最不想说的部分。在泡妹子方面我确实不是很擅长。年初的时候认识了她，现在这样的处境，也不知道该说什么，我能做的还会继续做下去。毕竟我上过董路老师的车，他发的几百趟车，我好歹也上了100+趟，也学到了一些东西，希望能付诸实践！也祝自己顺利！</p>
<h2 id="计划部分"><a href="#计划部分" class="headerlink" title="计划部分"></a>计划部分</h2><p>开篇也说了下半年的计划都没有实现，定太多的计划真的不是很实际。上半年为什么能完成，也是一点点的完成的。今后还是慢慢来吧，每一天充实起来。最后就是希望能继续锻炼身体。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年就这样过去了，不是很敢回忆2017年是怎么过来的，虽然2017年不是本命年，但我总的感觉比本命年过得还有寒碜，总之不顺。上半年的计划几乎完成，下半年的计划几乎没有完成！&lt;/p&gt;
&lt;h2 id=&quot;工作部分&quot;&gt;&lt;a href=&quot;#工作部分&quot; class=&quot;header
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>生成Charts图片，并发送Charts图片邮件</title>
    <link href="http://www.dyike.com/2017/10/16/charts-and-text-email-tutorial/"/>
    <id>http://www.dyike.com/2017/10/16/charts-and-text-email-tutorial/</id>
    <published>2017-10-16T14:33:37.000Z</published>
    <updated>2017-11-12T14:33:40.549Z</updated>
    
    <content type="html"><![CDATA[<p>CTEmail(Charts and Text Email)是一个发送带有图片的邮件的小工具，这个图片是邮件内容中显示，不是添加在附件中，这个脚本实现的比较简单粗暴，不管长相丑陋，只要能解决实际问题就行。</p>
<h2 id="为什么有CTEmail"><a href="#为什么有CTEmail" class="headerlink" title="为什么有CTEmail?"></a>为什么有CTEmail?</h2><ul>
<li>没有一个不懒的程序员，做啥都想着写个脚本跑一下，跑个脚本抢月饼，跑个脚本…能用脚本的干嘛不用脚本。每天的数据报表需要一个邮件脚本发送。</li>
<li>对接了各大厂商，每天每周每月都会往来邮件。报表用图表的形式更简单直观的反馈数据，为什么我们不在邮件中使用图表。</li>
<li>各大厂商的邮件中图表都是小姐姐手动制作，手动发出%&gt;_&lt;%，为什么不跑一个脚本。</li>
<li>如果解决上面的问题，是不是解放了小手。1) 用数据生成图表，2) 将图表拼接到邮件中发出。</li>
</ul>
<p>这个小工具的初衷，解决实际问题还是很重要的。</p>
<h2 id="哪些人需要这个工具？"><a href="#哪些人需要这个工具？" class="headerlink" title="哪些人需要这个工具？"></a>哪些人需要这个工具？</h2><ul>
<li>产品同学，图表是展示数据的最佳实践！</li>
<li>运营同学，图表是展示报表的最佳实践！</li>
<li>技术同学，为了继续懒下去！</li>
<li>…零编程基础的同学都能使用【只要会科学上网就能解决一切】</li>
</ul>
<p>说这些都是没用，那就跟来做一下吧。<br>项目托管在github上，地址：<a href="https://github.com/dyike/CTEmail" target="_blank" rel="external">dyike/CTEmail</a>。记得来star哟！！！</p>
<h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><p>首先，稍微知道怎么操作Python，像我这种不会写代码都能操作，你一定也可以。其次是到<a href="https://plot.ly/python/getting-started/" target="_blank" rel="external">Plotly</a>——这是一个可视化数据的工具有点类似于HighCharts，不过支持多种语言，很强大了。先熟悉一下， 然后注册一个账号，后面会用到。本文着重数据生成图表图片。邮件服务配置查看<code>README</code></p>
<h3 id="1st-Step："><a href="#1st-Step：" class="headerlink" title="1st Step："></a>1st Step：</h3><p>将项目clone下来，熟悉项目的结构，里面不到两百行代码，简单粗暴。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:dyike/CTEmail.git</div></pre></td></tr></table></figure>
<p>在<code>send.py</code>文件中配置自己的邮箱账号，密码，邮件标题，邮件模板路径和发送到的邮箱。</p>
<p>邮件模板的默认路径是<code>./content/</code>，会自动读取该路径下的html文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> ctemail <span class="keyword">import</span> CTEmail</div><div class="line">e = CTEmail(<span class="string">'Your email acount'</span>, <span class="string">'Your password'</span>)</div><div class="line"><span class="comment"># " ./content/ 邮件文件的路径 "</span></div><div class="line">e.send_email(<span class="string">'Test Email Title'</span>, <span class="string">'./content/'</span>, [<span class="string">'i@ityike.com'</span>])</div></pre></td></tr></table></figure>
<p>默认是配置QQ的STMP发送服务（stmp.qq.com）,端口是25。你也可以配置163.gmail等等，在初始化CTEmail()配置相应的配置即可。</p>
<h3 id="2nd-Step"><a href="#2nd-Step" class="headerlink" title="2nd Step:"></a>2nd Step:</h3><p>项目中提供了一个默认的模板，你可以根据你的实际需求定制的模板，<code>content</code>文件夹下面还有图片资源，我们生成的图表的图片资源也是在该文件夹下面。</p>
<p>需要注意的是，html文件中，将img标签用<email_img>给包了一层，这样只是为了能够方便Python解析，替换。【ps：这里可以了解一下Python发送图片邮件的实现，将图片cid替换进来】<a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832745198026a685614e7462fb57dbf733cc9f3ad000" target="_blank" rel="external">参考廖雪峰老师的教程</a> 这里你可以不Care这些事。</email_img></p>
<p>模板中需要注意的一点：也是非常重要的一点就是：html中多个<email_img>标签需要换行。不换行就无法正确解析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a&gt;&lt;EMAIL_IMG&gt;&lt;img src=&quot;image1.png&quot;&gt;&lt;/EMAIL_IMG&gt;&lt;/a&gt;</div><div class="line">&lt;a&gt;&lt;EMAIL_IMG&gt;&lt;img src=&quot;image2.png&quot;&gt;&lt;/EMAIL_IMG&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></email_img></p>
<h3 id="3th-Step"><a href="#3th-Step" class="headerlink" title="3th Step:"></a>3th Step:</h3><p>快要结束了，本文的却重点来了，不要慌，也很简单。就是使用Plotly，关于使用离线（本地）模式还是在线模式，看自己实际需求。我这里说在线的。因为我用的是定时脚本，我只能调用在线的API生成图片保存到本地<code>content</code>文件夹下面。</p>
<ul>
<li><p>安装Plotly</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install plotly</div></pre></td></tr></table></figure>
</li>
<li><p><code>get_img.py</code>文件,文件名可以重命名，里面需要的配置你的认证信息credentials，信息在<code>https://plot.ly/settings/api</code>中查看。有两种方式：第一种如下<br>设置username和api_key。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> plotly </div><div class="line">plotly.tools.set_credentials_file(username=<span class="string">'DemoAccount'</span>, api_key=<span class="string">'lr1c37zw81'</span>)</div></pre></td></tr></table></figure>
<p>或者在安装完成后，在<code>~/.plotly/.credentials</code>文件中配置你的账号信息。<br>看到的信息大致如下：修改对应的即可。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"DemoAccount"</span>,</div><div class="line">    <span class="attr">"stream_ids"</span>: [<span class="string">"ylosqsyet5"</span>, <span class="string">"h2ct8btk1s"</span>, <span class="string">"oxz4fm883b"</span>],</div><div class="line">    <span class="attr">"api_key"</span>: <span class="string">"lr1c37zw81"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>继续<code>get_img.py</code>文件<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</div><div class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</div><div class="line"></div><div class="line">py.sign_in(<span class="string">'Your account'</span>, <span class="string">'API Token'</span>) <span class="comment"># 注意：这里是plotly网站的用户名和密码</span></div><div class="line"></div><div class="line">trace = go.Bar(x=[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], y= [<span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>])</div><div class="line">data = [trace]</div><div class="line">layout = go.Layout(title=<span class="string">'A Simple Plot'</span>, width=<span class="number">800</span>, height=<span class="number">640</span>)</div><div class="line">fig = go.Figure(data=data, layout=layout)</div><div class="line"><span class="comment"># 保存图片文件的路径</span></div><div class="line">py.image.save_as(fig, filename=<span class="string">'./content/image1.png'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 拼接模板文件</span></div><div class="line">template = <span class="string">'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;body&gt;'</span> + <span class="string">"\n"</span> + <span class="string">'&lt;a&gt;&lt;EMAIL_IMG&gt;&lt;img src="image1.png"&gt;&lt;/EMAIL_IMG&gt;&lt;/a&gt;'</span> + <span class="string">"\n"</span> + <span class="string">'&lt;a&gt;&lt;EMAIL_IMG&gt;&lt;img src="image2.png"&gt;&lt;/EMAIL_IMG&gt;&lt;/a&gt;'</span> + <span class="string">"\n"</span> + <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> template</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意上面拼接模板文件内容的时候使用了换行符<code>&quot;\n&quot;</code>,为什么这样使用，一简单粗暴，二为了引起重视【这里有坑】。</p>
<ul>
<li><p>执行上面的脚本文件<code>python get_img.py &gt; ./content/index.html</code> 这样就可以将模板文件写入到<code>content</code>目录下的<code>index.html</code></p>
</li>
<li><p>执行<code>python send.py</code>邮件就可以发送邮件，将上面的几个命令写入到shell脚本中,更新方便快捷。</p>
</li>
<li><p>其他图表的生成也可以参考官方文档的介绍。</p>
</li>
</ul>
<h3 id="4th-Enjoy-it"><a href="#4th-Enjoy-it" class="headerlink" title="4th Enjoy it!!!"></a>4th Enjoy it!!!</h3><p>放在最后的不是不重要，解决实际问题才是更重要，欢迎来<a href="https://github.com/dyike/CTEmail" target="_blank" rel="external">CTEmail</a>Star！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CTEmail(Charts and Text Email)是一个发送带有图片的邮件的小工具，这个图片是邮件内容中显示，不是添加在附件中，这个脚本实现的比较简单粗暴，不管长相丑陋，只要能解决实际问题就行。&lt;/p&gt;
&lt;h2 id=&quot;为什么有CTEmail&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
    
      <category term="Python" scheme="http://www.dyike.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之“工厂方法模式”——计算器实例</title>
    <link href="http://www.dyike.com/2017/09/12/design-pattern-factory-method/"/>
    <id>http://www.dyike.com/2017/09/12/design-pattern-factory-method/</id>
    <published>2017-09-12T14:44:06.000Z</published>
    <updated>2017-09-12T15:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是工厂模式？"><a href="#什么是工厂模式？" class="headerlink" title="什么是工厂模式？"></a>什么是工厂模式？</h3><p>就是定义一个创建对象的接口，让子类是实例化具体的类，工厂方法就是让类的实例化，延迟到子类中。这是属于创建类模式。</p>
<h3 id="怎么实现？"><a href="#怎么实现？" class="headerlink" title="怎么实现？"></a>怎么实现？</h3><p>用模板方法的方式创建对象来解决，父类定义所有标准通用行为，然后将创建细节放在子类中实现并输出给客户端。工厂方法模式主要四个要素：</p>
<ul>
<li>工厂接口。工厂接口是工厂方法模式的核心，与调用者直接交互用来提供产品。</li>
<li>工厂实现。工厂实现决定如何实例化产品，是实现扩展的途径，需要多少种产品，就需要多少具体工厂实现。</li>
<li>产品接口。产品接口的主要目的是定义产品的规范，所有的产品实现都必须遵循产品接口定义的规范。</li>
<li>产品实现。实现产品接口的具体类，决定了产品在客户端中的具体行为。</li>
</ul>
<h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>工厂模式是一种典型的解耦模式，当需要系统有比较好的扩展性时，可以考虑工厂模式，不同的产品用不同的实现工厂来组装。</p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="comment">// 协议</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num: (<span class="type">Double</span>, <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">get</span></div><div class="line">        <span class="keyword">set</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>?</div><div class="line">    <span class="comment">// 工厂</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遵守协议</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Addition</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> + num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Addition</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Subtraction</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> - num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Subtraction</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Multiplication</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> * num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Multiplication</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Division</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">var</span> result: <span class="type">Double</span>?</div><div class="line">        <span class="keyword">if</span> num.<span class="number">1</span> != <span class="number">0</span> &#123;</div><div class="line">            result = num.<span class="number">0</span> / num.<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Division</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> testSubtraction = <span class="type">Subtraction</span>.createOperation()</div><div class="line">testSubtraction.num = (<span class="number">5</span>, <span class="number">2</span>)</div><div class="line"><span class="built_in">print</span>(testSubtraction.getResult())</div><div class="line"></div><div class="line"><span class="keyword">var</span> testMultiplication = <span class="type">Multiplication</span>.createOperation()</div><div class="line">testMultiplication.num = (<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="built_in">print</span>(testMultiplication.getResult())</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是工厂模式？&quot;&gt;&lt;a href=&quot;#什么是工厂模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是工厂模式？&quot;&gt;&lt;/a&gt;什么是工厂模式？&lt;/h3&gt;&lt;p&gt;就是定义一个创建对象的接口，让子类是实例化具体的类，工厂方法就是让类的实例化，延迟到子类中。
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.dyike.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之”简单工厂模式“——计算器示例</title>
    <link href="http://www.dyike.com/2017/09/11/design-pattern-simple-factory/"/>
    <id>http://www.dyike.com/2017/09/11/design-pattern-simple-factory/</id>
    <published>2017-09-11T14:30:12.000Z</published>
    <updated>2017-09-11T14:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习设计模式，其实跟语言是无关的，我们主要是学习其中的思想。今天换一个语言来实现吧，主要好久没有写swift了，今天就拿swift来写好了。</p>
<p>还是先来说说概念吧，简单工厂模式（simple factory pattern）又称为静态工厂方法模式，是属于创建型模式。可以根据参数的不同返回不同类的实例，说通俗一点就是一家工厂，能够生产轮胎，还能生产齿轮等等，只需要跟工厂说一声（传参数），就能生产出来了。一般情况下被创建的实例都是具有共同的父类。</p>
<p>什么时候使用？比如在计算器中，有加法运算，有减法运算，有乘法运算，有除法运算等等。各个运算都是一种运算操作（operator）,我们只是修改部分属性从而让他们具备了不同的运算能力。如果我们希望我们在使用这个计算器的时候，我们不需要知道具体是怎么计算的，就只需要得到正确的结果，此时，不是不就可以使用简单工厂模式。</p>
<p>下面直接看源码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="comment">// 协议</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num: (<span class="type">Double</span>, <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">get</span></div><div class="line">        <span class="keyword">set</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>?</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遵循此协议</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Addition</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> + num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Subtraction</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> - num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Multiplication</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> * num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Division</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">var</span> result: <span class="type">Double</span>?</div><div class="line">        <span class="keyword">if</span> num.<span class="number">1</span> != <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> num.<span class="number">0</span> / num.<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 操作符枚举</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Operators</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> addition, subtraction, multiplication, divsion</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 工厂 </span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OperatorFactory</span> </span>&#123;</div><div class="line">	  <span class="comment">// 计算操作</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">calculateForOperator</span><span class="params">(<span class="number">_</span> opt: Operators)</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">switch</span> opt &#123;</div><div class="line">        <span class="keyword">case</span> .addition:</div><div class="line">            <span class="keyword">return</span> <span class="type">Addition</span>()</div><div class="line">        <span class="keyword">case</span> .subtraction:</div><div class="line">            <span class="keyword">return</span> <span class="type">Subtraction</span>()</div><div class="line">        <span class="keyword">case</span> .multiplication:</div><div class="line">            <span class="keyword">return</span> <span class="type">Multiplication</span>()</div><div class="line">        <span class="keyword">case</span> .divsion:</div><div class="line">            <span class="keyword">return</span> <span class="type">Division</span>()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> testDivision = <span class="type">OperatorFactory</span>.calculateForOperator(.divsion)</div><div class="line">testDivision.num = (<span class="number">1</span>, <span class="number">3</span>)</div><div class="line"><span class="built_in">print</span>(testDivision.getResult() ?? <span class="string">"Error"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> testAddition = <span class="type">OperatorFactory</span>.calculateForOperator(.addition)</div><div class="line">testAddition.num = (<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="built_in">print</span>(testAddition.getResult() ?? <span class="string">"Error"</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习设计模式，其实跟语言是无关的，我们主要是学习其中的思想。今天换一个语言来实现吧，主要好久没有写swift了，今天就拿swift来写好了。&lt;/p&gt;
&lt;p&gt;还是先来说说概念吧，简单工厂模式（simple factory pattern）又称为静态工厂方法模式，是属于创建型模
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.dyike.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Laravel请求生命周期</title>
    <link href="http://www.dyike.com/2017/04/22/laravel-request-life-cycle/"/>
    <id>http://www.dyike.com/2017/04/22/laravel-request-life-cycle/</id>
    <published>2017-04-22T12:45:40.000Z</published>
    <updated>2017-04-23T14:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>要想了解Laravel的整个运行流程，那么就需要从入口文件下手，再一步步的往下探索，剥开神秘的面纱。在Laravel框架中入口文件就是public文件夹下的index.php文件。Laravel的生命周期也就是从这里开始的，从这里结束。如此优雅的代码却清晰的展示请求到相应的整个生命周期。不妨先看看index.php的源码吧：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// 第一块</span></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/autoload.php'</span>;</div><div class="line"><span class="comment">// 第二块</span></div><div class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</div><div class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</div><div class="line"><span class="comment">// 第三块</span></div><div class="line">$response = $kernel-&gt;handle(</div><div class="line">    $request = Illuminate\Http\Request::capture()</div><div class="line">);</div><div class="line">$response-&gt;send();</div><div class="line"><span class="comment">// 第四块</span></div><div class="line">$kernel-&gt;terminate($request, $response);</div></pre></td></tr></table></figure>
<p>为了分析上面的代码，将代码分为四块：</p>
<ul>
<li><p>第一块</p>
<blockquote>
<p>主要用来实现类的自动加载，注册加载composer自动生成的class loader。</p>
</blockquote>
</li>
<li><p>第二块</p>
<blockquote>
<p>主要来实例化服务容器，Laravel的一些基本服务的注册，核心组件注册等等，当然了也包括容器本身的注册。在注册的过程中服务容器会在对应的属性中记录注册的内容，方便于在程序运行期间提供对应的服务。这部分内容可以称为程序启动准备阶段。</p>
</blockquote>
</li>
<li><p>第三块</p>
<blockquote>
<p>处理请求，用户发送的请求入口文件是index.php，从生成<code>Illuminate\Http\Request</code>实例，交给handle()进行处理。将该$request实例绑定到第二步生成的$app容器上。并发送相应</p>
</blockquote>
</li>
<li><p>第四块</p>
<blockquote>
<p>请求的后期清理处理工作，请求结束并进行回调。</p>
</blockquote>
</li>
</ul>
<h1 id="服务容器的实例化（详谈第二块代码）"><a href="#服务容器的实例化（详谈第二块代码）" class="headerlink" title="服务容器的实例化（详谈第二块代码）"></a>服务容器的实例化（详谈第二块代码）</h1><p>先看看<code>bootstrap\app.php</code>源码：里面有注释</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// 服务容器实例化的过程</span></div><div class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</div><div class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</div><div class="line">);</div><div class="line"><span class="comment">// 向容器绑定了三个核心类服务</span></div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Http\Kernel::class,</div><div class="line">    App\Http\Kernel::class</div><div class="line">);</div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Console\Kernel::class,</div><div class="line">    App\Console\Kernel::class</div><div class="line">);</div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</div><div class="line">    App\Exceptions\Handler::class</div><div class="line">);</div><div class="line"><span class="comment">// 返回服务容器实例</span></div><div class="line"><span class="keyword">return</span> $app;</div></pre></td></tr></table></figure>
<p>关于<code>Illuminate\Foundation\Application.php</code>文件查看源码</p>
<h4 id="应用的基础路径setBasePath"><a href="#应用的基础路径setBasePath" class="headerlink" title="应用的基础路径setBasePath()"></a>应用的基础路径<code>setBasePath()</code></h4><p>设置注册应用的基础路径，并在容器中绑定这些基础基础路径。</p>
<h4 id="注册基础绑定registerBaseBindings"><a href="#注册基础绑定registerBaseBindings" class="headerlink" title="注册基础绑定registerBaseBindings()"></a>注册基础绑定<code>registerBaseBindings()</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 向容器注册基础绑定</span></div><div class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseBindings</span><span class="params">()</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);</div><div class="line">     <span class="comment">// 向服务共享实例数组中注册量单例服务，</span></div><div class="line">     <span class="comment">// 服务名称分别为`app`和`Illuminate\Container\Container`</span></div><div class="line">     <span class="comment">// 对应的实例对象即为服务容器本身</span></div><div class="line">     <span class="keyword">$this</span>-&gt;instance(<span class="string">'app'</span>, <span class="keyword">$this</span>);</div><div class="line">     <span class="keyword">$this</span>-&gt;instance(Container::class, <span class="keyword">$this</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>主要绑定容器实例本身，服务容器中设置了一个静态变量<code>$instance</code>，该变量是在<code>Illuminate\Container\Container.php</code>中定义,<code>Application</code>类继承了<code>Container</code>类，在<code>Container</code>类中可以通过<code>public static function getInstance()</code>获取服务容器实例。服务容器实例还绑定不同的服务容器别名，记录在<code>$instances</code>共享实例数组（在<code>Container</code>类中）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在容器中注册一个已经存在的实例作为共享实例</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">instance</span><span class="params">($abstract, $instance)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;removeAbstractAlias($abstract);</div><div class="line"></div><div class="line">    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;aliases[$abstract]);</div><div class="line">    <span class="comment">// 检查该类有没有本绑定</span></div><div class="line">    <span class="comment">// 如果已经绑定，将触发向容器注册的反弹回调</span></div><div class="line">    <span class="keyword">$this</span>-&gt;instances[$abstract] = $instance;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;bound($abstract)) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;rebound($abstract);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注册基础服务提供者registerBaseServiceProviders"><a href="#注册基础服务提供者registerBaseServiceProviders" class="headerlink" title="注册基础服务提供者registerBaseServiceProviders()"></a>注册基础服务提供者<code>registerBaseServiceProviders()</code></h4><p>服务提供者的注册是非常重要的，因为它给服务容器添加各种服务。这里只是注册了最基本的三个服务：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseServiceProviders</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> EventServiceProvider(<span class="keyword">$this</span>));</div><div class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> LogServiceProvider(<span class="keyword">$this</span>));</div><div class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> RoutingServiceProvider(<span class="keyword">$this</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在容器里注册一个服务提供者的方法：<br><code>public function register($provider, $options = [], $force = false)</code></p>
<p>源码阅读分析：</p>
<ul>
<li>首先<code>getProvider($provider)</code>进行判断，如果服务提供者存在则获取这个实例对象。</li>
<li>第二，如果给定$provider是一个string，则通过类名<code>resolveProvider($provider)</code>进行实例对象。</li>
<li>然后，对实例化完成的$provider进行标记为已经注册，<code>markAsRegistered($provider)</code>。</li>
<li>最后，启动规定的服务提供者<code>bootProvider($provider)</code>。</li>
</ul>
<h4 id="注册核心类别名registerCoreContainerAliases"><a href="#注册核心类别名registerCoreContainerAliases" class="headerlink" title="注册核心类别名registerCoreContainerAliases()"></a>注册核心类别名<code>registerCoreContainerAliases()</code></h4><p><code>$aliases</code>数组变量中定义了整个框架的核心服务别名，在解析的过程中需要根据实例化的类或者接口名查找服务别名，然后通过服务别名获取具体的服务。</p>
<p>这里放一张图进行小小的总结：<br> <img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/laravel/程序启动准备阶段.png" alt="程序启动准备阶段"></p>
<h1 id="核心类实例化-Kernel类"><a href="#核心类实例化-Kernel类" class="headerlink" title="核心类实例化(Kernel类)"></a>核心类实例化(Kernel类)</h1><p>为什么要服务容器？服务容器实例化后，就可以通过服务容器自动实例化对象了，可以参考上一篇的<a href="https://www.dyike.com/2017/04/11/inversion-of-control/">服务容器</a>。<br><code>index.php</code>中Kernel类就是通过服务容器自动创建完成的。</p>
<p>在<code>bootstrap\app.php</code>文件中就注册了三个服务，其中包括了这个核心类接口，在注册服务时，服务名一般是接口。注册的服务是具体的类名，这一般是通过反射基础来实例化的，并通过反射机制解决构造函数的依赖关系，参考上篇的服务容器有讲解。</p>
<p>这里说的核心类是指<code>App\Http\Kernel</code>类，这个类只是定义了<code>$middleware</code> ，<code>$middlewareGroups</code> 和 <code>$routeMiddleware</code>是哪个数组属性。这个类是继承<code>Illuminate\Foundation\Http\Kernel</code>类的，不妨看看这个类中的构造函数，不难看出这个构造函数是存在依赖关系，一个是<code>Illuminate\Contracts\Foundation\Application</code>，还有一个是<code>Illuminate\Routing\Router</code>。他们在服务容器初始化的时候都进行了实例化。</p>
<h1 id="请求实例化capture"><a href="#请求实例化capture" class="headerlink" title="请求实例化capture()"></a>请求实例化<code>capture()</code></h1><p>在程序启动准备工作完成了之后，就开始请求的实例化。对于请求就是客户端的发送的一个请求报文。这个对应着<code>Illuminate\Http\Request</code>类的实例对象。请求实例的创建是通过<code>Illuminate\Http\Request</code>类中的<code>capture()</code>函数完成的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建HTTP请求实例</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">capture</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span>::enableHttpMethodParameterOverride();</div><div class="line">    <span class="comment">// 通过Symfony实例创建一个请求实例</span></div><div class="line">    <span class="comment">// 而Symfony请求实例是通过createFromGlobals()静态函数实现的</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::createFromBase(SymfonyRequest::createFromGlobals());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFromBase</span><span class="params">(SymfonyRequest $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($request <span class="keyword">instanceof</span> <span class="keyword">static</span>) &#123;</div><div class="line">        <span class="keyword">return</span> $request;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $content = $request-&gt;content;</div><div class="line"></div><div class="line">    $request = (<span class="keyword">new</span> <span class="keyword">static</span>)-&gt;duplicate(</div><div class="line">        $request-&gt;query-&gt;all(), $request-&gt;request-&gt;all(), $request-&gt;attributes-&gt;all(),</div><div class="line">        $request-&gt;cookies-&gt;all(), $request-&gt;files-&gt;all(), $request-&gt;server-&gt;all()</div><div class="line">    );</div><div class="line"></div><div class="line">    $request-&gt;content = $content;</div><div class="line"></div><div class="line">    $request-&gt;request = $request-&gt;getInputSource();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $request;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过PHP全局变量创建一个新的请求实例</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFromGlobals</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $server = $_SERVER;</div><div class="line">    <span class="keyword">if</span> (<span class="string">'cli-server'</span> === PHP_SAPI) &#123;</div><div class="line">        <span class="keyword">if</span> (array_key_exists(<span class="string">'HTTP_CONTENT_LENGTH'</span>, $_SERVER)) &#123;</div><div class="line">            $server[<span class="string">'CONTENT_LENGTH'</span>] = $_SERVER[<span class="string">'HTTP_CONTENT_LENGTH'</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (array_key_exists(<span class="string">'HTTP_CONTENT_TYPE'</span>, $_SERVER)) &#123;</div><div class="line">            $server[<span class="string">'CONTENT_TYPE'</span>] = $_SERVER[<span class="string">'HTTP_CONTENT_TYPE'</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $request = <span class="keyword">self</span>::createRequestFromFactory($_GET, $_POST, <span class="keyword">array</span>(), $_COOKIE, $_FILES, $server);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> === strpos($request-&gt;headers-&gt;get(<span class="string">'CONTENT_TYPE'</span>), <span class="string">'application/x-www-form-urlencoded'</span>)</div><div class="line">        &amp;&amp; in_array(strtoupper($request-&gt;server-&gt;get(<span class="string">'REQUEST_METHOD'</span>, <span class="string">'GET'</span>)), <span class="keyword">array</span>(<span class="string">'PUT'</span>, <span class="string">'DELETE'</span>, <span class="string">'PATCH'</span>))</div><div class="line">    ) &#123;</div><div class="line">        parse_str($request-&gt;getContent(), $data);</div><div class="line">        $request-&gt;request = <span class="keyword">new</span> ParameterBag($data);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $request;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createRequestFromFactory</span><span class="params">(array $query = array<span class="params">()</span>, array $request = array<span class="params">()</span>, array $attributes = array<span class="params">()</span>, array $cookies = array<span class="params">()</span>, array $files = array<span class="params">()</span>, array $server = array<span class="params">()</span>, $content = null)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 如果定义了请求工厂方法，则可以将自定义的工厂方法赋值给属性$requestFactory</span></div><div class="line">    <span class="comment">// 否则通过new static来完成请求的实例。</span></div><div class="line">    <span class="comment">// new static语法是后期静态绑定</span></div><div class="line">    <span class="comment">// 参照http://php.net/manual/zh/language.oop5.late-static-bindings.php</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>::$requestFactory) &#123;</div><div class="line">        $request = call_user_func(<span class="keyword">self</span>::$requestFactory, $query, $request, $attributes, $cookies, $files, $server, $content);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!$request <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException(<span class="string">'The Request factory must return an instance of Symfony\Component\HttpFoundation\Request.'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $request;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">static</span>($query, $request, $attributes, $cookies, $files, $server, $content);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="处理请求handle"><a href="#处理请求handle" class="headerlink" title="处理请求handle()"></a>处理请求<code>handle()</code></h1><p>完成了请求实例化自然需要对请求实例进行处理，最终返回响应。请求处理是通过<code>Illuminate\Foundation\Http\Kernel.php</code>中<code>handle()</code>进行的，处理是handle中的<code>sendRequestThroughRouter()</code>方法实现的，通过路由请求实例。而<code>enableHttpMethodParameterOverride()</code>方法会是使能请求拒绝，被使能后在请求过程中添加CSRF保护，服务端发送一个CSRF令牌给客户端，也就是一个cookie,在客户端发送POST请求需要将该令牌发送给服务端，否则拒绝处理该请求。</p>
<h4 id="请求前是不是也要准备一下？"><a href="#请求前是不是也要准备一下？" class="headerlink" title="请求前是不是也要准备一下？"></a>请求前是不是也要准备一下？</h4><p>直接看源码：<br>有6个步骤：环境检测、配置加载、异常处理、Facade注册、服务提供者注册、启动服务，通过<code>bootstrap()</code>方法完成准备工作，会调用服务容器$app实例中<code>bootstrapWith()</code>函数,进而通过<code>$this-&gt;make($bootstrapper)-&gt;bootstrap($this)</code>make方法完成每个准备类的初始化工作，然后调用准备类的<code>bootstrap</code>方法实现准备工作。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $bootstrappers = [</div><div class="line">    \Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\LoadConfiguration::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\HandleExceptions::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\RegisterFacades::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\RegisterProviders::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\BootProviders::class,</div><div class="line">];</div><div class="line"><span class="comment">// 请求通过中间件和路由转发</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;bootstrap();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</div><div class="line">                -&gt;send($request)</div><div class="line">                -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</div><div class="line">                -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Bootstrap the application for HTTP requests.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bootstrapWith(<span class="keyword">$this</span>-&gt;bootstrappers());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Foundation\Application.php</span></div><div class="line"><span class="comment">// 执行bootstrap类的数组</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrapWith</span><span class="params">(array $bootstrappers)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;hasBeenBootstrapped = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span> ($bootstrappers <span class="keyword">as</span> $bootstrapper) &#123;</div><div class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapping: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;make($bootstrapper)-&gt;bootstrap(<span class="keyword">$this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapped: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>环境检测和配置加载（这部分略过了）</li>
<li>Facade注册<br>这个怎么理解呢，就是为了美观方便而起的别名，通过别名调用对应实例的属性和方法。这个在很多地方都用到了，比如路由，<code>Route::get()</code>以为是一个Route类，其实不然，只是通过别名实现的。<br>看源码是最好的老师：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Foundation\Bootstrap\RegisterFacades.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></div><div class="line">&#123;</div><div class="line">    Facade::clearResolvedInstances();</div><div class="line"></div><div class="line">    Facade::setFacadeApplication($app);</div><div class="line">    <span class="comment">// Illuminate\Foundation\AliasLoader.php（外观自动加载类）</span></div><div class="line">    <span class="comment">// 注意与composer的自动加载类不同</span></div><div class="line">    AliasLoader::getInstance($app-&gt;make(<span class="string">'config'</span>)-&gt;get(<span class="string">'app.aliases'</span>, []))-&gt;register();</div><div class="line">&#125;</div><div class="line"><span class="comment">// Illuminate\Foundation\AliasLoader.php</span></div><div class="line"><span class="comment">// 创建别名加载的实例对象</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">(array $aliases = [])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">static</span>::$instance)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$instance = <span class="keyword">new</span> <span class="keyword">static</span>($aliases);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $aliases = array_merge(<span class="keyword">static</span>::$instance-&gt;getAliases(), $aliases);</div><div class="line"></div><div class="line">    <span class="keyword">static</span>::$instance-&gt;setAliases($aliases);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$instance;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在自动加载栈中注册一个自动加载函数</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;registered) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;prependToLoaderStack();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;registered = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要分要两个步骤：完成外观自动加载类的实例化并将外观别名数组添加到实例中，然后完成外观自动加载类中自动加载函数的添加。</p>
<p>在laravel中有两个别名，一个是容器核心别名，定义在Application类中，而存储在中Application实例的$aliases属性中，另一个是外观别名，定义在app.php配置文件中，程序运行后存储在AliasLoader类实例中的$aliases属性中。</p>
<p>那像<code>Route::get()</code>是怎么调用的呢？程序首先需要加载类Route，注册了外观别名，那么自动加载栈的第一个函数是AliasLoader类的load()函数，此函数会查找外观别名对应的类名，也就是<code>Illuminate\Support\Facades\Route</code>类，加载这个类，执行get()方法，但是这个类中并没有此静态方法。这个类继承<code>Illuminate\Support\Facades\Facade</code>，也没有get()方法，但是有一个<code>__callStatic()</code>魔术方法，然后调用一个<code>getFacadeAccessor()</code>静态方法，每一个具体的外观类都需要这个静态方法，该方法就是返回别名类所对应的在服务容器中的名称，对于<code>Illuminate\Support\Facades\Route</code>返回的就是“router”，接着通过服务容器获取对应的实例对象，这里对应的<code>Illuminate\Routing\Router</code>类的实例，通过<code>static::$app[$name]</code>实现，最终调用这个类中的get()方法。</p>
<ul>
<li>服务提供者注册<br>服务提供注册这位应用程序提供服务支持，在启动的准备阶段进行了基础服务提供者的加载，但这些服务职能应对前期的启动阶段，对于后期请求处理需要用到的数据库服务、认证服务、session服务还不够。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务提供者注册</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></div><div class="line">&#123;</div><div class="line">    $app-&gt;registerConfiguredProviders();</div><div class="line">&#125;</div><div class="line"><span class="comment">// Illuminate\Foundation\Application.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerConfiguredProviders</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    (<span class="keyword">new</span> ProviderRepository(<span class="keyword">$this</span>, <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;getCachedServicesPath()))</div><div class="line">                -&gt;load(<span class="keyword">$this</span>-&gt;config[<span class="string">'app.providers'</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>启动服务<br>服务提供者必须要实现<code>register()</code>函数，还有一个<code>boot()</code>函数根据需求实现，主要用于启动服务，不是必须的，不实现会在父类中统一处理。对于实现boot()函数的服务提供者，会通过BootProviders类进行统一管理调用。要实现boot()也比较简短，只需要调用服务容器中的boot()函数即可。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Foundation\Bootstrap.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></div><div class="line">&#123;</div><div class="line">    $app-&gt;boot();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>在Laravel程序中有中间件的概念，就是对请求的处理，首先是经过中间的处理，然后经过路由的处理，最终到控制器生成响应。这个过程中基本是以装饰者模式的思想进行的。<br>看看app/Http/Kernel.php源码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $middleware = [</div><div class="line">    \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</div><div class="line">    \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</div><div class="line">    \App\Http\Middleware\TrimStrings::class,</div><div class="line">    \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Foundation\Http\Kernel.php</span></div><div class="line"><span class="comment">// 将请求通过中间件和路由处理</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</div><div class="line">    <span class="keyword">$this</span>-&gt;bootstrap();</div><div class="line">    <span class="comment">// 主要看这里</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</div><div class="line">                -&gt;send($request)</div><div class="line">                -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</div><div class="line">                -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置路由分发回调函数</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Pipeline\Pipeline.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Container $container = null)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;container = $container;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置被送入管道的对象</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($passable)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;passable = $passable;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置导管数组</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">through</span><span class="params">($pipes)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;pipes = is_array($pipes) ? $pipes : func_get_args();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 以一个回调函数为重点执行管道处理</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">then</span><span class="params">(Closure $destination)</span></span></div><div class="line">&#123;</div><div class="line">    $pipeline = array_reduce(</div><div class="line">        <span class="comment">// 可以看看carry()</span></div><div class="line">        array_reverse(<span class="keyword">$this</span>-&gt;pipes), <span class="keyword">$this</span>-&gt;carry(), <span class="keyword">$this</span>-&gt;prepareDestination($destination)</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> $pipeline(<span class="keyword">$this</span>-&gt;passable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="路由处理生成响应"><a href="#路由处理生成响应" class="headerlink" title="路由处理生成响应"></a>路由处理生成响应</h4><p>回到刚才看到的路由分发回调函数</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line">        <span class="comment">// 将请求信息传递给路由信息存储实例</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Routing\Router.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;currentRequest = $request;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchToRoute($request);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 分发请求到路由上，并返回响应</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRoute</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 查找对应的路由实例</span></div><div class="line">    $route = <span class="keyword">$this</span>-&gt;findRoute($request);</div><div class="line">    $request-&gt;setRouteResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> $route;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">new</span> Events\RouteMatched($route, $request));</div><div class="line"></div><div class="line">    $response = <span class="keyword">$this</span>-&gt;runRouteWithinStack($route, $request);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse($request, $response);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过一个实例栈运行给定的路由</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRouteWithinStack</span><span class="params">(Route $route, Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    $shouldSkipMiddleware = <span class="keyword">$this</span>-&gt;container-&gt;bound(<span class="string">'middleware.disable'</span>) &amp;&amp;</div><div class="line">                            <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'middleware.disable'</span>) === <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    $middleware = $shouldSkipMiddleware ? [] : <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($route);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;container))</div><div class="line">                    -&gt;send($request)</div><div class="line">                    -&gt;through($middleware)</div><div class="line">                    -&gt;then(<span class="function"><span class="keyword">function</span> <span class="params">($request)</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse(</div><div class="line">                            $request, $route-&gt;run()</div><div class="line">                        );</div><div class="line">                    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>路由的信息都会保存在一个<code>Illuminate\Routing\Router</code>类实例中，而这个类实例存储在kernel类中。</p>
<p>查到请求对应的路由后，请求传递给对应的路由去处理</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Routing\Route.php</span></div><div class="line"><span class="comment">// 执行路由动作并返回相应</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;container = <span class="keyword">$this</span>-&gt;container ?: <span class="keyword">new</span> Container;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isControllerAction()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runController();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runCallable();</div><div class="line">    &#125; <span class="keyword">catch</span> (HttpResponseException $e) &#123;</div><div class="line">        <span class="keyword">return</span> $e-&gt;getResponse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进而交给相应的controller去处理。这部分，首先根据控制器类名通过服务容器进行实例化，再通过调用控制的实例对应的方法来生成响应的主体部分（并非最终的响应）。经过一系列的处理之后生成响应。响应是封装在<code>Illuminate\Http\Response</code>实例中的。</p>
<h1 id="响应的发送和请求生命周期的终止"><a href="#响应的发送和请求生命周期的终止" class="headerlink" title="响应的发送和请求生命周期的终止"></a>响应的发送和请求生命周期的终止</h1><h4 id="响应发送-response-gt-send"><a href="#响应发送-response-gt-send" class="headerlink" title="响应发送$response-&gt;send()"></a>响应发送<code>$response-&gt;send()</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Symfony\Component\HttpFoundation\Response.php</span></div><div class="line"><span class="comment">// 发送 HTTP响应头和内容</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 发送HTTP头部</span></div><div class="line">    <span class="keyword">$this</span>-&gt;sendHeaders();</div><div class="line">    <span class="comment">// 发送Web响应的内容</span></div><div class="line">    <span class="keyword">$this</span>-&gt;sendContent();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (function_exists(<span class="string">'fastcgi_finish_request'</span>)) &#123;</div><div class="line">        fastcgi_finish_request();</div><div class="line">    &#125; <span class="keyword">elseif</span> (<span class="string">'cli'</span> !== PHP_SAPI) &#123;</div><div class="line">        <span class="keyword">static</span>::closeOutputBuffers(<span class="number">0</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="程序终止——生命周期的最后阶段-kernel-gt-terminate-request-response"><a href="#程序终止——生命周期的最后阶段-kernel-gt-terminate-request-response" class="headerlink" title="程序终止——生命周期的最后阶段$kernel-&gt;terminate($request, $response)"></a>程序终止——生命周期的最后阶段<code>$kernel-&gt;terminate($request, $response)</code></h4><p>程序终止，完成终止中间件的调用</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Foundation\Http\Kernel.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">($request, $response)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;terminateMiddleware($request, $response);</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;terminate();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 终止中间件</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">terminateMiddleware</span><span class="params">($request, $response)</span></span></div><div class="line">&#123;</div><div class="line">    $middlewares = <span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : array_merge(</div><div class="line">        <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($request),</div><div class="line">        <span class="keyword">$this</span>-&gt;middleware</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span> ($middlewares <span class="keyword">as</span> $middleware) &#123;</div><div class="line">        <span class="keyword">if</span> (! is_string($middleware)) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">list</span>($name, $parameters) = <span class="keyword">$this</span>-&gt;parseMiddleware($middleware);</div><div class="line"></div><div class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;make($name);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (method_exists($instance, <span class="string">'terminate'</span>)) &#123;</div><div class="line">            $instance-&gt;terminate($request, $response);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>什么东西都是有始有终的，至此请求生命周期结束。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>请求到响应整个执行过程，可以分为四个阶段：程序启动准备阶段，请求实例化阶段，请求处理阶段，响应发送和终止程序。<br>准备阶段：完成一些文件自动加载，服务容器实例化，基础服务提供者注册和Kernel类的实例化。<br>请求实例化阶段：将请求信息以对象的实行进行存储。<br>请求处理阶段：准备请求处理环境，完成环境和配置加载等6大东西。通过中间件处理通过路由和控制器处理，生成相应。<br>请求终止阶段：将响应发送给客户端并终止程序。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要想了解Laravel的整个运行流程，那么就需要从入口文件下手，再一步步的往下探索，剥开神秘的面纱。在Laravel框架中入口文件就是public文件夹下的index.php文件。Laravel的生命周期也就是从这里开始的，从这里结束。如此优雅的代码却清晰的展示请求到相应的
    
    </summary>
    
    
      <category term="Laravel" scheme="http://www.dyike.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel源码阅读笔记——服务容器</title>
    <link href="http://www.dyike.com/2017/04/11/inversion-of-control/"/>
    <id>http://www.dyike.com/2017/04/11/inversion-of-control/</id>
    <published>2017-04-11T14:35:43.000Z</published>
    <updated>2017-04-24T00:30:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>使用laravel也有一段时间了，现在应该向深入理解laravel去看看一些源码了。laravel之所以新颖，使用了大量PHP新语法，包含命名空间（组件化开发的条件），匿名函数，反射机制，还有后期静态绑定，trait等等。<br>当你深入去挖掘源码的时候，laravel框架中使用的都是大家熟知的东西，并没有多么的高深。那就耐着性子一层一层地往下扒吧！</p>
</blockquote>
<h2 id="服务容器"><a href="#服务容器" class="headerlink" title="服务容器"></a>服务容器</h2><p>服务容器是laravel框架中相当核心的东西，提供了整个框架运行需要的服务。服务是什么呢？通俗地讲就是系统运行中需要的比如对象，配置信息之类的东西。服务容器就是承载这些东西的，在程序运行过程中动态的给系统提供服务（资源）。</p>
<p>服务容器提供的东西比较多，在这些功能中，需要注意的问题就是解决依赖实现解耦。说到这里，我们可能都听说过控制反转（Inversion Of Control）——IOC容器。服务容器也可以是IOC容器。控制反转模式是解决系统组件之间的相互依赖关系的一种模式。那什么是依赖？怎么解决依赖？不妨看一个例子。</p>
<p>我们就拿出去春游儿来谈吧，出去玩有很多方式，比如开车出去，乘坐火车出去。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visit</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Visit</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Drive car"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Train</span> <span class="keyword">implements</span> <span class="title">Visit</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Take train"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现该类需要依赖交通工具实例</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traveller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $trafficTool;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($trafficTool)</span></span></div><div class="line">    &#123;</div><div class="line">       <span class="comment">// 依赖产生</span></div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool = <span class="keyword">new</span> Car();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitOut</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool-&gt;go();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$traveller = <span class="keyword">new</span> Traveller();</div><div class="line">$traveller-&gt;visitOut();</div></pre></td></tr></table></figure>
<p>不难看出上面的代码，两个组件之间就产生的依赖，<code>Traveller</code>的初始化依赖与<code>Car</code>，如果需求改动了，实例化的交通工具不是car是其他的，就需要不断改变实例化的对象，你说这样的代码怎样？我们不应该在<code>Traveller</code>中固定交通工具的初始化，而是交给外部去实现，将这种依赖关系通过动态注入的方式实现，这就是IOC模式的思想。</p>
<p>于是乎，我们将交通工具的实例化提取出来外部管理，这样做，也体现出面向对象的设计的一个原则——将经常变化的部分提取出去，与固定不变的部分进行分离。这里我们使用工厂模式来实现。</p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrafficToolFactory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTrafficTool</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">switch</span> ($name) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'Car'</span> :</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Car();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'Train'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Train();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">exit</span>(<span class="string">"set traffic tool error"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traveller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $trafficTool;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($trafficTool)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 通过工厂生产依赖的交通工具实例</span></div><div class="line">        $factory = <span class="keyword">new</span> TrafficToolFactory();</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool = $factory-&gt;createTrafficTool($trafficTool);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitOut</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool-&gt;go();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$traveller = <span class="keyword">new</span> Traveller(<span class="string">'Car'</span>);</div><div class="line">$traveller-&gt;visitOut();</div></pre></td></tr></table></figure>
<p>现在看，<code>Traveller</code>跟<code>trafficTool</code>之间没有依赖关系了，但是却变成<code>Traveller</code>跟<code>TrafficToolFactory</code>之间的依赖了，如果我们再碰到需求，需要修改工厂模式，这样的代码还是不易于维护。</p>
<h3 id="IOC模式"><a href="#IOC模式" class="headerlink" title="IOC模式"></a>IOC模式</h3><p>控制反转模式也叫做依赖注入模式，控制反转是将组件之间的依赖关系从程序内部提到外部的容器中，而依赖注入是将组建的依赖通过外部以参数或其他形式注入。两种说法一个意思。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traveller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $trafficTool;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Visit $trafficTool)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool = $trafficTool;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitOut</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool-&gt;go();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 生成依赖的交通工具实例</span></div><div class="line">$trafficTool = <span class="keyword">new</span> Train();</div><div class="line"><span class="comment">// 依赖注入的方式解决依赖问题</span></div><div class="line">$traveller = <span class="keyword">new</span> Traveller($trafficTool);</div><div class="line">$traveller-&gt;visitOut();</div></pre></td></tr></table></figure>
<p>这儿就是一个依赖注入的过程，<code>Traveller</code>类的构造函数依赖一个外部具有<code>Visit</code>接口的实例，在实例化<code>Traveller</code>时，传入一个<code>$trafficTool</code>实例，即通过依赖注入的方式解决依赖问题。</p>
<p>但是还是有一个小问题，这儿是我们是通过手动的方式注入依赖，依赖注入需要通过接口来限制，而不能随便开放。你还有完没完？其实通过IOC容器就可以实现自动依赖注入。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 用于提供实例的回调函数</span></div><div class="line">    <span class="keyword">protected</span> $bindings = [];</div><div class="line"></div><div class="line">    <span class="comment">// 绑定接口和生成相应实例的回调函数</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, $concrete = null, $shared = false)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (! $concrete <span class="keyword">instanceof</span> Closure) &#123;</div><div class="line">                <span class="comment">// 如果提供的参数不是回调函数，则产生默认的回调函数</span></div><div class="line">            $concrete = <span class="keyword">$this</span>-&gt;getClosure($abstract, $concrete);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;bindings[$abstract] = compact(<span class="string">'concrete'</span>, <span class="string">'shared'</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 默认生成实例的回调函数</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getClosure</span><span class="params">($abstract, $concrete)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 生成实例的回调函数，$container 一般为IOC容器对象，在调用回调生成实例时提供</span></div><div class="line">        <span class="comment">// 即 build函数中的 $concrete($this)</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($container, $parameters = [])</span> <span class="title">use</span> <span class="params">($abstract, $concrete)</span> </span>&#123;</div><div class="line">            $method = ($abstract == $concrete) ? <span class="string">'build'</span> : <span class="string">'make'</span>;</div><div class="line">                <span class="comment">// 调用的是容器的build或者make方法生成实例</span></div><div class="line">            <span class="keyword">return</span> $container-&gt;$method($concrete, $parameters);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 生成实例对象，首先解决接口和要实例化类之间的依赖关系</span></div><div class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract)</span></span></div><div class="line">    &#123;</div><div class="line">        $concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</div><div class="line">            $object = <span class="keyword">$this</span>-&gt;build($concrete);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $object = <span class="keyword">$this</span>-&gt;make($concrete);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取绑定的回调函数</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract])) &#123;</div><div class="line">            <span class="keyword">return</span> $abstract;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$abstract][<span class="string">'concrete'</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 实例化对象</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">($concrete)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 服务能否被服务提供者注册为实例</span></div><div class="line">        <span class="keyword">if</span> ($concrete <span class="keyword">instanceof</span> Closure) &#123;</div><div class="line">            <span class="keyword">return</span> $concrete(<span class="keyword">$this</span>);</div><div class="line">        &#125;</div><div class="line">            <span class="comment">// $concrete就是类名</span></div><div class="line">        $reflector = <span class="keyword">new</span> ReflectionClass($concrete);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (! $reflector-&gt;isInstantiable()) &#123;</div><div class="line">            <span class="keyword">echo</span> $message = <span class="string">"Target [$concrete] is not instantiable."</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="comment">// 获取构造信息</span></div><div class="line">        $constructor = $reflector-&gt;getConstructor();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (is_null($constructor)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> $concrete;</div><div class="line">        &#125;</div><div class="line">            <span class="comment">// 获取构造函数依赖的输入参数</span></div><div class="line">        $dependencies = $constructor-&gt;getParameters();</div><div class="line"></div><div class="line"></div><div class="line">        $instances = <span class="keyword">$this</span>-&gt;resolveDependencies(</div><div class="line">            $dependencies</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $reflector-&gt;newInstanceArgs($instances);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 解决通过反射机制实例化对象时的依赖</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveDependencies</span><span class="params">(array $dependencies)</span></span></div><div class="line">    &#123;</div><div class="line">        $results = [];</div><div class="line"></div><div class="line">        <span class="keyword">foreach</span> ($dependencies <span class="keyword">as</span> $dependency) &#123;</div><div class="line">            </div><div class="line">            $results[] = is_null($class = $dependency-&gt;getClass())</div><div class="line">                            ? <span class="keyword">NULL</span></div><div class="line">                            : <span class="keyword">$this</span>-&gt;resolveClass($dependency);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $results;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveClass</span><span class="params">(ReflectionParameter $parameter)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;make($parameter-&gt;getClass()-&gt;name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$app = <span class="keyword">new</span> Container();</div><div class="line"><span class="comment">// 容器的填充</span></div><div class="line">$app-&gt;bind(<span class="string">'Visit'</span>, <span class="string">"Car"</span>);</div><div class="line">$app-&gt;bind(<span class="string">"traveller"</span>, <span class="string">"Traveller"</span>);</div><div class="line"><span class="comment">// 通过容器实现依赖注入，完成类的实例化</span></div><div class="line">$tra = $app-&gt;make(<span class="string">"traveller"</span>);</div><div class="line">$tra-&gt;visitOut();</div></pre></td></tr></table></figure>
<p>在这个实现过程中，没有用new关键字来实例化对象，不需要关注对象的依赖关系，只需要在容器填充的过程中理顺接口与实现类之间的关系以及实现类与依赖接口之间的关系。这里的实例化是通过反射的机制完成的。</p>
<p>下篇继续以Laravel的源码进行分析。</p>
<p>在Laravel中，服务容器是由<code>Illuminate\Container\Container</code>类实现的，实现了服务容器的核心功能，而<code>Illuminate\Foundation\Application</code>类继承了该类，主要实现服务容器的初始配置和功能扩展。<br>在<code>bootstrap\app.php</code>中，$app就是服务容器的创建，然后在index.php中，通过require_once <code>bootstrap\app.php</code>就生成了服务容器。</p>
<p>服务容器生成了之后，里面除了最基本的好像什么也没有，那是不行的，首先需要向容器中填充服务，也即是服务绑定。那是怎么绑定的呢？可以简单地理解为键值对的概念，根据一个“key”就能找到对应的服务。难怪里面有一些数组属性。对于不同的绑定需要在服务容器中不同的绑定函数来实现，主要包括回调函数服务绑定和实例对象服务绑定。回调函数服务绑定就是一个回调函数，而实例对象服务绑定的就是一个实例对象。</p>
<p>回调函数服务绑定还分为普通绑定和单例绑定。普通绑定就是每次生成该服务的实例对象时还会生成一个新的实例对象，也就是说在生命周期中可以同时生成多个这种实例对象，而单例绑定在生成一个实例对象后，如果再次生成就会返回第一次生成的实例对象也就是在程序生命周期中只能生成一个这样的实例的对象，这个就是设计模式中的单例模式。</p>
<p>说了这么多，现在我们来一个简单的测试。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Test</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneralService</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $serviceName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Test</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleService</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $serviceName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Test</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstanceService</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $serviceName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>bootstrap\app.php</code>中，</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</div><div class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</div><div class="line">);</div><div class="line"></div><div class="line">$app-&gt;bind(App\Test\GenernalService::class, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> App\Test\GeneralService();</div><div class="line">&#125;)</div><div class="line">$app-&gt;singleton(App\Test\SingleService::class, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> App\Test\SingleService();</div><div class="line">&#125;)</div><div class="line">$instance = <span class="keyword">new</span> App\Test\InstanceService();</div><div class="line">$app-&gt;instance(<span class="string">'instanceService'</span>, $instance);</div><div class="line"><span class="keyword">return</span> $app;</div></pre></td></tr></table></figure>
<p>上面的服务容器通过三种不同的方式绑定服务，一种是普通模式绑定回调函数，另一种是单例模式绑定回调函数，还有一种是绑定实例对象。绑定后在服务容器增加内容：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$bindings = <span class="keyword">array</span>(<span class="string">"App\Test\GeneralService"</span> =&gt; <span class="keyword">array</span>(<span class="string">"concrete"</span> =&gt; &#123;Closure&#125;, <span class="string">"shared"</span> =&gt; <span class="keyword">false</span>), <span class="string">"App\Test\SingleService"</span> =&gt; <span class="keyword">array</span>(<span class="string">"concrete"</span> =&gt; &#123;Closure&#125;, <span class="string">"share"</span> =&gt; <span class="keyword">true</span>));</div><div class="line">$instances = <span class="keyword">array</span>(<span class="string">"instanceService"</span> =&gt; &#123;App\Test\InstanceService&#125;);</div></pre></td></tr></table></figure>
<p>不难看出，回调函数服务绑定是在$bindings中记录的，其key为绑定的服务名称，value是回调函数和模式标识。如果是普通模式，则share为false，如果是单例模式则为true。实例对象服务绑定在$instances中记录，key为服务名称，value为实例对象。</p>
<p>说到这里其实还有一个形式的绑定，就是绑定具体类名称，本质上也是绑定回调函数的方式，只是回调函数是服务容器根据提供的参数自动生成的。绑定服务的时候可以通过类名或者接口名作为服务，而服务是类名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用laravel也有一段时间了，现在应该向深入理解laravel去看看一些源码了。laravel之所以新颖，使用
    
    </summary>
    
    
      <category term="Laravel" scheme="http://www.dyike.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之“装饰者模式”——手机与包装盒示例</title>
    <link href="http://www.dyike.com/2017/03/29/design-pattern-decorator/"/>
    <id>http://www.dyike.com/2017/03/29/design-pattern-decorator/</id>
    <published>2017-03-29T14:27:22.000Z</published>
    <updated>2017-03-29T14:50:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在“装饰模式”中很好的提现了开放关闭原则，即类应该对扩展开放对修改关闭。装饰者模式可以让我们在不对原来代码的修改的情况下对类进行扩展。现在我们举一个例子，就好比给生产好的手机进行包装，我们在对手机进行包装的过程不会去对手机进行任何修改，只管用盒子将盒子包装好就行。</p>
<p>装饰者模式，用另一种表达方式就是“对原有的物体进行装饰，给原有的物体添加上新的装饰品”。这里的例子就是，手机是被装饰者，包装盒就是装饰品。这样的话，可以看出装饰者模式就是“动态地将责任附加到对象上。若要扩展功能，装饰着提供了比继承更有弹性的替代方案。”</p>
<p>在“装饰者模式”中所使用的装饰就是变化的部分，也就是Decorator是变化的部分对应着我们的包装盒，因为对手机进行包装的过程就是包装盒变化的过程，也就是为手机装饰的过程。而手机就可以看做是组件。需要注意的是，所谓的装饰者不仅仅是给组件添加的新的装饰品。一个装饰者对象就是添加该装饰后的组件，也就是说装饰者=旧组件 + 新装饰品。</p>
<h2 id="手机-包装盒的具体实现"><a href="#手机-包装盒的具体实现" class="headerlink" title="手机+包装盒的具体实现"></a>手机+包装盒的具体实现</h2><h3 id="实现一个手机的接口PhoneInterface-php"><a href="#实现一个手机的接口PhoneInterface-php" class="headerlink" title="实现一个手机的接口PhoneInterface.php"></a>实现一个手机的接口<code>PhoneInterface.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PhoneInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 生产手机</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现一个装饰器抽象的基类Decorator-php"><a href="#实现一个装饰器抽象的基类Decorator-php" class="headerlink" title="实现一个装饰器抽象的基类Decorator.php"></a>实现一个装饰器抽象的基类<code>Decorator.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 装饰器抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">PhoneInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 产品生产线对象</div><div class="line">     * <span class="doctag">@var</span> Object</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> $phone;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PhoneInterface $phone)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;phone = $phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生产</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;phone-&gt;product();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decorate</span><span class="params">($value)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现包装盒子的装饰器DecoratorPack-php"><a href="#实现包装盒子的装饰器DecoratorPack-php" class="headerlink" title="实现包装盒子的装饰器DecoratorPack.php"></a>实现包装盒子的装饰器<code>DecoratorPack.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 包装盒子装饰器</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorPack</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $pack;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PhoneInterface $phone)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;phone = $phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name = <span class="string">''</span>, $value = <span class="string">''</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;$name = $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生产</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;phone-&gt;product();</div><div class="line">        <span class="keyword">$this</span>-&gt;decorate(<span class="keyword">$this</span>-&gt;pack);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进行包装</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decorate</span><span class="params">($value = <span class="string">''</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"使用&#123;$value&#125;进行了包装\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现各个装饰者-Decorator-这里是ApplePhone-php和SmartisanPhone-php"><a href="#实现各个装饰者-Decorator-这里是ApplePhone-php和SmartisanPhone-php" class="headerlink" title="实现各个装饰者(Decorator),这里是ApplePhone.php和SmartisanPhone.php"></a>实现各个装饰者(Decorator),这里是<code>ApplePhone.php</code>和<code>SmartisanPhone.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 苹果手机</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplePhone</span> <span class="keyword">implements</span> <span class="title">PhoneInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"生产了一部苹果手机\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 锤子手机</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartisanPhone</span> <span class="keyword">implements</span> <span class="title">PhoneInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"生产了一部锤子手机\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="大差不差了，最后测试-test-php"><a href="#大差不差了，最后测试-test-php" class="headerlink" title="大差不差了，最后测试 test.php"></a>大差不差了，最后测试 <code>test.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 结构型模式</div><div class="line"> * 装饰器模式</div><div class="line"> * 对现有的对象增加功能，动态的将责任附加到对象上。</div><div class="line"> * 和适配器的区别： 适配器是链接两个接口，装饰器是对现有的对象包装</div><div class="line"> */</div><div class="line"><span class="comment">// 注册自加载</span></div><div class="line">spl_autoload_register(<span class="string">'autoload'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($class)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">require</span> dirname($_SERVER[<span class="string">'SCRIPT_FILENAME'</span>]) . <span class="string">'//..//'</span> . str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $class) . <span class="string">'.php'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">decorator</span>\<span class="title">DecoratorPack</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">decorator</span>\<span class="title">ApplePhone</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">decorator</span>\<span class="title">SmartisanPhone</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"为加装饰器之前： \n"</span>;</div><div class="line">    <span class="comment">// 生产苹果手机</span></div><div class="line">    $applePhone = <span class="keyword">new</span> ApplePhone();</div><div class="line">    $applePhone-&gt;product();</div><div class="line"></div><div class="line">    <span class="comment">// 生产锤子手机</span></div><div class="line">    $smartisanPhone = <span class="keyword">new</span> SmartisanPhone();</div><div class="line">    $smartisanPhone-&gt;product();</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">"\n------------\n"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">"进行包装装饰器: \n"</span>;</div><div class="line">    <span class="comment">// 初始化一个包装适配器</span></div><div class="line">    $decoratorPack1 = <span class="keyword">new</span> DecoratorPack(<span class="keyword">new</span> ApplePhone);</div><div class="line">    $decoratorPack1-&gt;pack = <span class="string">'白盒子'</span>;</div><div class="line">    $decoratorPack1-&gt;product();</div><div class="line"></div><div class="line">    $decoratorPack2 = <span class="keyword">new</span> DecoratorPack(<span class="keyword">new</span> SmartisanPhone);</div><div class="line">    $decoratorPack1-&gt;pack = <span class="string">'黑盒子'</span>;</div><div class="line">    $decoratorPack1-&gt;product();</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</div><div class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果：通过结果更清晰这个过程了"><a href="#运行结果：通过结果更清晰这个过程了" class="headerlink" title="运行结果：通过结果更清晰这个过程了"></a>运行结果：通过结果更清晰这个过程了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">为加装饰器之前：</div><div class="line">生产了一部苹果手机</div><div class="line">生产了一部锤子手机</div><div class="line"></div><div class="line">------------</div><div class="line">进行包装装饰器:</div><div class="line">生产了一部苹果手机</div><div class="line">使用白盒子进行了包装</div><div class="line">生产了一部苹果手机</div><div class="line">使用黑盒子进行了包装</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在“装饰模式”中很好的提现了开放关闭原则，即类应该对扩展开放对修改关闭。装饰者模式可以让我们在不对原来代码的修改的情况下对类进行扩展。现在我
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.dyike.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之“策略模式”——出行outing示例</title>
    <link href="http://www.dyike.com/2017/03/27/design-pattern-strategy/"/>
    <id>http://www.dyike.com/2017/03/27/design-pattern-strategy/</id>
    <published>2017-03-27T13:42:50.000Z</published>
    <updated>2017-03-29T14:29:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式通俗地说就是将不同的策略（算法）进行封装，让他们之间可以相互替换，此模式让策略的变化独立于使用策略的用户。</p>
<p>在设计模式中有不同的设计原则，其中一条就是”将可能会变化的代码独立出来，不要和不变得代码混在一起“。</p>
<p>现在举个例子就是，我们周末出去游玩，我们出去可以乘坐多种交通工具，这个时候就可以选择”策略模式“来实现。简单分析一下，这个场景中的乘坐的交通工具是多种多样的，可以骑自行车，可以坐地铁，可以自己开车。</p>
<p>根据上面的设计思路，，我们可以对”乘坐交通工具“的策略进行提取。使用<code>StrategyInterface</code>接口来规定策略，使用不同的出行方式对外都有一个统一的接口。在此就是乘坐交通工具，不同的出行方式有不同的”乘坐交通工具“的策略。</p>
<p>对于出行（outing）的定义就是不变的部分。这个类中定义了出行的方式，以及是否改变策略，其中依赖于乘坐交通工具的接口。</p>
<h2 id="策略模式的具体实现"><a href="#策略模式的具体实现" class="headerlink" title="策略模式的具体实现:"></a><code>策略模式</code>的具体实现:</h2><h3 id="乘坐交通工具的策略接口StrategyInterface-php"><a href="#乘坐交通工具的策略接口StrategyInterface-php" class="headerlink" title="乘坐交通工具的策略接口StrategyInterface.php"></a>乘坐交通工具的策略接口<code>StrategyInterface.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">strategy</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StrategyInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">takeTraffic</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="紧接着我们实现出行-Outing-Outing-php"><a href="#紧接着我们实现出行-Outing-Outing-php" class="headerlink" title="紧接着我们实现出行(Outing)Outing.php"></a>紧接着我们实现出行(Outing)<code>Outing.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">strategy</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 实体类</div><div class="line"> * 依赖外部不同策略的实体类</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outing</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 策略实例</div><div class="line">     * <span class="doctag">@var</span> Object</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> $traffic;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否改变策略</div><div class="line">     * <span class="doctag">@var</span> boolean</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> $isChangeMind = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(StrategyInterface $traffic)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;traffic = $traffic;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 改变策略</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">(StrategyInterface $traffic)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;traffic = $traffic;</div><div class="line">        <span class="keyword">$this</span>-&gt;isChangeMind = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">outing</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isChangeMind) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"改变策略\n"</span>;</div><div class="line">            <span class="keyword">$this</span>-&gt;traffic-&gt;takeTraffic();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;traffic-&gt;takeTraffic();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="然后-具体实现每一个策略OutingByCar-php和OutingBySubway-php"><a href="#然后-具体实现每一个策略OutingByCar-php和OutingBySubway-php" class="headerlink" title="然后,具体实现每一个策略OutingByCar.php和OutingBySubway.php"></a>然后,具体实现每一个策略<code>OutingByCar.php</code>和<code>OutingBySubway.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">strategy</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 观察者实体类示例</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutingByCar</span> <span class="keyword">implements</span> <span class="title">StrategyInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 行为</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">takeTraffic</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"选择自己开车出去玩 \n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">strategy</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 观察者实体类示例</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutingBySubway</span> <span class="keyword">implements</span> <span class="title">StrategyInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 行为</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">takeTraffic</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"选择自己坐地铁出去玩 \n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们来测试一下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 行为型模式</div><div class="line"> *</div><div class="line"> * 策略模式</div><div class="line"> * 策略依照使用而定</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 注册自加载</span></div><div class="line">spl_autoload_register(<span class="string">'autoload'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($class)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">require</span> dirname($_SERVER[<span class="string">'SCRIPT_FILENAME'</span>]) . <span class="string">'//..//'</span> . str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $class) . <span class="string">'.php'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">strategy</span>\<span class="title">Outing</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">strategy</span>\<span class="title">OutingByCar</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">strategy</span>\<span class="title">OutingBySubway</span>;</div><div class="line"></div><div class="line"><span class="comment">// 使用策略1</span></div><div class="line">$substance = <span class="keyword">new</span> Outing(<span class="keyword">new</span> OutingByCar);</div><div class="line">$substance-&gt;outing();</div><div class="line"><span class="comment">// 现在改变策略</span></div><div class="line">$substance-&gt;change(<span class="keyword">new</span> OutingBySubway);</div><div class="line"><span class="comment">// 使用策略2</span></div><div class="line">$substance-&gt;outing();</div></pre></td></tr></table></figure>
<p>运行的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">选择自己开车出去玩</div><div class="line">改变策略</div><div class="line">选择自己坐地铁出去玩</div></pre></td></tr></table></figure>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>策略模式避免了多重条件的转移语句，消除一些if else条件语句。</li>
<li>提供了可以替换继承关系的办法： 继承提供了另一种支持多种算法或行为的方法。</li>
<li>策略模式提供相同行为的不同实现，这样就可以根据不同的时间空间条件进行不同策略的选择。</li>
</ul>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li>
<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>
</ul>
<h2 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h2><ul>
<li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li>
<li>需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。</li>
<li>对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式通俗地说就是将不同的策略（算法）进行封装，让他们之间可以相互替换，此模式让策略的变化独立于使用策略的用户。&lt;/p&gt;
&lt;p&gt;在设计模式中有不同的设计原则，其中一条就是”将可能会变化的代码独立出来，不要和不变得代码混在一起“。&lt;/p&gt;
&lt;p&gt;现在举个例子就是，我们周末出
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.dyike.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go Package —— bufio包</title>
    <link href="http://www.dyike.com/2017/03/05/read-go-package-bufio/"/>
    <id>http://www.dyike.com/2017/03/05/read-go-package-bufio/</id>
    <published>2017-03-05T14:06:20.000Z</published>
    <updated>2017-03-06T12:58:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文阅读golang的bufio包，常用的函数，结构体以及方法</p>
<h2 id="scan-go"><a href="#scan-go" class="headerlink" title="scan.go"></a><em>scan.go</em></h2><h3 id="func-NewScanner-r-io-Reader-Scanner"><a href="#func-NewScanner-r-io-Reader-Scanner" class="headerlink" title="func NewScanner(r io.Reader) *Scanner"></a><code>func NewScanner(r io.Reader) *Scanner</code></h3><blockquote>
<p>返回一个新的Scanner从r读取。split函数默认为ScanLines。</p>
</blockquote>
<h3 id="func-ScanBytes-data-byte-atEOF-bool-advance-int-token-byte-err-error"><a href="#func-ScanBytes-data-byte-atEOF-bool-advance-int-token-byte-err-error" class="headerlink" title="func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)"></a><code>func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)</code></h3><blockquote>
<p>是scaner的一个分割函数，将每一个字节作为一个字符返回。</p>
</blockquote>
<h3 id="func-ScanLines-data-byte-atEOF-bool-advance-int-token-byte-err-error"><a href="#func-ScanLines-data-byte-atEOF-bool-advance-int-token-byte-err-error" class="headerlink" title="func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error)"></a><code>func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error)</code></h3><blockquote>
<p>ScanLines是一个Scanner的拆分函数，它返回每行文本，删除任何尾随的行尾标记。<br>返回的行可能为空。行结束标记是一个可选的回车，后跟一个强制换行。在正则表达式符号中，它是<code>\ r？\ n</code>。<br>最后一个非空行的输入将被返回，即使它没有换行符。</p>
</blockquote>
<h3 id="func-ScanRunes-data-byte-atEOF-bool-advance-int-token-byte-err-error"><a href="#func-ScanRunes-data-byte-atEOF-bool-advance-int-token-byte-err-error" class="headerlink" title="func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error)"></a><code>func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error)</code></h3><h3 id="func-ScanWords-data-byte-atEOF-bool-advance-int-token-byte-err-error"><a href="#func-ScanWords-data-byte-atEOF-bool-advance-int-token-byte-err-error" class="headerlink" title="func ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error)"></a><code>func ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error)</code></h3><blockquote>
<p>拆分函数，删除空格，返回空格分割的文字，永远不会返回一个空字符串。<br>空间定义由<code>unicode.IsSpace</code>设定。</p>
</blockquote>
<h3 id="func-s-Scanner-Err-error"><a href="#func-s-Scanner-Err-error" class="headerlink" title="func (s *Scanner) Err() error"></a><code>func (s *Scanner) Err() error</code></h3><h3 id="func-s-Scanner-Bytes-byte"><a href="#func-s-Scanner-Bytes-byte" class="headerlink" title="func (s *Scanner) Bytes() []byte"></a><code>func (s *Scanner) Bytes() []byte</code></h3><h3 id="func-s-Scanner-Text-string"><a href="#func-s-Scanner-Text-string" class="headerlink" title="func (s *Scanner) Text() string"></a><code>func (s *Scanner) Text() string</code></h3><h3 id="func-s-Scanner-Scan-bool"><a href="#func-s-Scanner-Scan-bool" class="headerlink" title="func (s *Scanner) Scan() bool"></a><code>func (s *Scanner) Scan() bool</code></h3><h3 id="func-s-Scanner-Buffer-buf-byte-max-int"><a href="#func-s-Scanner-Buffer-buf-byte-max-int" class="headerlink" title="func (s *Scanner) Buffer(buf []byte, max int)"></a><code>func (s *Scanner) Buffer(buf []byte, max int)</code></h3><h3 id="func-s-Scanner-Split-split-SplitFunc"><a href="#func-s-Scanner-Split-split-SplitFunc" class="headerlink" title="func (s *Scanner) Split(split SplitFunc)"></a><code>func (s *Scanner) Split(split SplitFunc)</code></h3><blockquote>
<p>SplitFunc 有四个：ScanBytes、ScanLines、ScanRunes、ScanWords。</p>
</blockquote>
<h2 id="bufio-go"><a href="#bufio-go" class="headerlink" title="bufio.go"></a><em>bufio.go</em></h2><h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><h3 id="func-NewReader-rd-io-Reader-Reader"><a href="#func-NewReader-rd-io-Reader-Reader" class="headerlink" title="func NewReader(rd io.Reader) *Reader"></a><code>func NewReader(rd io.Reader) *Reader</code></h3><blockquote>
<p>创建一个reader，其中buffer的Size是默认大小。<br>其实就是调用<code>func NewReaderSize(rd io.Reader, size int) *Reader</code></p>
</blockquote>
<h3 id="func-b-Reader-Reset-r-io-Reader"><a href="#func-b-Reader-Reset-r-io-Reader" class="headerlink" title="func (b *Reader) Reset(r io.Reader)"></a><code>func (b *Reader) Reset(r io.Reader)</code></h3><blockquote>
<p>Reset放弃所有缓冲数据，重置所有状态和切换从r读取的缓冲读取器。</p>
</blockquote>
<h3 id="func-b-Reader-Peek-n-int-byte-error"><a href="#func-b-Reader-Peek-n-int-byte-error" class="headerlink" title="func (b *Reader) Peek(n int) ([]byte, error)"></a><code>func (b *Reader) Peek(n int) ([]byte, error)</code></h3><blockquote>
<p>Peek返回下一个n字节，而不推进读取器。<br>如果Peek返回少于n个字节，它也返回一个错误，解释为什么读取短。<br>如果n大于b的缓冲区大小,错误是ErrBufferFull。</p>
</blockquote>
<h3 id="func-b-Reader-Discard-n-int-discarded-int-err-error"><a href="#func-b-Reader-Discard-n-int-discarded-int-err-error" class="headerlink" title="func (b *Reader) Discard(n int) (discarded int, err error)"></a><code>func (b *Reader) Discard(n int) (discarded int, err error)</code></h3><blockquote>
<p>Discard跳过接下来的n个字节，返回丢弃的字节数。<br>如果Discard跳过少于n个字节，它也返回一个错误。<br>如果0 &lt;= n &lt;= b.Buffered()，Discarding能够从底层的io.Reader读取。</p>
</blockquote>
<h3 id="func-b-Reader-Read-p-byte-n-int-err-error"><a href="#func-b-Reader-Read-p-byte-n-int-err-error" class="headerlink" title="func (b *Reader) Read(p []byte) (n int, err error)"></a><code>func (b *Reader) Read(p []byte) (n int, err error)</code></h3><h3 id="func-b-Reader-ReadByte-byte-error"><a href="#func-b-Reader-ReadByte-byte-error" class="headerlink" title="func (b *Reader) ReadByte() (byte, error)"></a><code>func (b *Reader) ReadByte() (byte, error)</code></h3><h3 id="func-b-Reader-UnreadByte-error"><a href="#func-b-Reader-UnreadByte-error" class="headerlink" title="func (b *Reader) UnreadByte() error"></a><code>func (b *Reader) UnreadByte() error</code></h3><h3 id="func-b-Reader-ReadRune-r-rune-size-int-err-error"><a href="#func-b-Reader-ReadRune-r-rune-size-int-err-error" class="headerlink" title="func (b *Reader) ReadRune() (r rune, size int, err error)"></a><code>func (b *Reader) ReadRune() (r rune, size int, err error)</code></h3><h3 id="func-b-Reader-UnreadRune-error"><a href="#func-b-Reader-UnreadRune-error" class="headerlink" title="func (b *Reader) UnreadRune() error"></a><code>func (b *Reader) UnreadRune() error</code></h3><h3 id="func-b-Reader-Buffered-int"><a href="#func-b-Reader-Buffered-int" class="headerlink" title="func (b *Reader) Buffered() int"></a><code>func (b *Reader) Buffered() int</code></h3><h3 id="func-b-Reader-ReadSlice-delim-byte-line-byte-err-error"><a href="#func-b-Reader-ReadSlice-delim-byte-line-byte-err-error" class="headerlink" title="func (b *Reader) ReadSlice(delim byte) (line []byte, err error)"></a><code>func (b *Reader) ReadSlice(delim byte) (line []byte, err error)</code></h3><h3 id="func-b-Reader-ReadLine-line-byte-isPrefix-bool-err-error"><a href="#func-b-Reader-ReadLine-line-byte-isPrefix-bool-err-error" class="headerlink" title="func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error)"></a><code>func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error)</code></h3><h3 id="func-b-Reader-ReadBytes-delim-byte-byte-error"><a href="#func-b-Reader-ReadBytes-delim-byte-byte-error" class="headerlink" title="func (b *Reader) ReadBytes(delim byte) ([]byte, error)"></a><code>func (b *Reader) ReadBytes(delim byte) ([]byte, error)</code></h3><h3 id="func-b-Reader-ReadString-delim-byte-string-error"><a href="#func-b-Reader-ReadString-delim-byte-string-error" class="headerlink" title="func (b *Reader) ReadString(delim byte) (string, error)"></a><code>func (b *Reader) ReadString(delim byte) (string, error)</code></h3><h3 id="func-b-Reader-WriteTo-w-io-Writer-n-int64-err-error"><a href="#func-b-Reader-WriteTo-w-io-Writer-n-int64-err-error" class="headerlink" title="func (b *Reader) WriteTo(w io.Writer) (n int64, err error)"></a><code>func (b *Reader) WriteTo(w io.Writer) (n int64, err error)</code></h3><h2 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h2><h3 id="func-NewWriterSize-w-io-Writer-size-int-Writer"><a href="#func-NewWriterSize-w-io-Writer-size-int-Writer" class="headerlink" title="func NewWriterSize(w io.Writer, size int) *Writer"></a><code>func NewWriterSize(w io.Writer, size int) *Writer</code></h3><h3 id="func-NewWriter-w-io-Writer-Writer"><a href="#func-NewWriter-w-io-Writer-Writer" class="headerlink" title="func NewWriter(w io.Writer) *Writer"></a><code>func NewWriter(w io.Writer) *Writer</code></h3><h3 id="func-b-Writer-Reset-w-io-Writer"><a href="#func-b-Writer-Reset-w-io-Writer" class="headerlink" title="func (b *Writer) Reset(w io.Writer)"></a><code>func (b *Writer) Reset(w io.Writer)</code></h3><h3 id="func-b-Writer-Flush-error"><a href="#func-b-Writer-Flush-error" class="headerlink" title="func (b *Writer) Flush() error"></a><code>func (b *Writer) Flush() error</code></h3><h3 id="func-b-Writer-Available-int"><a href="#func-b-Writer-Available-int" class="headerlink" title="func (b *Writer) Available() int"></a><code>func (b *Writer) Available() int</code></h3><h3 id="func-b-Writer-Buffered-int"><a href="#func-b-Writer-Buffered-int" class="headerlink" title="func (b *Writer) Buffered() int"></a><code>func (b *Writer) Buffered() int</code></h3><h3 id="func-b-Writer-Write-p-byte-nn-int-err-error"><a href="#func-b-Writer-Write-p-byte-nn-int-err-error" class="headerlink" title="func (b *Writer) Write(p []byte) (nn int, err error)"></a><code>func (b *Writer) Write(p []byte) (nn int, err error)</code></h3><h3 id="func-b-Writer-WriteByte-c-byte-error"><a href="#func-b-Writer-WriteByte-c-byte-error" class="headerlink" title="func (b *Writer) WriteByte(c byte) error"></a><code>func (b *Writer) WriteByte(c byte) error</code></h3><h3 id="func-b-Writer-WriteRune-r-rune-size-int-err-error"><a href="#func-b-Writer-WriteRune-r-rune-size-int-err-error" class="headerlink" title="func (b *Writer) WriteRune(r rune) (size int, err error)"></a><code>func (b *Writer) WriteRune(r rune) (size int, err error)</code></h3><h3 id="func-b-Writer-WriteString-s-string-int-error"><a href="#func-b-Writer-WriteString-s-string-int-error" class="headerlink" title="func (b *Writer) WriteString(s string) (int, error)"></a><code>func (b *Writer) WriteString(s string) (int, error)</code></h3><h3 id="func-b-Writer-ReadFrom-r-io-Reader-n-int64-err-error"><a href="#func-b-Writer-ReadFrom-r-io-Reader-n-int64-err-error" class="headerlink" title="func (b *Writer) ReadFrom(r io.Reader) (n int64, err error)"></a><code>func (b *Writer) ReadFrom(r io.Reader) (n int64, err error)</code></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文阅读golang的bufio包，常用的函数，结构体以及方法&lt;/p&gt;
&lt;h2 id=&quot;scan-go&quot;&gt;&lt;a href=&quot;#scan-go&quot; class=&quot;headerlink&quot; title=&quot;scan.go&quot;&gt;&lt;/a&gt;&lt;em&gt;scan.go&lt;/em&gt;&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
      <category term="golang" scheme="http://www.dyike.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>制定一个高效的计划</title>
    <link href="http://www.dyike.com/2017/02/26/how-make-an-effective-plan/"/>
    <id>http://www.dyike.com/2017/02/26/how-make-an-effective-plan/</id>
    <published>2017-02-26T11:51:22.000Z</published>
    <updated>2017-02-26T12:44:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇应该是今年的第一篇吧，好久没有写文章了，这个周末修整了两天。前些日子做了一个模块，都谈不上一个独立的项目，真的搞得筋疲力尽的。从过完年就开始搞这个，年前还做了两天的准备。按理说两个周的时间是足够的，但是最终做了快一个月。因为换到新框架上，使用laravel来搞我并没有娴熟地用好这个框架，这中间还踩了一些坑，有那么三两天时间感觉进度就是上不去。还有我觉得最主要的原因，是我做的都是假需求，这个真的让我很心累。不管怎样，事情就是这样发生，从自身找原因吧，现在开始要好好给自己的工作做一个打算规划，以及学习的目标和进度。</p>
<p><em>宏观上讲：</em><br>今年要完成的就是</p>
<ul>
<li>要深入理解PHP(需要看源码了)，学习扩展开发，这样做也是为了拾起一些基础知识和底层的，面试常常会问到这些问题。</li>
<li>golang也要继续深入了，不能只能停留在会使用框架的基础上，看看能不能在项目中尝试使用golang做API项目。</li>
<li>看一些书，做到一定量的阅读，今年的阅读除了技术相关的，会着重偏产品这一块。</li>
<li>这个是最重要的，学习一门强类型的语言——Java。为什么要学它，杭州基本都是Java系，交到朋友至少能聊到一块去，对以后的求职也是增加计划。</li>
<li>注意身体，坚持锻炼身体。</li>
<li>还有时间就做自己喜欢的事，折腾硬件、写swift</li>
</ul>
<p>要想完成这些，需要的合理地、高效地使用时间，其实每天有很多时间是浪费的，边缘时间充分利用的话还是可以做很多的事，为什么之前没能使用起一些边缘时间，还不是因为没有一个明确的计划。比如我要在一周里面看完一本书。</p>
<p><em>微观上谈：</em><br>每天我7点就起床了，其实公司上班是弹性的，朝九晚六朝十晚七，就目前看，也真的没必要每天八点半就往公司赶，十五分钟就走到公司了。为了充分利用时间我每天应该9点出门去公司，这样每天早上就有至少一个半小时的时间看书，中午休息的一个小时，如果不休息的话，我觉得这一个小时还是可以看书的。下班回来也有三四个小时，这段时间可以用来写一些代码，逛逛社区，玩玩游戏，撩撩妹子，总之可以细化一些任务出来。下班回来前可以锻个练。</p>
<p>周末的话，天儿好的时候，一定要出门溜溜了，去年来杭州半年达成的成就就是——周末全宅家里了。春天来了，应该出去走走。充分考虑到杭州好像是每周都是要下雨的，如果碰巧赶上下雨，就在家看书？也不啊，小区后面不是电影院也可以看看有没有好看的电影，总之周末至少有一天时间是玩的。如果真的是高效的话，劳逸结合真是相当必要的。</p>
<p>写了这么多，至少现在清晰了一些计划和思路，不写了去学习算法去了，一周时间搞定那本算法的书。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇应该是今年的第一篇吧，好久没有写文章了，这个周末修整了两天。前些日子做了一个模块，都谈不上一个独立的项目，真的搞得筋疲力尽的。从过完年就开始搞这个，年前还做了两天的准备。按理说两个周的时间是足够的，但是最终做了快一个月。因为换到新框架上，使用laravel来搞我并没有娴
    
    </summary>
    
    
      <category term="学习" scheme="http://www.dyike.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2016年总结</title>
    <link href="http://www.dyike.com/2016/12/25/2016-in-all/"/>
    <id>http://www.dyike.com/2016/12/25/2016-in-all/</id>
    <published>2016-12-25T06:09:21.000Z</published>
    <updated>2016-12-25T09:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得真快，又一年过去了，不知道从什么时候开始喜欢写年度总结的，最开始好像是在51空间上写，那个时候还是高中的时候，后来就在QQ空间上写，再后来到读大学，在自己的blog上写。去年的总结是我在考研结束的那天晚上开始写的，写了两天。这真巧，今天正好也是今年考研的第二天，趁着圣诞的气息，该交作业了。</p>
<p>先祝大家圣诞快乐，其次就是向大家拜个早年，鸡年大吉。</p>
<p>2016年，元旦的时候，在学校的跨年晚会上，感叹，就这么进入本命年了。这一年，好多不太顺利。往好处想想，这些都是好事，有些事情经历了总是好的。最大的感触，就是自己跟身边的人还是有很大的差距的。</p>
<h3 id="说几件事吧："><a href="#说几件事吧：" class="headerlink" title="说几件事吧："></a>说几件事吧：</h3><h4 id="第一：考研"><a href="#第一：考研" class="headerlink" title="第一：考研"></a>第一：考研</h4><p>我不知道去年我是怎么决定考研的，做这个决定后悔吗？后悔，也不后悔。一分为二地看，现在看来，这已经不是很重要了。后来也算明白了一个道理，考研考上了跟没有考上，对你的未来未必有多大的联系，所以不要在意结果，注重过程，自己能开心就好。</p>
<h4 id="第二：实习"><a href="#第二：实习" class="headerlink" title="第二：实习"></a>第二：实习</h4><p>考研结束了，就寻思着要实习，毕竟大四了，应该找一份正规一点的实习工作，不想总像之前的那样折腾打杂的，那样也学不到太多的东西。这个时候就找胡波大大求一份实习，坦率的讲，面试感觉很不好，胡波也给我一些鼓励。后来差不多三月份去渣浪实习了，开始接触PHP了，实习的三个月里，学了一些自己之前不知道的东西，这三个多月也是吊儿郎当的，其实不应该这样。由于之前考研，也没有参加什么校招之类的，在三四月份的时候，在关注春招，还面腾讯的测试岗，问啥啥不会，就是那种感觉。后来又面360的游戏平台的开发，那次面试还是学到了不少。不管面试的结果怎么样，我面完了都会总结。面多了就有感觉了，大家问的题目都是类似的。最喜欢在渣浪的日子，抛出问题总能找到能一起讨论的人。还有就是大家都喜欢自黑，往死黑的那种，那种感觉很爽，我不知道这算不算一种团队文化。后来的故事就不多说了，总之还认识许多渣浪的朋友，大家有缘江湖再见呗。</p>
<h4 id="第三：毕业-来杭州"><a href="#第三：毕业-来杭州" class="headerlink" title="第三：毕业+来杭州"></a>第三：毕业+来杭州</h4><p>啊，大学四年就这么结束了，还记得当初从家拖着两个箱子去学校报道的时候。冬去春来，年复一年又一年，四年都过得这么快，更别说这一年过得这么快了。毕业前给自己定的规划就是：毕业后，在北京呆一两年，然后回南方。就这个事，跟我爸不知道在电话里唠叨了多少次了。别的同学其实也是这样，有的留在北京有的选择回家有的选择继续学习读研出国，总之大家都有一个自己的目标，大家都在为自己的目标奋斗。只有到毕业的时候，才觉得在学校的日子是多么的珍贵，幸好没有哭得稀里哗啦的。</p>
<p>毕业本来是留在北京的，房子都找好了，后来在入职上有点拖拉，而且还不是很保险，不能一直吊在一棵树上嘛。毕业后半个月开始寻找新的工作，朋友帮我找了好几家，去面的也只有两家。后来想了想要么就回到南方吧，反正早晚要回去的，还不如现在就回去。果断退掉了房子（虽然被扣了不少钱，呆北京我也没有多少钱可以交房租了），然后跟朋友挤了一晚上，然后就去杭州面试了，新的生活新的环境还是算可以。没有想到这么快就来到了南方了，而且也没有太大的准备。现在在花厂上班，好好对待第一份工作。</p>
<h3 id="学习技术"><a href="#学习技术" class="headerlink" title="学习技术"></a>学习技术</h3><p>从去年考研的时候，就决定要搞技术，毕竟技术是硬实力，到哪儿都会有碗饭吃。差不多那个时候开始七七八八就开始写PHP了。回首这一年自己折腾的东西挺多的。坑挖得比较多，但挖得都不深。有的时候选择不一，所以刨的坑比较多。既然刨了那么多坑还是写出来吧。</p>
<ul>
<li>年初的时候，参加Swift大会，认识了一些人，再加之去年玩arduino的时候接触了一点swift做iOS App，自然而然入门了swift3，总得来说，这个还是值得学习的一门语言，毕竟我之前没有怎么接触强类型的语言。最近写用swift写一个App，才完成了三分之一，我不知道啥时候可以写出来。</li>
<li>看了一本golang的书《go语言圣经》，会写的那种，谈不上深入，挺喜欢谢大搞的社区(gocn.io)。</li>
<li>七拽八歪地接触了Rust，一门注重高效、安全、并行的系统程序语言，写起来跟go一样爽，比go还好的是支持泛型。希望有一天能用到实际项目中。</li>
<li>还有就是吵得比较火热的前端，我也接触一点Vue.js。前端让我写CSS简直是折磨我，大概就是没有在这一块找到我的兴趣点。</li>
</ul>
<h3 id="看的书"><a href="#看的书" class="headerlink" title="看的书"></a>看的书</h3><p>今年买的书，技术方面的书比较多，自从工作了之后，发现自身暴露出的问题还是挺多的，在买书上面也不再那么吝啬了，相信付出总是有回报的。</p>
<h3 id="做的饭"><a href="#做的饭" class="headerlink" title="做的饭"></a>做的饭</h3><p>周末常常自己做饭，尝试了一些新花样，好多失败了。反正自己能做的也有两道拿手的菜，还有自己做的饭不至于那么的难吃，哈哈哈！</p>
<h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p>年初制定的一些目标，实现了一部分，也有一些没有实现越来越远。总之，本命年过得不太顺，自己得到了一些成长。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>2016，即便不好，不还是过过来了嘛，2017年会更好，技术有进步，去实现自己的小想法。</p>
<p>2017年，不挖坑，深挖坑！写好每一段代码，看好每一本书，做好每一道菜。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间过得真快，又一年过去了，不知道从什么时候开始喜欢写年度总结的，最开始好像是在51空间上写，那个时候还是高中的时候，后来就在QQ空间上写，再后来到读大学，在自己的blog上写。去年的总结是我在考研结束的那天晚上开始写的，写了两天。这真巧，今天正好也是今年考研的第二天，趁着
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Programming iOS9（Swift3）学习笔记——主要内容transform</title>
    <link href="http://www.dyike.com/2016/11/28/ios-learn-note-view-bounds-transform/"/>
    <id>http://www.dyike.com/2016/11/28/ios-learn-note-view-bounds-transform/</id>
    <published>2016-11-28T14:22:07.000Z</published>
    <updated>2016-11-30T00:03:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。</p>
<p>这个笔记谈不上翻译，当然目前很大一部分是借鉴<a href="http://wdxtub.com/" target="_blank" rel="external">http://wdxtub.com/</a> 这个blog里的笔记【这个blog文章我常看】，我只是在上面作了一些修改。</p>
<p>为什么这么说呢？因为我操作的环境是在swift3+Xcode8+iOS10。</p>
<p>我只是业余的、业余的、业余的学习iOS开发，如果里面什么错误，欢迎指正！欢迎iOS大牛带我飞。</p>
</blockquote>
<h2 id="首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）："><a href="#首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）：" class="headerlink" title="首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）："></a>首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）：</h2><blockquote>
<p>CGRect：<br>Swift 2:<br>let frame = CGRectMake(0, 0, 20, 20)<br>Swift 3:<br>let frame = CGRect(x: 0, y: 0, width: 20, height: 20)</p>
<p>CGPoint<br>Swift 2:<br>let point = CGPointMake(0, 0)<br>Swift 3:<br>let point = CGPoint(x: 0, y: 0)</p>
<p>CGSize<br>Swift 2:<br>let size = CGSizeMake(20, 20)<br>Swift 3:<br>let size = CGSize(width: 20, height: 20)</p>
<p>UIColor<br>Swift 2:<br>let color = UIColor.redColor()<br>Swift 3:<br>let color = UIColor.red</p>
<p>“NS”<br>Swift 2:<br>NSTimer<br>NSData<br>NSError<br>Swift 3:<br>Timer<br>Data<br>Error</p>
<p>UserDefaults<br>Swift 2:<br>NSUserDefaults.standardUserDefaults().//something<br>Swift 3:<br>UserDefaults.standard.//something</p>
</blockquote>
<h3 id="Bounds-and-Center"><a href="#Bounds-and-Center" class="headerlink" title="Bounds and Center"></a>Bounds and Center</h3><p>假设有一个Superview和一个subview，subview是被嵌入了10个points。如图所示：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds1.png" alt="view-demo"><br>实现上图的代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">        v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">        v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">        mainview?.addSubview(v1)</div><div class="line">        v1.addSubview(v2)</div></pre></td></tr></table></figure></p>
<p>关于bounds的属性是一个view在自己的坐标系中的矩形尺寸（frame是在superview的坐标系的）。<br>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds2.png" alt="view-demo"></p>
<p>我们通常都是如此使用bounds的用法。当你需要往一个view里面放东西的时候，无论是手动绘制们还是放一个subview，通常都要使用view的bounds。</p>
<p>当你改变一个view的bounds，他的frame也会对应改变，frame的改变是基于其中心点的（中心点不会变）。</p>
<p>在上面的代码增加两行：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v2.bounds.size.height += <span class="number">20</span></div><div class="line">v2.bounds.size.width += <span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>效果图如下：就是v2基于中心点不变，height和width属性值都增加了20个points，结果就是完全覆盖了紫色的view。<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds3.png" alt="view-demo"></p>
<p>还可以变着花样来：</p>
<p>再增加两行代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v1.bounds.origin.x += <span class="number">10</span></div><div class="line">v1.bounds.origin.y += <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds4.png" alt="view-demo"></p>
<p>不难看出view向原点移动方向的反方向进行了移动，这个因为一个view 的原点是与其frame的左上角一致。</p>
<p>其实我们可以发现：改变view的bounds size是会影响frame的Size，反之亦然，唯一不变的是view的center，。这个属性，跟frame的属性一样，这表示一个subview的位置是在其Superview的坐标系中的位置。通过下面的代码是可以获取的：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">CGPoint</span>(theView.bounds.midX, theView.bounds.midY)</div></pre></td></tr></table></figure></p>
<p>改变 view 的 bounds 不会影响其 center，改变一个 view 的 center 不会影响其 bounds。所以其实一个 view 的 bounds 和 center 就可以确定其在 superview 中的位置，frame 可以看作是一个由 bounds 和 center 组成的表达式的简便写法而已。注意有些情况下 frame 会没有什么意义，但是 bounds 和 center 总是有效的，所以建议多用 bounds 和 center 的组合，也比较容易理解。</p>
<ul>
<li>bounds: 一个 view 自己的坐标系统</li>
<li>center: 一个 view 的坐标系统和其 superview 的坐标系统的关系</li>
</ul>
<p>以下方法是可以进行不同view之间的坐标转换：</p>
<ul>
<li>convert(point: CGPoint, from: UIView?), convert(point: CGPoint, to: UIView?)</li>
<li>convert(rect: CGRect, from: UIView?), convert(rect: CGRect, to: UIView?)</li>
</ul>
<p>如果第二参数为nil，那么就取window的值。比如：如果v2是v1的subview，那么要把v2放到v1的中心，就用：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v2.center  = v1.convert(v1.center, from: v1.superview)</div></pre></td></tr></table></figure></p>
<p>注意，通过改变 center 来设置 view 的位置时，如果高或宽不是偶数，那么可能会导致 misaligned。可以通过打开模拟器的 Debug -&gt; Color Misaligned Images 来进行检测。一个简单的方法是调整好位置之后调用 makeIntegralInPlace 来设置 view 的 frame。</p>
<h3 id="Window-Coordinates-和-Screen-Coordinates"><a href="#Window-Coordinates-和-Screen-Coordinates" class="headerlink" title="Window Coordinates 和 Screen Coordinates"></a>Window Coordinates 和 Screen Coordinates</h3><p>设备屏幕是没有 frame 的，但是有 bounds。Main window 也没有 superview，不过其 frame 被设置为屏幕的 bounds，如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div></pre></td></tr></table></figure>
<p>在绝大数的情况下，window 坐标系就是 screen 坐标系。现在的iOS中坐标系和手机是否选择是有关的，有如下两个属性：</p>
<ul>
<li><p>UIScreen 的 coordinateSpace 属性</p>
<blockquote>
<p>这个坐标空间会旋转，就是高和宽在设备旋转时会呼唤，（0.0， 0.0）是这个app本身的左上方 。</p>
</blockquote>
</li>
<li><p>UIScreen的fixedCoordinateSpace 属性</p>
<blockquote>
<p>这个坐标空间不会变化，就是物理上的左上角，从用户来看，这里的 (0.0, 0.0) 可能是 app 本身的任何一个角。</p>
</blockquote>
</li>
</ul>
<p>可以用下面的方法来对不同坐标空间进行转换：</p>
<ul>
<li>convert(point: CGPoint, from: UICoordinateSpace), convert(point: CGPoint, to: UICoordinateSpace),</li>
<li>convert(rect: CGRect, from: UICoordinateSpace), convert(rect: CGRect, to: UICoordinateSpace)</li>
</ul>
<p>假设界面中有一个 UIView v，我们想知道它的实际设备坐标，可以用下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> r = v.superview!.convert(v.frame, to: <span class="type">UIScreen</span>.main.fixedCoordinateSpace)</div></pre></td></tr></table></figure>
<h3 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h3><p>一个 view 的 transform 属性改变这个 view 是如何被绘制的，实际上就是一个 CGAffineTransform类的 3x3 矩阵。所有的变换都是以这个view的center做基准的，下面的具体实例：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图入下：旋转了45度<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform1.png" alt="view-demo"></p>
<p>注意，这里的view的center和bounds都没有变，但是frame的数值已经没有意义，因为现在它的尺寸是能够覆盖当前view的最小矩形，并不会随着view的旋转而旋转。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.8</span>, y: <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform2.png" alt="view-demo"></p>
<p>view的bounds仍然不收影响，因为subview仍然绘制在相对于Superview的位置。也就是说这个两个view在水平方向一起拉伸。</p>
<p>代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">20</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds)</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v2.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">100</span>, y: <span class="number">0</span>)</div><div class="line">v2.transform = v2.transform.rotated(by: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform3.png" alt="view-demo"></p>
<p>再变，代码只需要改动如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v2.transform = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div><div class="line">v2.transform = v2.transform.translatedBy(x: <span class="number">100</span>, y: <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform4.png" alt="view-demo"></p>
<p>还有一种方法能实现上图的效果：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> r = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div><div class="line"><span class="keyword">let</span> t = <span class="type">CGAffineTransform</span>(translationX: <span class="number">100</span>, y: <span class="number">0</span>)</div><div class="line">v2.transform = t.concatenating(r)</div></pre></td></tr></table></figure></p>
<p>继续增加下面的代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v2.transform = r.inverted().concatenating(v2.transform)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform5.png" alt="view-demo"></p>
<p>再来一个变换：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(a: <span class="number">1</span>, b: <span class="number">0</span>, <span class="built_in">c</span>: -<span class="number">0.2</span>, d: <span class="number">1</span>, tx: <span class="number">0</span>, ty: <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform6.png" alt="view-demo"></p>
<h3 id="Trait-Collections-and-Size-Classes"><a href="#Trait-Collections-and-Size-Classes" class="headerlink" title="Trait Collections and Size Classes"></a>Trait Collections and Size Classes</h3><p>界面上的每个 view 都有一个 traitCollection 属性，值是一个 UITraitCollection，包含下面四个属性：</p>
<ul>
<li>displayScale，由当前屏幕决定的缩放尺寸，1(single resolution) 2(double resolution) 3(iPhone 6/6s/7 Plus)</li>
<li>userInterfaceIdiom，一个 UserIterfaceIdiom 值，可能是 .Phone 或 .Pad，来标志不同的设备，默认来说和 UIDevice 的 userInterfaceIdiom 属性一致.</li>
<li>horizontalSizeClass, verticalSizeClass，是 UIUserInterfaceSizeClass 值，可能是 .Regular 或 .Compact<blockquote>
<p>水平和竖直都是 .Regular -&gt; iPad</p>
<p>水平是 .Compact 竖直是 .Regular -&gt; iPhone 在垂直方向，或者 iPad 的分屏应用</p>
<p>水平和竖直都是 .Compact -&gt; iPhone 在水平方向(iPhone 6/6s/7 plus除外)</p>
<p>水平是 .Regular 竖直是 .Compact -&gt; iPhone 6/6s/7 Plus 在水平方向</p>
</blockquote>
</li>
</ul>
<p>当应用运行时如果 trait collection 发生改变，会调用 traitCollectionDidChange 方法。</p>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p>假设superview的bounds变化，其subview的bounds和center是不会变的，实际应用中，我们可能更需要subview根据Superview的变化而变化，这就是Layout。</p>
<p>Layout的主要执行方式：</p>
<ul>
<li><p>Manual layout（手动layout）<br>superview在被更改尺寸会发送layoutSubview消息，如果你新建自己的子类，并且重写layoutSuperview就可以手动更改，这个很麻烦，但是可以做任何你想做的事。</p>
</li>
<li><p>Autoresizing<br>Autoresizing是iOS6之前的方式，主要通过自己的autoresizingMask属性来变化。</p>
</li>
<li><p>Authlayout<br>iOS6中引入的，取决于view的constraints（NSLayoutConstraint的实例）。Autolayout是在layoutSubview的幕后实现，不需要代码也能实现复杂的layoutSubview功能。</p>
</li>
</ul>
<p>通常不会用到手动 layout，autoresizing 基本也是自动的，autolayout 主要在 xCode 的编辑器中进行设定。在代码中创建的 view 默认使用 autoresizing 而不是 autolayout。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。&lt;/p&gt;
&lt;p&gt;这个笔记谈不上翻译，当然目前很大一部分是借鉴&lt;a href=&quot;http://wdxtub.com/&quot; target=&quot;_b
    
    </summary>
    
    
      <category term="iOS，swift" scheme="http://www.dyike.com/tags/iOS%EF%BC%8Cswift/"/>
    
  </entry>
  
</feed>
