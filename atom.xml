<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一刻笔记</title>
  <subtitle>带着一颗变态的、积极的心走向未来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dyike.com/"/>
  <updated>2017-03-05T14:42:53.000Z</updated>
  <id>http://www.dyike.com/</id>
  
  <author>
    <name>ityike</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go Package —— bufio包</title>
    <link href="http://www.dyike.com/2017/03/05/read-go-package-bufio/"/>
    <id>http://www.dyike.com/2017/03/05/read-go-package-bufio/</id>
    <published>2017-03-05T14:06:20.000Z</published>
    <updated>2017-03-05T14:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文阅读golang的bufio包，常用的函数，结构体以及方法</p>
<h2 id="scan-go"><a href="#scan-go" class="headerlink" title="scan.go"></a><em>scan.go</em></h2><h3 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight plain"><figcaption><span>NewScanner(r io.Reader) *Scanner```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; 返回一个新的Scanner从r读取。split函数默认为ScanLines。</div><div class="line"></div><div class="line">### ```func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)</div></pre></td></tr></table></figure></h3><blockquote>
<p>是scaner的一个分割函数，将每一个字节作为一个字符返回。</p>
</blockquote>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight plain"><figcaption><span>ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error)```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; ScanLines是一个Scanner的拆分函数，它返回每行文本，删除任何尾随的行尾标记。</div><div class="line">&gt; 返回的行可能为空。行结束标记是一个可选的回车，后跟一个强制换行。在正则表达式符号中，它是`\ r？\ n`。</div><div class="line">&gt; 最后一个非空行的输入将被返回，即使它没有换行符。</div><div class="line"></div><div class="line">### ```func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error)</div></pre></td></tr></table></figure></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><figure class="highlight plain"><figcaption><span>ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error)```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### ```func (s *Scanner) Err() error</div></pre></td></tr></table></figure></h3><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><figure class="highlight plain"><figcaption><span>(s *Scanner) Bytes() []byte```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### ```func (s *Scanner) Text() string</div></pre></td></tr></table></figure></h3><h3 id="-4"><a href="#-4" class="headerlink" title=""></a><figure class="highlight plain"><figcaption><span>(s *Scanner) Scan() bool```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### ```func (s *Scanner) Buffer(buf []byte, max int)</div></pre></td></tr></table></figure></h3><h3 id="-5"><a href="#-5" class="headerlink" title=""></a><figure class="highlight plain"><figcaption><span>(s *Scanner) Split(split SplitFunc)```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## _bufio.go_</div><div class="line"></div><div class="line">### ```func NewReader(rd io.Reader) *Reader</div></pre></td></tr></table></figure></h3><blockquote>
<p>创建一个reader，其中buffer的Size是默认大小。<br>其实就是调用<code>func NewReaderSize(rd io.Reader, size int) *Reader</code></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文阅读golang的bufio包，常用的函数，结构体以及方法&lt;/p&gt;
&lt;h2 id=&quot;scan-go&quot;&gt;&lt;a href=&quot;#scan-go&quot; class=&quot;headerlink&quot; title=&quot;scan.go&quot;&gt;&lt;/a&gt;&lt;em&gt;scan.go&lt;/em&gt;&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
      <category term="golang" scheme="http://www.dyike.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>制定一个高效的计划</title>
    <link href="http://www.dyike.com/2017/02/26/how-make-an-effective-plan/"/>
    <id>http://www.dyike.com/2017/02/26/how-make-an-effective-plan/</id>
    <published>2017-02-26T11:51:22.000Z</published>
    <updated>2017-02-26T12:44:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇应该是今年的第一篇吧，好久没有写文章了，这个周末修整了两天。前些日子做了一个模块，都谈不上一个独立的项目，真的搞得筋疲力尽的。从过完年就开始搞这个，年前还做了两天的准备。按理说两个周的时间是足够的，但是最终做了快一个月。因为换到新框架上，使用laravel来搞我并没有娴熟地用好这个框架，这中间还踩了一些坑，有那么三两天时间感觉进度就是上不去。还有我觉得最主要的原因，是我做的都是假需求，这个真的让我很心累。不管怎样，事情就是这样发生，从自身找原因吧，现在开始要好好给自己的工作做一个打算规划，以及学习的目标和进度。</p>
<p><em>宏观上讲：</em><br>今年要完成的就是</p>
<ul>
<li>要深入理解PHP(需要看源码了)，学习扩展开发，这样做也是为了拾起一些基础知识和底层的，面试常常会问到这些问题。</li>
<li>golang也要继续深入了，不能只能停留在会使用框架的基础上，看看能不能在项目中尝试使用golang做API项目。</li>
<li>看一些书，做到一定量的阅读，今年的阅读除了技术相关的，会着重偏产品这一块。</li>
<li>这个是最重要的，学习一门强类型的语言——Java。为什么要学它，杭州基本都是Java系，交到朋友至少能聊到一块去，对以后的求职也是增加计划。</li>
<li>注意身体，坚持锻炼身体。</li>
<li>还有时间就做自己喜欢的事，折腾硬件、写swift</li>
</ul>
<p>要想完成这些，需要的合理地、高效地使用时间，其实每天有很多时间是浪费的，边缘时间充分利用的话还是可以做很多的事，为什么之前没能使用起一些边缘时间，还不是因为没有一个明确的计划。比如我要在一周里面看完一本书。</p>
<p><em>微观上谈：</em><br>每天我7点就起床了，其实公司上班是弹性的，朝九晚六朝十晚七，就目前看，也真的没必要每天八点半就往公司赶，十五分钟就走到公司了。为了充分利用时间我每天应该9点出门去公司，这样每天早上就有至少一个半小时的时间看书，中午休息的一个小时，如果不休息的话，我觉得这一个小时还是可以看书的。下班回来也有三四个小时，这段时间可以用来写一些代码，逛逛社区，玩玩游戏，撩撩妹子，总之可以细化一些任务出来。下班回来前可以锻个练。</p>
<p>周末的话，天儿好的时候，一定要出门溜溜了，去年来杭州半年达成的成就就是——周末全宅家里了。春天来了，应该出去走走。充分考虑到杭州好像是每周都是要下雨的，如果碰巧赶上下雨，就在家看书？也不啊，小区后面不是电影院也可以看看有没有好看的电影，总之周末至少有一天时间是玩的。如果真的是高效的话，劳逸结合真是相当必要的。</p>
<p>写了这么多，至少现在清晰了一些计划和思路，不写了去学习算法去了，一周时间搞定那本算法的书。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇应该是今年的第一篇吧，好久没有写文章了，这个周末修整了两天。前些日子做了一个模块，都谈不上一个独立的项目，真的搞得筋疲力尽的。从过完年就开始搞这个，年前还做了两天的准备。按理说两个周的时间是足够的，但是最终做了快一个月。因为换到新框架上，使用laravel来搞我并没有娴
    
    </summary>
    
    
      <category term="学习" scheme="http://www.dyike.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2016年总结</title>
    <link href="http://www.dyike.com/2016/12/25/2016-in-all/"/>
    <id>http://www.dyike.com/2016/12/25/2016-in-all/</id>
    <published>2016-12-25T06:09:21.000Z</published>
    <updated>2016-12-25T09:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得真快，又一年过去了，不知道从什么时候开始喜欢写年度总结的，最开始好像是在51空间上写，那个时候还是高中的时候，后来就在QQ空间上写，再后来到读大学，在自己的blog上写。去年的总结是我在考研结束的那天晚上开始写的，写了两天。这真巧，今天正好也是今年考研的第二天，趁着圣诞的气息，该交作业了。</p>
<p>先祝大家圣诞快乐，其次就是向大家拜个早年，鸡年大吉。</p>
<p>2016年，元旦的时候，在学校的跨年晚会上，感叹，就这么进入本命年了。这一年，好多不太顺利。往好处想想，这些都是好事，有些事情经历了总是好的。最大的感触，就是自己跟身边的人还是有很大的差距的。</p>
<h3 id="说几件事吧："><a href="#说几件事吧：" class="headerlink" title="说几件事吧："></a>说几件事吧：</h3><h4 id="第一：考研"><a href="#第一：考研" class="headerlink" title="第一：考研"></a>第一：考研</h4><p>我不知道去年我是怎么决定考研的，做这个决定后悔吗？后悔，也不后悔。一分为二地看，现在看来，这已经不是很重要了。后来也算明白了一个道理，考研考上了跟没有考上，对你的未来未必有多大的联系，所以不要在意结果，注重过程，自己能开心就好。</p>
<h4 id="第二：实习"><a href="#第二：实习" class="headerlink" title="第二：实习"></a>第二：实习</h4><p>考研结束了，就寻思着要实习，毕竟大四了，应该找一份正规一点的实习工作，不想总像之前的那样折腾打杂的，那样也学不到太多的东西。这个时候就找胡波大大求一份实习，坦率的讲，面试感觉很不好，胡波也给我一些鼓励。后来差不多三月份去渣浪实习了，开始接触PHP了，实习的三个月里，学了一些自己之前不知道的东西，这三个多月也是吊儿郎当的，其实不应该这样。由于之前考研，也没有参加什么校招之类的，在三四月份的时候，在关注春招，还面腾讯的测试岗，问啥啥不会，就是那种感觉。后来又面360的游戏平台的开发，那次面试还是学到了不少。不管面试的结果怎么样，我面完了都会总结。面多了就有感觉了，大家问的题目都是类似的。最喜欢在渣浪的日子，抛出问题总能找到能一起讨论的人。还有就是大家都喜欢自黑，往死黑的那种，那种感觉很爽，我不知道这算不算一种团队文化。后来的故事就不多说了，总之还认识许多渣浪的朋友，大家有缘江湖再见呗。</p>
<h4 id="第三：毕业-来杭州"><a href="#第三：毕业-来杭州" class="headerlink" title="第三：毕业+来杭州"></a>第三：毕业+来杭州</h4><p>啊，大学四年就这么结束了，还记得当初从家拖着两个箱子去学校报道的时候。冬去春来，年复一年又一年，四年都过得这么快，更别说这一年过得这么快了。毕业前给自己定的规划就是：毕业后，在北京呆一两年，然后回南方。就这个事，跟我爸不知道在电话里唠叨了多少次了。别的同学其实也是这样，有的留在北京有的选择回家有的选择继续学习读研出国，总之大家都有一个自己的目标，大家都在为自己的目标奋斗。只有到毕业的时候，才觉得在学校的日子是多么的珍贵，幸好没有哭得稀里哗啦的。</p>
<p>毕业本来是留在北京的，房子都找好了，后来在入职上有点拖拉，而且还不是很保险，不能一直吊在一棵树上嘛。毕业后半个月开始寻找新的工作，朋友帮我找了好几家，去面的也只有两家。后来想了想要么就回到南方吧，反正早晚要回去的，还不如现在就回去。果断退掉了房子（虽然被扣了不少钱，呆北京我也没有多少钱可以交房租了），然后跟朋友挤了一晚上，然后就去杭州面试了，新的生活新的环境还是算可以。没有想到这么快就来到了南方了，而且也没有太大的准备。现在在花厂上班，好好对待第一份工作。</p>
<h3 id="学习技术"><a href="#学习技术" class="headerlink" title="学习技术"></a>学习技术</h3><p>从去年考研的时候，就决定要搞技术，毕竟技术是硬实力，到哪儿都会有碗饭吃。差不多那个时候开始七七八八就开始写PHP了。回首这一年自己折腾的东西挺多的。坑挖得比较多，但挖得都不深。有的时候选择不一，所以刨的坑比较多。既然刨了那么多坑还是写出来吧。</p>
<ul>
<li>年初的时候，参加Swift大会，认识了一些人，再加之去年玩arduino的时候接触了一点swift做iOS App，自然而然入门了swift3，总得来说，这个还是值得学习的一门语言，毕竟我之前没有怎么接触强类型的语言。最近写用swift写一个App，才完成了三分之一，我不知道啥时候可以写出来。</li>
<li>看了一本golang的书《go语言圣经》，会写的那种，谈不上深入，挺喜欢谢大搞的社区(gocn.io)。</li>
<li>七拽八歪地接触了Rust，一门注重高效、安全、并行的系统程序语言，写起来跟go一样爽，比go还好的是支持泛型。希望有一天能用到实际项目中。</li>
<li>还有就是吵得比较火热的前端，我也接触一点Vue.js。前端让我写CSS简直是折磨我，大概就是没有在这一块找到我的兴趣点。</li>
</ul>
<h3 id="看的书"><a href="#看的书" class="headerlink" title="看的书"></a>看的书</h3><p>今年买的书，技术方面的书比较多，自从工作了之后，发现自身暴露出的问题还是挺多的，在买书上面也不再那么吝啬了，相信付出总是有回报的。</p>
<h3 id="做的饭"><a href="#做的饭" class="headerlink" title="做的饭"></a>做的饭</h3><p>周末常常自己做饭，尝试了一些新花样，好多失败了。反正自己能做的也有两道拿手的菜，还有自己做的饭不至于那么的难吃，哈哈哈！</p>
<h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p>年初制定的一些目标，实现了一部分，也有一些没有实现越来越远。总之，本命年过得不太顺，自己得到了一些成长。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>2016，即便不好，不还是过过来了嘛，2017年会更好，技术有进步，去实现自己的小想法。</p>
<p>2017年，不挖坑，深挖坑！写好每一段代码，看好每一本书，做好每一道菜。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间过得真快，又一年过去了，不知道从什么时候开始喜欢写年度总结的，最开始好像是在51空间上写，那个时候还是高中的时候，后来就在QQ空间上写，再后来到读大学，在自己的blog上写。去年的总结是我在考研结束的那天晚上开始写的，写了两天。这真巧，今天正好也是今年考研的第二天，趁着
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Programming iOS9（Swift3）学习笔记——主要内容transform</title>
    <link href="http://www.dyike.com/2016/11/28/ios-learn-note-view-bounds-transform/"/>
    <id>http://www.dyike.com/2016/11/28/ios-learn-note-view-bounds-transform/</id>
    <published>2016-11-28T14:22:07.000Z</published>
    <updated>2016-11-30T00:03:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。</p>
<p>这个笔记谈不上翻译，当然目前很大一部分是借鉴<a href="http://wdxtub.com/" target="_blank" rel="external">http://wdxtub.com/</a> 这个blog里的笔记【这个blog文章我常看】，我只是在上面作了一些修改。</p>
<p>为什么这么说呢？因为我操作的环境是在swift3+Xcode8+iOS10。</p>
<p>我只是业余的、业余的、业余的学习iOS开发，如果里面什么错误，欢迎指正！欢迎iOS大牛带我飞。</p>
</blockquote>
<h2 id="首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）："><a href="#首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）：" class="headerlink" title="首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）："></a>首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）：</h2><blockquote>
<p>CGRect：<br>Swift 2:<br>let frame = CGRectMake(0, 0, 20, 20)<br>Swift 3:<br>let frame = CGRect(x: 0, y: 0, width: 20, height: 20)</p>
<p>CGPoint<br>Swift 2:<br>let point = CGPointMake(0, 0)<br>Swift 3:<br>let point = CGPoint(x: 0, y: 0)</p>
<p>CGSize<br>Swift 2:<br>let size = CGSizeMake(20, 20)<br>Swift 3:<br>let size = CGSize(width: 20, height: 20)</p>
<p>UIColor<br>Swift 2:<br>let color = UIColor.redColor()<br>Swift 3:<br>let color = UIColor.red</p>
<p>“NS”<br>Swift 2:<br>NSTimer<br>NSData<br>NSError<br>Swift 3:<br>Timer<br>Data<br>Error</p>
<p>UserDefaults<br>Swift 2:<br>NSUserDefaults.standardUserDefaults().//something<br>Swift 3:<br>UserDefaults.standard.//something</p>
</blockquote>
<h3 id="Bounds-and-Center"><a href="#Bounds-and-Center" class="headerlink" title="Bounds and Center"></a>Bounds and Center</h3><p>假设有一个Superview和一个subview，subview是被嵌入了10个points。如图所示：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds1.png" alt="view-demo"><br>实现上图的代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">        v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">        v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">        mainview?.addSubview(v1)</div><div class="line">        v1.addSubview(v2)</div></pre></td></tr></table></figure></p>
<p>关于bounds的属性是一个view在自己的坐标系中的矩形尺寸（frame是在superview的坐标系的）。<br>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds2.png" alt="view-demo"></p>
<p>我们通常都是如此使用bounds的用法。当你需要往一个view里面放东西的时候，无论是手动绘制们还是放一个subview，通常都要使用view的bounds。</p>
<p>当你改变一个view的bounds，他的frame也会对应改变，frame的改变是基于其中心点的（中心点不会变）。</p>
<p>在上面的代码增加两行：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v2.bounds.size.height += <span class="number">20</span></div><div class="line">v2.bounds.size.width += <span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>效果图如下：就是v2基于中心点不变，height和width属性值都增加了20个points，结果就是完全覆盖了紫色的view。<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds3.png" alt="view-demo"></p>
<p>还可以变着花样来：</p>
<p>再增加两行代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v1.bounds.origin.x += <span class="number">10</span></div><div class="line">v1.bounds.origin.y += <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds4.png" alt="view-demo"></p>
<p>不难看出view向原点移动方向的反方向进行了移动，这个因为一个view 的原点是与其frame的左上角一致。</p>
<p>其实我们可以发现：改变view的bounds size是会影响frame的Size，反之亦然，唯一不变的是view的center，。这个属性，跟frame的属性一样，这表示一个subview的位置是在其Superview的坐标系中的位置。通过下面的代码是可以获取的：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">CGPoint</span>(theView.bounds.midX, theView.bounds.midY)</div></pre></td></tr></table></figure></p>
<p>改变 view 的 bounds 不会影响其 center，改变一个 view 的 center 不会影响其 bounds。所以其实一个 view 的 bounds 和 center 就可以确定其在 superview 中的位置，frame 可以看作是一个由 bounds 和 center 组成的表达式的简便写法而已。注意有些情况下 frame 会没有什么意义，但是 bounds 和 center 总是有效的，所以建议多用 bounds 和 center 的组合，也比较容易理解。</p>
<ul>
<li>bounds: 一个 view 自己的坐标系统</li>
<li>center: 一个 view 的坐标系统和其 superview 的坐标系统的关系</li>
</ul>
<p>以下方法是可以进行不同view之间的坐标转换：</p>
<ul>
<li>convert(point: CGPoint, from: UIView?), convert(point: CGPoint, to: UIView?)</li>
<li>convert(rect: CGRect, from: UIView?), convert(rect: CGRect, to: UIView?)</li>
</ul>
<p>如果第二参数为nil，那么就取window的值。比如：如果v2是v1的subview，那么要把v2放到v1的中心，就用：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v2.center  = v1.convert(v1.center, from: v1.superview)</div></pre></td></tr></table></figure></p>
<p>注意，通过改变 center 来设置 view 的位置时，如果高或宽不是偶数，那么可能会导致 misaligned。可以通过打开模拟器的 Debug -&gt; Color Misaligned Images 来进行检测。一个简单的方法是调整好位置之后调用 makeIntegralInPlace 来设置 view 的 frame。</p>
<h3 id="Window-Coordinates-和-Screen-Coordinates"><a href="#Window-Coordinates-和-Screen-Coordinates" class="headerlink" title="Window Coordinates 和 Screen Coordinates"></a>Window Coordinates 和 Screen Coordinates</h3><p>设备屏幕是没有 frame 的，但是有 bounds。Main window 也没有 superview，不过其 frame 被设置为屏幕的 bounds，如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div></pre></td></tr></table></figure>
<p>在绝大数的情况下，window 坐标系就是 screen 坐标系。现在的iOS中坐标系和手机是否选择是有关的，有如下两个属性：</p>
<ul>
<li><p>UIScreen 的 coordinateSpace 属性</p>
<blockquote>
<p>这个坐标空间会旋转，就是高和宽在设备旋转时会呼唤，（0.0， 0.0）是这个app本身的左上方 。</p>
</blockquote>
</li>
<li><p>UIScreen的fixedCoordinateSpace 属性</p>
<blockquote>
<p>这个坐标空间不会变化，就是物理上的左上角，从用户来看，这里的 (0.0, 0.0) 可能是 app 本身的任何一个角。</p>
</blockquote>
</li>
</ul>
<p>可以用下面的方法来对不同坐标空间进行转换：</p>
<ul>
<li>convert(point: CGPoint, from: UICoordinateSpace), convert(point: CGPoint, to: UICoordinateSpace),</li>
<li>convert(rect: CGRect, from: UICoordinateSpace), convert(rect: CGRect, to: UICoordinateSpace)</li>
</ul>
<p>假设界面中有一个 UIView v，我们想知道它的实际设备坐标，可以用下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> r = v.superview!.convert(v.frame, to: <span class="type">UIScreen</span>.main.fixedCoordinateSpace)</div></pre></td></tr></table></figure>
<h3 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h3><p>一个 view 的 transform 属性改变这个 view 是如何被绘制的，实际上就是一个 CGAffineTransform类的 3x3 矩阵。所有的变换都是以这个view的center做基准的，下面的具体实例：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图入下：旋转了45度<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform1.png" alt="view-demo"></p>
<p>注意，这里的view的center和bounds都没有变，但是frame的数值已经没有意义，因为现在它的尺寸是能够覆盖当前view的最小矩形，并不会随着view的旋转而旋转。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.8</span>, y: <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform2.png" alt="view-demo"></p>
<p>view的bounds仍然不收影响，因为subview仍然绘制在相对于Superview的位置。也就是说这个两个view在水平方向一起拉伸。</p>
<p>代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">20</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds)</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v2.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">100</span>, y: <span class="number">0</span>)</div><div class="line">v2.transform = v2.transform.rotated(by: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform3.png" alt="view-demo"></p>
<p>再变，代码只需要改动如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v2.transform = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div><div class="line">v2.transform = v2.transform.translatedBy(x: <span class="number">100</span>, y: <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform4.png" alt="view-demo"></p>
<p>还有一种方法能实现上图的效果：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> r = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div><div class="line"><span class="keyword">let</span> t = <span class="type">CGAffineTransform</span>(translationX: <span class="number">100</span>, y: <span class="number">0</span>)</div><div class="line">v2.transform = t.concatenating(r)</div></pre></td></tr></table></figure></p>
<p>继续增加下面的代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v2.transform = r.inverted().concatenating(v2.transform)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform5.png" alt="view-demo"></p>
<p>再来一个变换：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(a: <span class="number">1</span>, b: <span class="number">0</span>, <span class="built_in">c</span>: -<span class="number">0.2</span>, d: <span class="number">1</span>, tx: <span class="number">0</span>, ty: <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform6.png" alt="view-demo"></p>
<h3 id="Trait-Collections-and-Size-Classes"><a href="#Trait-Collections-and-Size-Classes" class="headerlink" title="Trait Collections and Size Classes"></a>Trait Collections and Size Classes</h3><p>界面上的每个 view 都有一个 traitCollection 属性，值是一个 UITraitCollection，包含下面四个属性：</p>
<ul>
<li>displayScale，由当前屏幕决定的缩放尺寸，1(single resolution) 2(double resolution) 3(iPhone 6/6s/7 Plus)</li>
<li>userInterfaceIdiom，一个 UserIterfaceIdiom 值，可能是 .Phone 或 .Pad，来标志不同的设备，默认来说和 UIDevice 的 userInterfaceIdiom 属性一致.</li>
<li>horizontalSizeClass, verticalSizeClass，是 UIUserInterfaceSizeClass 值，可能是 .Regular 或 .Compact<blockquote>
<p>水平和竖直都是 .Regular -&gt; iPad</p>
<p>水平是 .Compact 竖直是 .Regular -&gt; iPhone 在垂直方向，或者 iPad 的分屏应用</p>
<p>水平和竖直都是 .Compact -&gt; iPhone 在水平方向(iPhone 6/6s/7 plus除外)</p>
<p>水平是 .Regular 竖直是 .Compact -&gt; iPhone 6/6s/7 Plus 在水平方向</p>
</blockquote>
</li>
</ul>
<p>当应用运行时如果 trait collection 发生改变，会调用 traitCollectionDidChange 方法。</p>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p>假设superview的bounds变化，其subview的bounds和center是不会变的，实际应用中，我们可能更需要subview根据Superview的变化而变化，这就是Layout。</p>
<p>Layout的主要执行方式：</p>
<ul>
<li><p>Manual layout（手动layout）<br>superview在被更改尺寸会发送layoutSubview消息，如果你新建自己的子类，并且重写layoutSuperview就可以手动更改，这个很麻烦，但是可以做任何你想做的事。</p>
</li>
<li><p>Autoresizing<br>Autoresizing是iOS6之前的方式，主要通过自己的autoresizingMask属性来变化。</p>
</li>
<li><p>Authlayout<br>iOS6中引入的，取决于view的constraints（NSLayoutConstraint的实例）。Autolayout是在layoutSubview的幕后实现，不需要代码也能实现复杂的layoutSubview功能。</p>
</li>
</ul>
<p>通常不会用到手动 layout，autoresizing 基本也是自动的，autolayout 主要在 xCode 的编辑器中进行设定。在代码中创建的 view 默认使用 autoresizing 而不是 autolayout。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。&lt;/p&gt;
&lt;p&gt;这个笔记谈不上翻译，当然目前很大一部分是借鉴&lt;a href=&quot;http://wdxtub.com/&quot; target=&quot;_b
    
    </summary>
    
    
      <category term="iOS，swift" scheme="http://www.dyike.com/tags/iOS%EF%BC%8Cswift/"/>
    
  </entry>
  
  <entry>
    <title>Programming iOS 9 学习笔记-view实验</title>
    <link href="http://www.dyike.com/2016/11/27/ios-learn-note-view-experment/"/>
    <id>http://www.dyike.com/2016/11/27/ios-learn-note-view-experment/</id>
    <published>2016-11-27T13:11:30.000Z</published>
    <updated>2016-11-30T00:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。我看过几次了，每次看的都是从第一个章节开始，过不了两张就不看了。汗死了，现在都是iOS10了，swift3都发布很久了，swift3相对前两个版本来说好很多，改动相当的大，所以说swift的每一个版本都可以算一个新语言。我最近把swift3的文档过了一遍（之前只看过swift1的，swift2没怎么看过）现在又拿出这个本书出来学习。</p>
<p>这个笔记谈不上翻译，当然目前很大一部分是借鉴<a href="http://wdxtub.com/" target="_blank" rel="external">http://wdxtub.com/</a> 这个blog里的笔记【这个blog文章我常看】，我只是在上面作了一些修改。</p>
<p>为什么这么说呢？因为我操作的环境是在swift3+Xcode8+iOS10。</p>
<p>我只是业余的、业余的、业余的学习iOS开发，如果里面什么错误，欢迎指正！欢迎iOS大牛带我飞。</p>
</blockquote>
<h3 id="View的实验"><a href="#View的实验" class="headerlink" title="View的实验"></a>View的实验</h3><p>这里做几个简单的介绍和实验操作：</p>
<h4 id="single-View-Application-："><a href="#single-View-Application-：" class="headerlink" title="single View Application ："></a>single View Application ：</h4><p>一个single view application项目创建后，你将会看到一个包含一个页面的main storyboard 以及一个包含一个main view的view controller的实例。app运行起来，view controller将会成为app的main window的rootViewController，它的main view将会变成window的root view。</p>
<p>在ViewController.swift文件中修改viewDidLoaded()：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="keyword">let</span> mainview = <span class="keyword">self</span>.view</div><div class="line">    <span class="keyword">let</span> v = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">200</span>, width: <span class="number">50</span>, height: <span class="number">50</span>))</div><div class="line">    v.backgroundColor = <span class="type">UIColor</span>.blue   <span class="comment">// small blue square</span></div><div class="line">    mainview?.addSubview(v)    <span class="comment">// add it to main view</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="App-without-a-main-storyboard（-这个例子我就省略了）"><a href="#App-without-a-main-storyboard（-这个例子我就省略了）" class="headerlink" title="App without a main storyboard（ 这个例子我就省略了）"></a>App without a main storyboard（ 这个例子我就省略了）</h4><h3 id="Subview-和-Superview"><a href="#Subview-和-Superview" class="headerlink" title="Subview 和 Superview"></a>Subview 和 Superview</h3><p>在iOS中，一个的subview的一部分或者全部，可以出现在superview之外。一个view可以与另外一个view重叠，也可以在一个view前面绘制部分或全部。<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/view-demo.png" alt="view-demo"></p>
<p>上图三个view都有一个背景颜色，每一个view都相当于是一个带有颜色的矩形。光看上面的图是没法区别这个三个view之间的关系，其实，中间的view（水平方向）是左边view的sibling view。右边的view是中view的一个subview。</p>
<p> view hierarchy的一些特点：</p>
<ul>
<li>一个view被移出，或者引入他的superview，它的subview也会被引入。</li>
<li>一个view的透明度会被其subview继承。</li>
<li>一个view可以限制subview的显示范围。比如不让subview超出view本身的范围，这个叫做clipping，被设置在view的clipsToBounds属性中。</li>
<li>一个superview拥有它的subview。</li>
<li>如果改变一个view的大小，那么它的subview也会被自动设置尺寸。</li>
</ul>
<p>一个UIView有一个superview的属性（一个UIView）和一个subviews属性（一个UIView对象的数组，back-to-front的顺序），在代码中可以判断view hierarchy。有一个方法isDescendantOfView：用来检查一个view是否是另一个view的subview。View还有一个tag属性，有一个方法viewWithTag进行引用。</p>
<blockquote>
<p>注意：这里的这两个func 在swift3中跟swift2有点不一样：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDescendantOfView</span><span class="params">(view: UIView)</span></span> -&gt; <span class="type">Bool</span>  </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewWithTag</span><span class="params">(tag: Int)</span></span> -&gt; <span class="type">UIView</span>?</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在代码中操作view hierarchy是非常简单的！</p>
<blockquote>
<p>addSubview方法添加一个subview。比如：view.addSubview(button)。<br>removeFromSuperview方法移除一个subview。比如：xxxView.removeFromSuperview();</p>
</blockquote>
<p>注意从superview中移除subview同时也会释放它。如果以后需要重用的话，最好先确定能够把它保存在内存中，通常的方法是把这个view保存在一个属性中。</p>
<p>在进行这些操作时系统也会给出通知，重写下列方法就可以根据需要在不同的情况下进行不同的操作：</p>
<ul>
<li>didAddSubview, willRemoveSubview</li>
<li>didMoveToSuperview, willMoveToSuperview</li>
<li>didMoveToWindow, willMoveToWindow</li>
</ul>
<p>当调用了addSubview，这个view也会被放到其superview的subview数组中的最后一个，也就是说这个view会被最后一个渲染出来。如果view的subviews是被索引的，从0开始（rearmost），这样就可以把view插入到指定位置，已经放到前面/后面，或两个view进行交互。</p>
<ul>
<li>swift3：// Insert subview at specific position<br>insertSubview(_:at:)<br>比如:<br>let f1 = someView.insertSubview(view: at:)</li>
<li>swift3：// Insert subview above/below a specific subview<br>insertSubview(<em>:aboveSubview:)<br>insertSubview(</em>:belowSubview:)<br>比如：<br>let f2 = someView.insertSubview(view: aboveSubview:)<br>let f3 = someView.insertSubview(view: belowSubview:)</li>
<li>swift3: // Exchange two subview’s position<br>exchangeSubview(at:withSubviewAt:)</li>
<li>swift3：// Bring the subview to the front or back of its sibling<br>bringSubview(toFront:)<br>sendSubview(toBack:)</li>
</ul>
<p>看到这里，你可能会感觉有点奇怪，没有一个方法可以直接移除一个superview的所有subview。然后，因为一个superview的subivew数组是一个不可变的数组，遍历subiviews数组，然后依次执行removeFromSuperview()就大差不差了！比如：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rootView.subviews.forEach &#123; $<span class="number">0</span>.removeFromSuperview() &#125;</div></pre></td></tr></table></figure></p>
<h3 id="Visibility-and-Opacity-可见度和不透明"><a href="#Visibility-and-Opacity-可见度和不透明" class="headerlink" title="Visibility and Opacity(可见度和不透明)"></a>Visibility and Opacity(可见度和不透明)</h3><p>一个view的可见度是可以通过hidden属性来设置的。隐藏一个view（包括subview）只是从界面上隐藏，而不需要从view hierarchy结构中删除。一个隐藏的view不能接受触摸的事件。（用户看不到而已，其实是存在的）</p>
<p>backgroundColor属性可以设置view的背景颜色，颜色是属于UIColor类，颜色背景为nil的view，默认是具有透明背景的。</p>
<p>可以通过设置 view 的 alpha 属性来修改透明程度，1.0 是完全不透明，0.0 是透明。假设一个 view 的 alpha 是 0.5，那么它的 subview 的 alpha 都是以 0.5 为基准的，不可能高于 0.5。而 UIColor 也有 alpha 这个属性，所以即使一个 view 的 alpha 是 1.0，它仍旧可能是透明的，因为其 backgroundColor 可以是透明的。一个 alpha 为 0.0 的 view 是完全透明的所以是不可见的，通常来说也不可能被点击。</p>
<p>View 的 alpha 属性不仅影响背景颜色，也会影响其内容的透明度。</p>
<p>view的opaque属性的修改不会影响view的样子，更多的是对于系统绘制的提示。如果一个view的opaque设置true，因为不用考虑透明的绘制，所以效率高一点。并且再设置透明的背景颜色或者 alpha 属性都无效。可能会让人吃惊，它的默认值是 true。</p>
<h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><p>view的frame属性（CGRect类）是他本身的长方形在superview中位置，注意是在superview的坐标系中国的位置。默认来说，superview的坐标系圆点在坐上，向右x增加，向下y增加。</p>
<p>给view的frame设置不同的CGRect属性值，能够改变view的view的位置或者改变尺寸大小（同时改变也可以）。</p>
<p>现在我们画上图大差不差的图：我们在AppDelegate.swift中func application()增加下面几行代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//here we can add subviews</span></div><div class="line"><span class="keyword">let</span> mainview = <span class="keyword">self</span>.window!.rootViewController!.view</div><div class="line"></div><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">41</span>, y: <span class="number">56</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> v3 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">43</span>, y: <span class="number">197</span>, width: <span class="number">160</span>, height: <span class="number">230</span>))</div><div class="line">v3.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">mainview?.addSubview(v3)</div></pre></td></tr></table></figure></p>
<p>效果图如下：（v2是添加在v1上）</p>
<p><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/view-ios10-1.png" alt="view-ios"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。我看过几次了，每次看的都是从第一个章节开始，过不了两张就不看了。汗死了，现在都是iOS10了，swift3都发布很久了，swift3相对前
    
    </summary>
    
    
      <category term="ios，swift" scheme="http://www.dyike.com/tags/ios%EF%BC%8Cswift/"/>
    
  </entry>
  
  <entry>
    <title>Programming iOS 9 学习笔记-view章节</title>
    <link href="http://www.dyike.com/2016/11/26/ios-learn-note-view/"/>
    <id>http://www.dyike.com/2016/11/26/ios-learn-note-view/</id>
    <published>2016-11-26T14:08:34.000Z</published>
    <updated>2016-11-26T14:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>  首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。我看过几次了，每次看的都是从第一个章节开始，过不了两张就不看了。汗死了，现在都是iOS10了，swift3都发布很久了，swift3相对前两个版本来说好很多，改动相当的大，所以说swift的每一个版本都可以算一个新语言。我最近把swift3的文档过了一遍（之前只看过swift1的，swift2没怎么看过）现在又拿出这个本书出来学习。</p>
<p>  这个笔记谈不上翻译，当然目前很大一部分是借鉴<a href="http://wdxtub.com/" target="_blank" rel="external">http://wdxtub.com/</a> 这个blog里的笔记【这个blog文章我常看】，我只是在上面作了一些修改。</p>
<p>为什么这么说呢？因为我操作的环境是在swift3+Xcode8+iOS10。</p>
<p>我只是业余的、业余的、业余的学习iOS开发，如果里面什么错误，欢迎指正！欢迎iOS大牛带我飞。</p>
</blockquote>
<h1 id="第一章Views"><a href="#第一章Views" class="headerlink" title="第一章Views"></a>第一章Views</h1><h3 id="几个概念："><a href="#几个概念：" class="headerlink" title="几个概念："></a>几个概念：</h3><ul>
<li>一个view是UIView类或UIView的子类的对象，知道怎么在界面的矩形区域绘制自己。</li>
<li>一个view也是一个responder(UIView是UIResponder的子类)。是与用户交互的（触摸、点击）。</li>
<li>一个view可以有子view（subview），一个subview只能有一个superview。这就形成了一个view的树状结构。如果从界面上去除（隐藏/移动）一个view，它的subview也将去除（隐藏/移动）。</li>
<li>一个view可以从nib生成，也可以通过代码生成。</li>
</ul>
<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>view hierarchy的顶层是app的window，是UIWindow的一个实例，或者UIView子类的实例。在应用中应该只有一个main window。在启动的时候创建，不会被销毁或者代替。想象一个平时我们使用的app，这是一个什么东西？就是一个应用的背景，并且是superview，其他的view都是他的subview。</p>
<p>app的window需要填充设备的屏幕：window初始化时候，frame设置成UIScreen.main.bounds。如果使用main storyboard, UIApplicationMain 函数会自动完成。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div><div class="line"><span class="comment">//在iOS10 中可以不传入frame参数，默认设置成screen的bounds</span></div><div class="line"><span class="keyword">let</span> w = <span class="type">UIWindow</span>()</div></pre></td></tr></table></figure>
<p>为了保证window在app的生命周期中存在，app delegate类会用一个strong retain policy来维持一个window属性。这个过程是：启动app，UIApplicationMain方法会初始化app delegate类并一直保持这个实例。然后window实例就会被赋值到app delegate实例的window属性上，所以app的整个生命周期都一直保持。如果使用main storyboard，这些都是自动初始化的。</p>
<p>当一个view控制器成为main window的rootViewController， 它的view将会变为main window的有且仅有的一个直接subview，也就是main window上的root view，之后所有的view都是这个root view上的subview。因此，root view是view hierarchy的最顶层的对象，用户是可以看到的。但有时候，用户可能会看到root view之后的window，基于这个原因，可以在给main view 设置好backgroundColor。</p>
<p>app的界面应该是不可见的，知道你window被设置为key window。这个可以通过调用UIWindow实例的makeKeyVisible方法来完成。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul>
<li>使用main storyboard</li>
</ul>
<blockquote>
<ol>
<li>storyboard文件在Info.plist的键为 Main storyboard file base name中指定（UIMainStoryboardFile）</li>
<li>UIApplicationMain实例化UIWindow，设置好frame。把设置好的UIWindow实例指定给app delegate的window属性</li>
<li>storyboard初始化的view controller，指定到 window 的 rootViewController 属性</li>
<li>这些都是发生在app delegate的 application: didFinishLaunchingWithOptions 被调用之前</li>
</ol>
</blockquote>
<ul>
<li>不使用main storyboard</li>
</ul>
<blockquote>
<ol>
<li>在General pane,选择”Main”，并删除</li>
<li>删除Main.storyboard和ViewController.swift</li>
<li>删除AppDelegate.swift的所有内容</li>
</ol>
</blockquote>
<p>例子：An App Delegate class with no storyboard</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="meta">@UIApplicationMain</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span> : <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> window : <span class="type">UIWindow</span>?</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication,</span></span></div><div class="line">        didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</div><div class="line">        -&gt; <span class="type">Bool</span> &#123;</div><div class="line">            <span class="keyword">self</span>.window = <span class="type">UIWindow</span>()</div><div class="line">            <span class="keyword">self</span>.window!.rootViewController = <span class="type">UIViewController</span>()</div><div class="line">            <span class="keyword">self</span>.window!.backgroundColor = <span class="type">UIColor</span>.whiteColor()</div><div class="line">            <span class="keyword">self</span>.window!.makeKeyAndVisible()</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>app一旦运行起来之后，将会有多中方式来引用window：</p>
<ul>
<li>界面中的UIView，会自动创建一个window属性（通过对window的引用创建）。</li>
</ul>
<p>可以使用UIView的window属性来检查这个view是否被嵌入到了window中。如果不是，window属性为nil。一个window的属性为nil的UIView对用户是不可见的。</p>
<ul>
<li>app的delegate实例会保持这个window的引用（window属性）。通过使用shared application的delegate 属性来获取这个引用：<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIApplication</span>.shared.delegate!.window!!</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果不那样使用的话，可以显式转换成app delegate类<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>).window!</div></pre></td></tr></table></figure></p>
<ul>
<li>shared application 会通过它的keyWindow属性来维护一个执行window的引用。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIApplication</span>.shared.keyWindow!</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是，这个引用不是很稳定。原因：系统会创建临时的window来当做key window。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;  首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。我看过几次了，每次看的都是从第一个章节开始，过不了两张就不看了。汗死了，现在都是iOS10了，swift3都发布很久了，swift3相
    
    </summary>
    
    
      <category term="swift, iOS" scheme="http://www.dyike.com/tags/swift-iOS/"/>
    
  </entry>
  
  <entry>
    <title>好久没有写东西了</title>
    <link href="http://www.dyike.com/2016/11/02/long-time-no-writing/"/>
    <id>http://www.dyike.com/2016/11/02/long-time-no-writing/</id>
    <published>2016-11-02T13:56:11.000Z</published>
    <updated>2016-11-02T14:13:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一次写东西还是九月份呢，整个十月份没有写东西，今天晚上突然就想写点东西，十一月份了，来杭州三个月了，工作也基本走上了正轨，也转正了。不过最近也不是很忙，说实话，前段时间确实很闲，偏偏闲的时候没有写点东西，现在回过头来想想，我是不是把那段时间给浪费了。</p>
<p>前段时间，首先接触了一点前端的东西，自己比较喜欢Vue框架，就用Vue2.0写了一两个demo，过了一遍文档。坦率地讲，对于前端的东西，自己还存在很多弱点，要是有兴趣，也许当年就可能是选前端了。哈哈哈哈，这都是开玩笑，其实前端还是很好玩的，现在的前端的门槛还是挺高的。慢慢来吧，有时间就去写点demo啥的，学！</p>
<p>后来听朋友讲，rust，看了一下文档，有点被这个当出来的语言给迷住了一会儿，基本都是那种学习的套路，看文档，撸实例代码，好玩，也有些让我头疼的东西比如，泛型，可变性，所有权这些知识点上，还是很含糊的，估计还是要过几遍文档。rust也有很多不错的地方，比如traits。</p>
<p>其他生活方面呢，没有啥特殊变化，目前，周末自己做做饭。真是那句话“吃饭五分钟，做饭两小时”😂，确实有点麻烦，但可以自己想吃啥就吃啥，还能省钱。到目前为止，还没有出现自己做得饭不能吃的情况。生活作息时间也按照日程来了，每天晚上11点开始睡觉，然后早上6点起床！坚持了两个多周了，现在杭州开始越来越冷，早上起床确实需要勇气了。坚持吧！</p>
<p>对了，现在写这个的时候，我旁边的手机还在放董路老师的直播，他老司机每天发车，我不保证每天上车，有时间就看看，至少还能听到不少意思的关于足球的东西。他直播播放的歌曲也挺好听的，能放松一下一天的疲惫！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一次写东西还是九月份呢，整个十月份没有写东西，今天晚上突然就想写点东西，十一月份了，来杭州三个月了，工作也基本走上了正轨，也转正了。不过最近也不是很忙，说实话，前段时间确实很闲，偏偏闲的时候没有写点东西，现在回过头来想想，我是不是把那段时间给浪费了。&lt;/p&gt;
&lt;p&gt;前段时
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php二维数组去重</title>
    <link href="http://www.dyike.com/2016/10/18/php-array-unique/"/>
    <id>http://www.dyike.com/2016/10/18/php-array-unique/</id>
    <published>2016-10-18T13:55:04.000Z</published>
    <updated>2016-10-18T14:08:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>没有啥，就是随便写点关于php数组的处理，数组一直是我的弱项，现在还是做一点记录吧。</p>
<p>对于二维数组咱们分两种情况讨论，一种是因为某一键名的值不能重复，删除重复项；另一种因为内部的一维数组不能完全相同，而删除重复项，下面举例说明：</p>
<h2 id="某一键名的值不能重复，删除重复项"><a href="#某一键名的值不能重复，删除重复项" class="headerlink" title="某一键名的值不能重复，删除重复项"></a>某一键名的值不能重复，删除重复项</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayUnique</span><span class="params">($arr, $key)</span> </span>&#123;</div><div class="line">    $tmp = [];</div><div class="line">    <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">        <span class="comment">//搜索$v[$key]是否在$tmp_arr数组中存在，若存在返回true</span></div><div class="line">        <span class="keyword">if</span> (in_array($v[$key], $tmp)) &#123;</div><div class="line">            <span class="keyword">unset</span>($arr[$k]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $tmp[] = $v[$key];</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    sort($arr); <span class="comment">//sort函数对数组进行排序</span></div><div class="line">    <span class="keyword">return</span> $arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = [</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">123</span>, <span class="string">'name'</span> =&gt; <span class="string">'张三'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">123</span>, <span class="string">'name'</span> =&gt; <span class="string">'李四'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">124</span>, <span class="string">'name'</span> =&gt; <span class="string">'王五'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">125</span>, <span class="string">'name'</span> =&gt; <span class="string">'赵六'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">126</span>, <span class="string">'name'</span> =&gt; <span class="string">'赵六'</span>],</div><div class="line">];</div><div class="line">$key = <span class="string">'id'</span>;</div><div class="line">arrayUnique(&amp;$test, $key);</div><div class="line">print_r($test);</div></pre></td></tr></table></figure>
<p>显示结果就知道了。。。</p>
<h4 id="内部的一维数组不能完全相同，而删除重复项"><a href="#内部的一维数组不能完全相同，而删除重复项" class="headerlink" title="内部的一维数组不能完全相同，而删除重复项"></a>内部的一维数组不能完全相同，而删除重复项</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayUnique</span><span class="params">($array)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($array <span class="keyword">as</span> $v)&#123;</div><div class="line">        $v = join(<span class="string">","</span>, $v); <span class="comment">//降维,也可以用implode,将一维数组转换为用逗号连接的字符串</span></div><div class="line">        $temp[] = $v;</div><div class="line">    &#125;</div><div class="line">    $temp = array_unique($temp);    <span class="comment">//去掉重复的字符串,也就是重复的一维数组</span></div><div class="line">                </div><div class="line">    <span class="keyword">foreach</span> ($temp <span class="keyword">as</span> $k =&gt; $v)&#123;</div><div class="line">        $temp[$k] = explode(<span class="string">","</span>, $v);   <span class="comment">//再将拆开的数组重新组装</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $temp;</div><div class="line">&#125;</div><div class="line">$test = [</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">123</span>, <span class="string">'name'</span> =&gt; <span class="string">'张三'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">123</span>, <span class="string">'name'</span> =&gt; <span class="string">'李四'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">124</span>, <span class="string">'name'</span> =&gt; <span class="string">'王五'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">125</span>, <span class="string">'name'</span> =&gt; <span class="string">'赵六'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">126</span>, <span class="string">'name'</span> =&gt; <span class="string">'赵六'</span>],</div><div class="line">];</div><div class="line">$data = arrayUnique($test);</div><div class="line">print_r($data);</div></pre></td></tr></table></figure>
<p>结果显示就知道了。。。。</p>
<p>就这样简单粗暴一点吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有啥，就是随便写点关于php数组的处理，数组一直是我的弱项，现在还是做一点记录吧。&lt;/p&gt;
&lt;p&gt;对于二维数组咱们分两种情况讨论，一种是因为某一键名的值不能重复，删除重复项；另一种因为内部的一维数组不能完全相同，而删除重复项，下面举例说明：&lt;/p&gt;
&lt;h2 id=&quot;某一键
    
    </summary>
    
    
      <category term="php" scheme="http://www.dyike.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>GDB高效调试的一些小tips</title>
    <link href="http://www.dyike.com/2016/09/19/tips-for-productive-debug-with-gdb/"/>
    <id>http://www.dyike.com/2016/09/19/tips-for-productive-debug-with-gdb/</id>
    <published>2016-09-19T14:23:49.000Z</published>
    <updated>2016-09-19T15:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来翻译一篇文章，是关于高效使用GDB调试的。</p>
<h2 id="建议一：Try-GDB-Dashboard"><a href="#建议一：Try-GDB-Dashboard" class="headerlink" title="建议一：Try GDB Dashboard"></a>建议一：Try GDB Dashboard</h2><p>这可能不是你喜欢的“菜”，但像我这样的，喜欢在每一个断点处获得更多的程序信息，所以就尝试GDB仪表板。</p>
<p>它是一款非常棒的组合式的界面，看起来是这样的：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/gdb/gdb-dashboard.png" alt="界面"></p>
<p>从Github仓库(<a href="https://github.com/cyrus-and/gdb-dashboard)，能够获取该项目的更多信息,根据你的需求定制你自己的样式。" target="_blank" rel="external">https://github.com/cyrus-and/gdb-dashboard)，能够获取该项目的更多信息,根据你的需求定制你自己的样式。</a></p>
<h2 id="建议二：Use-a-global-gdbinit-and-a-project-gdbinit"><a href="#建议二：Use-a-global-gdbinit-and-a-project-gdbinit" class="headerlink" title="建议二：Use a global .gdbinit and a project .gdbinit"></a>建议二：Use a global .gdbinit and a project .gdbinit</h2><p><code>.gdbinit</code>是一个配置文件，在gdb启动的时候生效。在你的home目录(~/.gdbinit)可以有一个配置文件做全局设置，或者在当前项目目录 (./.gdbinit)下特定配置。</p>
<p>正如你从下面的提示可以看到，项目中配置<code>.gdbinit</code>对gdb设定自定格式或者别名是非常有效的。</p>
<p>提示：必须用<code>set auto-load local-gdbinit</code>让项目生成<code>.gdbinit</code>文件！</p>
<h2 id="建议三：Use-custom-formatters"><a href="#建议三：Use-custom-formatters" class="headerlink" title="建议三：Use custom formatters"></a>建议三：Use custom formatters</h2><p>通常C/C++如果使用了联合体(unions),在调试器中很难检查的。</p>
<p>为了让他们更加可读，你可以为你的数据类型设定自定义的格式。参见GDB的Pretty Prining(<a href="https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing.html#Pretty-Printing" target="_blank" rel="external">https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing.html#Pretty-Printing</a>)</p>
<p>举个例子，在<a href="https://metricpanda.com/rival-fortress" target="_blank" rel="external">Rival Fortress</a>中有一个矩阵的数据类型(MPEMatrix4),那是许多匿名结构(<a href="https://gcc.gnu.org/onlinedocs/gcc/Unnamed-Fields.html`" target="_blank" rel="external">anonymous structs</a>)的一个联合体(union)。这样使用就是为了方便。</p>
<p>使用了自定义打印格式，前后对比效果如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/gdb/gdb-pretty-printing.png" alt="前后对比"></p>
<p>自定义的格式的源码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MPEMatrixPrinter:</div><div class="line">  <span class="string">""</span><span class="string">"Print a 4x4 matrix."</span><span class="string">""</span></div><div class="line"></div><div class="line">  def __init__(self, val, size):</div><div class="line">    self.val = val</div><div class="line">    self.size = <span class="keyword">int</span>(size)</div><div class="line"></div><div class="line">  def to_string(self):</div><div class="line">    <span class="keyword">return</span> (<span class="string">"\n\t[ %3g %3g %3g %3g ]"</span></div><div class="line">            <span class="string">"\n\t[ %3g %3g %3g %3g ]"</span></div><div class="line">            <span class="string">"\n\t[ %3g %3g %3g %3g ]"</span></div><div class="line">            <span class="string">"\n\t[ %3g %3g %3g %3g ]"</span>) % \</div><div class="line">                (<span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">0</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">1</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">2</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">3</span>]),</div><div class="line">                <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">4</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">5</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">6</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">7</span>]),</div><div class="line">                <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">8</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">9</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">10</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">11</span>]),</div><div class="line">                <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">12</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">13</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">14</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">15</span>]))</div><div class="line"></div><div class="line">def project_type_lookups(val):</div><div class="line">  lookup_tag = val.type.tag</div><div class="line">  <span class="keyword">if</span> lookup_tag == None:</div><div class="line">    <span class="keyword">return</span> None</div><div class="line"></div><div class="line">  match = re.match(r<span class="string">"^MPEMatrix(\d)$"</span>, lookup_tag)</div><div class="line">  <span class="keyword">if</span> match:</div><div class="line">    <span class="keyword">return</span> MPEMatrixPrinter(val, match.group(<span class="number">1</span>))</div><div class="line"></div><div class="line">gdb.pretty_printers.append(project_type_lookups)</div></pre></td></tr></table></figure>
<h2 id="建议四：Use-aliases"><a href="#建议四：Use-aliases" class="headerlink" title="建议四：Use aliases"></a>建议四：Use aliases</h2><p>别名能够非常有效地提高调试的效率，在<code>.gdbinit</code>文件这样设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias -a w = dashboard expression watch</div></pre></td></tr></table></figure>
<h2 id="建议五：Use-automatic-variables"><a href="#建议五：Use-automatic-variables" class="headerlink" title="建议五：Use automatic $ variables"></a>建议五：Use automatic <code>$</code> variables</h2><p>不管什么时候，使用<code>print</code>命令检查某些东西，gdb会像这样在一个变量里自动存储结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print Identity</div><div class="line">$1 = </div><div class="line">        [   1   0   0   0 ]</div><div class="line">        [   0   1   0   0 ]</div><div class="line">        [   0   0   1   0 ]</div><div class="line">        [   0   0   0   1 ]</div></pre></td></tr></table></figure>
<p><code>$1</code>是自动生成的变量，在后面也可这样提取他：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print $1</div><div class="line">$2 = </div><div class="line">        [   1   0   0   0 ]</div><div class="line">        [   0   1   0   0 ]</div><div class="line">        [   0   0   1   0 ]</div><div class="line">        [   0   0   0   1 ]</div></pre></td></tr></table></figure>
<h2 id="建议六：Inspect-array-pointers"><a href="#建议六：Inspect-array-pointers" class="headerlink" title="建议六：Inspect array pointers"></a>建议六：Inspect array pointers</h2><p>在一个数组里面使用C-style的指针，可以使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print *Array@10</div></pre></td></tr></table></figure>
<p>将会打印Array中的10个元素。</p>
<h2 id="建议七：Enable-command-history"><a href="#建议七：Enable-command-history" class="headerlink" title="建议七：Enable command history"></a>建议七：Enable command history</h2><p>设置命令历史记录，在<code>.gdbinit</code>文件中设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set history save on</div></pre></td></tr></table></figure>
<p>在当前目录下默认保存的历史文件(<code>.gdb_history</code>)，但是可以设定输出文件名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set history filename &lt;fname&gt;</div></pre></td></tr></table></figure>
<h2 id="建议八：Detect-if-the-debugger-is-running"><a href="#建议八：Detect-if-the-debugger-is-running" class="headerlink" title="建议八：Detect if the debugger is running"></a>建议八：Detect if the debugger is running</h2><p>这个其实不是关于gdb调试，但是非常的有用。</p>
<p>在windows系统里可以使用<code>IsDebuggerPresent</code>(<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms680345(v=vs.85).aspx)函数来判断debugger是否在运行。" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/windows/desktop/ms680345(v=vs.85).aspx)函数来判断debugger是否在运行。</a><br>在Unix系统也是可以这样使用的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _WIN32</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">IsDebuggerPresent</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> Detected;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> RunningUnderDebugger;</div><div class="line">  <span class="keyword">if</span> (!Detected)</div><div class="line">  &#123;</div><div class="line">    Detected = <span class="number">1</span>;</div><div class="line">    RunningUnderDebugger = ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> RunningUnderDebugger;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来翻译一篇文章，是关于高效使用GDB调试的。&lt;/p&gt;
&lt;h2 id=&quot;建议一：Try-GDB-Dashboard&quot;&gt;&lt;a href=&quot;#建议一：Try-GDB-Dashboard&quot; class=&quot;headerlink&quot; title=&quot;建议一：Try GDB Dashbo
    
    </summary>
    
    
      <category term="GDB" scheme="http://www.dyike.com/tags/GDB/"/>
    
  </entry>
  
  <entry>
    <title>PHP单元测试的学习整理</title>
    <link href="http://www.dyike.com/2016/09/12/php-unint-test/"/>
    <id>http://www.dyike.com/2016/09/12/php-unint-test/</id>
    <published>2016-09-12T08:05:52.000Z</published>
    <updated>2016-09-12T08:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了一点PHP单元测试的东西，这里做一个简单的整理。</p>
<h2 id="什么是单元测试？"><a href="#什么是单元测试？" class="headerlink" title="什么是单元测试？"></a>什么是单元测试？</h2><p>单元测试将你的程序代码进行隔离并证明这个单个部件是正确的。通常情况下，单元测试是非常小、快并且简短的代码片段——比如一个方法。</p>
<h2 id="这样做有什么好处？"><a href="#这样做有什么好处？" class="headerlink" title="这样做有什么好处？"></a>这样做有什么好处？</h2><p>可以保证代码的简洁，增强代码的可读性，同时还有利于编写更多有意义的代码，能减少代码的bug数量等等好处。</p>
<h4 id="从手动测试到单元测试"><a href="#从手动测试到单元测试" class="headerlink" title="从手动测试到单元测试:"></a>从手动测试到单元测试:</h4><p>之前测试(调试)代码的时候基本是这样的：编写代码——&gt;打开浏览器——&gt;给定不同的输入条件——&gt;看输出的结果是否符合预期的结果。对，这个就是手动测试，是对功能设计的测试，不是对我们的代码进行测试。</p>
<p>现在我们想要做的是自动测试，不再像上面说的那样死板的东西。有两种主要的方法可以达到如此效果——TDD(test-driven development)测试驱动开发 和 BDD(behavior-driven development)行为驱动开发。</p>
<blockquote>
<p>TDD是非常简短的，在编写业务代码之前编写测试用例，这种方式依赖于单元测试。正如前面提到的，单元测试是简短的、容易编写的代码片段，也就是说你的业务代码要确保被单元测试的代码所覆盖。TDD的大概流程是针对于每个功能点抽象出接口代码——&gt;编写单元测试的代码——&gt;实现接口——&gt;运行单元测试代码，循环此过程，直到整个单元测试都通过。这样做的好处是：减少代码逻辑的错误，尽可能减少项目中的bug。当然不是所有的项目都适合TDD这个方式。那使用TDD都是在什么情景下呢？</p>
<ul>
<li>(1) 对项目的需求足够的了解 </li>
<li>(2)项目本身的复杂度和依赖性，如果一个项目极其复杂，模块之间又是相互依赖，这种情况下，TDD反正会增大拆分接口和编写测试用例的工作量。</li>
</ul>
<p>BDD,另一种单元测试的方式，就必须要对某些行为要有具体的期望，这样测试才会有意义！</p>
</blockquote>
<h2 id="一些讨论"><a href="#一些讨论" class="headerlink" title="一些讨论"></a>一些讨论</h2><p>写到这里，对每样东西每个人的看法都是不一样，对单元测试也是这样。也有人反对单元测试，每个东西不会是十全十美，当然了我写这篇文章肯定要夸单元测试的好处。现在不妨来讨论讨论。</p>
<h4 id="编写测试用例浪费很多时间？"><a href="#编写测试用例浪费很多时间？" class="headerlink" title="编写测试用例浪费很多时间？"></a>编写测试用例浪费很多时间？</h4><p>首先需要说明的是，编写测试用例代码(额外的代码)显而易见是需要花时间的。对的，这个不只是花费时间的唯一因素。当我们编写完一个项目的业务逻辑的代码，过了好几个月，回过头来去看我们自己的代码，就要花费很长时间去理解我当初为什么要这样编写而不那样编写。也有可能是花费时间去理解别人的代码。fix bug的时候也需要花费时间在自己的代码中穿行。如果我们使用第三方的一些库，库被修改，我们也需要花很多时间review我们的代码……这些时间加起来是不是要比编写测试用例的代码还要多得多。<br>甚至还有人抱怨说，“我编写了测试用例的代码，并没有找到bug，这不是浪费时间？是什么？”既然你编写了测试用例，当你修改了某个部分的代码时，就可以帮你检查出来。至少这样你不需要手动测试你哪些修改过的代码。</p>
<h4 id="我的代码，我了解，我不需要测试？"><a href="#我的代码，我了解，我不需要测试？" class="headerlink" title="我的代码，我了解，我不需要测试？"></a>我的代码，我了解，我不需要测试？</h4><p>有的时候，我们第一次编写业务逻辑代码是非常清晰的，但过了一段时间我们总要花费一点时间来理解当初编写业务逻辑的代码。我们写的测试用例的方法通常有五六行代码组成，但这些方法可用于不同的服务器、不同版本的脚本语言环境。</p>
<h4 id="不可能测试所有的差异？"><a href="#不可能测试所有的差异？" class="headerlink" title="不可能测试所有的差异？"></a>不可能测试所有的差异？</h4><p>这个答案是肯定的，不可能测试所有的差异。但一个单元能够帮你展示你所能覆盖测试的差异。如果你能够根据非单元测试覆盖测试出的差异来保证应用的正常运行，你可以扩展你的测试范围。举个栗子，当你用某个确定的整数作为输入条件成功跑通了程序，你可以扩展这个测试范围，用0、非整数或者其他作为输入条件进行测试。</p>
<h4 id="编写测试用例难？"><a href="#编写测试用例难？" class="headerlink" title="编写测试用例难？"></a>编写测试用例难？</h4><p>编写测试用例很简单，编写nice的测试用例难。这需要一个实践的过程！</p>
<p>总之，学习单元测试是需要花费时间的。即便你是第一次使用单元测试，但这个学习曲线很短而且是有回报的。何乐而不为呢？</p>
<h3 id="补充几点："><a href="#补充几点：" class="headerlink" title="补充几点："></a>补充几点：</h3><h4 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h4><p>编写代码的时候，<code>print_r()</code>和<code>var_dump()</code>确实是一个非常友好的测试，但是没有真正达到测试的目的。手动测试也是比较花费时间、无聊的。当你因为某个功能要修改的旧代码、或因为某个bug要修改某块代码的时候，此时你需要一些东西来测试你的代码是否还有你想要的功能。手动测试前，通常要列出所有输入值（如：负数、0、字符串等等）如果某次测试你忘记了测试字符串的情况就将代码部署到生产环境了。单元测试，不会发生这种事情。</p>
<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>对变量、方法重命名以增强代码的可读性，此时要小心重命名会不会带来新的bug和冲突。有的时候，有些代码跟目标功能一点关联都没有，显然，可以删除这样的代码，但你需要检查剩余的代码还是能够正常工作的。</p>
<h4 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h4><p>测试运行是隔离的。进行测试就是在证明当前代码片段不依赖其他代码块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习了一点PHP单元测试的东西，这里做一个简单的整理。&lt;/p&gt;
&lt;h2 id=&quot;什么是单元测试？&quot;&gt;&lt;a href=&quot;#什么是单元测试？&quot; class=&quot;headerlink&quot; title=&quot;什么是单元测试？&quot;&gt;&lt;/a&gt;什么是单元测试？&lt;/h2&gt;&lt;p&gt;单元测试将你的程序
    
    </summary>
    
    
      <category term="php" scheme="http://www.dyike.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>来杭州入职一个月了，记录点啥呢？</title>
    <link href="http://www.dyike.com/2016/09/01/hang-zhou-one-month/"/>
    <id>http://www.dyike.com/2016/09/01/hang-zhou-one-month/</id>
    <published>2016-09-01T14:34:43.000Z</published>
    <updated>2016-09-01T15:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道不觉，来杭州一个月零两天，入职一个月了，上个月1号入职的，还是挺好记的。来杭州一个的时间，还感觉是在梦里一样。没想到我就来到杭州了，从毕业前到毕业后的半个多月里，我都没有想到过我会回到南方。可能是之前感觉一切都太顺利了，自己成功地避开了一些弯路。其实那样对自己的成长来说是不利的，最后自己还是走上应该要走的路径，这可能就是来杭州的原因了。</p>
<p>杭州对我来说，虽然离家很近，三个多小时的车程就能到家，但给我的感觉还是挺陌生的，在这个城市没有什么亲人，没有什么朋友，没有什么同学。说同学的话也就公司有一个初中同学，还是她帮我内推的简历呢。北京待久了，习惯了那里的一切，认识的朋友也都在那里，感觉那里就是很好的。其实这样认为是不对的，年轻人要敢于适应新的环境，至少我现在发现了杭州的水要北京的水好很多很多很多，还有他们说的很多漂亮妹子（虽然我没有见过）。</p>
<p>还记得三月份的时候，去新浪面试。现在看来那个面试，那个时候的我真的是啥都不会，面试也很糟糕，记得当时胡波问郝明“你是不是把人家问怕了？”，后来胡波说了一句“年轻人这点儿就怕了？要敢于挑战”。在微博的三个月里，对自己的成长挺大的，给了一个机会，让我真正操练起PHP，还见识了靠谱的正超、士博、胡波、周老大……（太多了，不一一说了）还有那个张健，恭喜一下现在是超级奶爸。谢谢你们给了我很大的帮助，你们教的东西，现在好多用上了。嘿嘿</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>来杭州后，再也没有自己做过饭了，是因为自己变懒了吗？差不多也是，再这样下去，好像连熬粥都不会了，更别说烧什么红烧排骨，写到这儿都想吃排骨了😭早餐也不怎么吃了，过得挺没规律的，这个得批评一下自己。生活上其他也没什么了，基本没有什么大的变化，依然爱干净、有轻微洁癖。去超市也不怎么买零食，也就买水果和啤酒。</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>一个月时间，项目也熟悉得差不多了。对zend框架的学习还需要进一步深入（虽然我到现在都没有看文档就胡乱写起了，虽然不太喜欢这个框架，但还是有值得学习的东西）。对于业余时间，就写点前端的东西或者go语言的beego框架。总之，在技术上，要对自己要制定一个目标计划，不能尽瞎搞，什么都搞，什么都不精。工作上的其他就不说了。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>来杭州还狠心地买下了Dell的4K屏，虽然最近在吃土，写代码啥的真的很舒服，以至于我现在都后悔把显示器从公司搬回来，早知道就应该放在公司，我每天在公司用的显示器的时间比在家的时间多多了，工作日都要有一个很糟糕的切换——4K-&gt;1080P-&gt;4K。</p>
<p>用的笔记本是去年暑假自己买的13寸的中配MacBook Pro，到现在使用了一年多了，体验还好。最近发现电池像是不经用啊，貌似是跟我两三个月没关机有关。这个东西，早买早体验。</p>
<p>从北京到杭州托运行李，整理的行李的时候，发现之前的玩的硬件又好久没完了，这一个月里拿出来完了一次，有时间还是要多折腾，感觉这些东西还很有意思的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道不觉，来杭州一个月零两天，入职一个月了，上个月1号入职的，还是挺好记的。来杭州一个的时间，还感觉是在梦里一样。没想到我就来到杭州了，从毕业前到毕业后的半个多月里，我都没有想到过我会回到南方。可能是之前感觉一切都太顺利了，自己成功地避开了一些弯路。其实那样对自己的成长来
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我是这样理解PHP中trait</title>
    <link href="http://www.dyike.com/2016/08/25/php-trait/"/>
    <id>http://www.dyike.com/2016/08/25/php-trait/</id>
    <published>2016-08-25T07:50:22.000Z</published>
    <updated>2016-08-25T09:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>有这样一天，我要去找工作了，虽然我是从三月份开始接触PHP，到现在也就四五个月的样子，面试的时候【才接触三个多月】只要不是那种傻叉的面试官，基本不回你过深的PHP知识，也就是围绕你学过的C/C++啥的问问。</p>
<p>一共面了三家，三家都问了同样的一个问题：<code>说说你理解中的C++中的封装、继承、多态。</code> 这个问题吧，你怎么答都行，毕竟是你自己理解的。第一次吱吱呜呜说了一些，最后感觉自己都不知道自己在说什么。后来就自己总结，看到网上有一个从生物学的角度解释了一番，感觉还可以至少通俗易懂。后来又继续深入总结，在继承这一块，发现PHP虽然是单继承的语言，但还有一个比较特殊的东西，就是trait。这个翻译成中文还有比较奇葩的翻译——性状。一般我们都叫特性，或者直接叫trait。</p>
<p>可能好多人跟我一样有一个困惑：之前我接触PHP的时候，至少我在项目中没有发现使用过这个。后来也就是在毕设中，看到laravel的源码就使用了这个，那个时候也没有深入了解这个东西，看着像一个class。其实trait并不是一个很新的东西，在PHP5.4中加入的一种代码复用的语法，只是很少被关注而已。trait让PHP突破单继承的限制。</p>
<p>下面就看看一个简单的例子：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">trait</span> Hello </div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHello</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">trait</span> World </div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWorld</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"World"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Hello</span>, <span class="title">World</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHelloWorld</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$hw = <span class="keyword">new</span> HelloWorld();</div><div class="line">$hw-&gt;getHello();</div><div class="line">$hw-&gt;getWorld();</div><div class="line">$hw-&gt;sayHelloWorld();</div></pre></td></tr></table></figure>
<p>上面的例子可以看出，trait像一个class,可以在写各种属性和方法，然后通过use关键字声明列出trait。由于PHP是单继承的语言，如果你想要继承多个基类，这个时候就需要将这些基类组合，而且这种组合是层叠，最终的效果就是一个树状的结构，但有了trait，就可以随意组合，结构简单。是不是很方便？我们在编写自己的代码前，我们可以把一些属性进行合理的划分，放在一个trait，让代码片段复用，耦合性低，代码清晰可读。</p>
<p>当然了还有一些需要注意的是，什么叫代码合理拆分，而不是将三两个相同的代码片段放到trait中，而是根据自己的需求来决定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有这样一天，我要去找工作了，虽然我是从三月份开始接触PHP，到现在也就四五个月的样子，面试的时候【才接触三个多月】只要不是那种傻叉的面试官，基本不回你过深的PHP知识，也就是围绕你学过的C/C++啥的问问。&lt;/p&gt;
&lt;p&gt;一共面了三家，三家都问了同样的一个问题：&lt;code&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.dyike.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>聊聊PHP中的组件开发</title>
    <link href="http://www.dyike.com/2016/08/21/php-components-development/"/>
    <id>http://www.dyike.com/2016/08/21/php-components-development/</id>
    <published>2016-08-21T04:10:43.000Z</published>
    <updated>2016-08-21T08:44:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾经有这样一个故事：</p>
<blockquote>
<p>小李：超哥啊，我想要写个脚本去注册域名，按照汉字组词拼音来注册域名，发现市面上的汉字词组转拼音的工具不好用啊，都TM是个什么烂鬼。<br>超哥：恩，我去看了一下，确实都不好用啊。放心吧，这下我又可以造轮子了。<br>……<br>几天后，超哥什么话也没有说，向小李抛了一个包，你拿去用吧。</p>
</blockquote>
<p>当我们开始一个新的项目，首先我们需要考虑如何进行开发？<br>通常情况下，可能的方式有：</p>
<ul>
<li>手动创建</li>
<li>选择合适的框架(比如说Laravel)</li>
<li>组件式开发（Components Development）?</li>
</ul>
<p>靠，what is component？<br>严格地说，PHP组件就是一系列相关的类、接口和特性(trait)来解决某个特定的问题。组件中的类、接口和特性通常是放在同一个命名空间中。</p>
<p>可能你又会想，为什么我要使用PHP组件？这个问题问得不错！</p>
<p>我们使用组件开发是为了不重新实现已经实现了的功能，这样就可以把时间花在未实现功能上的开发。使用组件开发，可能是因为时代不一样了，现代的PHP已经很少使用庞大的框架，而是使用具有相互操作性的组件制定解决方案。有的时候，框架不一定能满足我们的需求，这个时候我们通常去自己开发一个新的功能，框架也很难集成第三方的库或者自定义的库，因为他们之间没有使用相同的接口。现在我们可以不受限于框架的束缚，如果想快速完成一个应用的开发，不使用组件自己去重新发明轮子，是不是有点傻呢？</p>
<p><strong>这里想说明的是框架和组件的一些对比。</strong></p>
<p>前面也提到了，框架虽然很强大，给我们提供了很多工具，但总会出现框架解决不了我们现有的需求问题，这个时候我们通常的做法就是自己开发功能，我们自定义的库又很难集成到框架中。一个好框架需要花费大量的投入时间来维护，我们在选择一个框架的时候要着眼框架的未来。（这么说，PHP组件是不是要比框架好呢？其实也不能这样说，PHP组件也有可能会终止开发的可能，尤其是只有一个核心开发者，万一坚持不下去呢？）</p>
<p>那是不是框架一无是处呢？其实框架并不是一无是处。像laravel这样的现代流行的PHP框架，代码很优雅。（虽然laravel没有使用PSR-2社区标准，但仍然是一个相当出色的框架）还有一些古老的框架也在向现代PHP转变，比如内容管理框架Drupal。之前的Drupal7还是使用过程式PHP代码编写，代码还在全局命名空间中，舍弃了现代PHP，支持陈旧的代码根基。但是到了Drupal8使用不同的PHP组件构建了一个现代化的内容管理平台，向现代PHP靠拢！这个对Drupal8点个赞（我入职第一周看Drupal7的项目，看了两天的代码，一脸的懵逼，后来放弃了！）。</p>
<p>在菜市场买菜，菜有好的跟不好的区分，PHP组件也是这样的。所以说，我们不能认为只要是PHP组件的开发都是好的！下面还是说说好的PHP组件长得是什么样子：</p>
<ul>
<li>PHP组件的代码小巧玲珑，短小精悍，解决某个问题却使用很少的代码。一个PHP组件可以是一个类，也可以是多个类，分别放在不同子命名的空间里。组件中类没有限定数量，根据自己的解决问题的需求。</li>
<li>PHP组件的功能单一。我们常说单一功能职责化，代码模块化。组件不是万能的，而是讲究术业有专攻，就是解决特定问题。</li>
<li>PHP组件之间的相互协调性，一个组件解决一个问题，一个项目解决多个问题。所以PHP组件代码放在自己的命名空间，防止与其他组件冲突。</li>
<li>PHP组件的测试良好，因为短小精悍，所以测试比较简单。最好本身提供测试，并且有充足的覆盖度。</li>
<li>有完善的文档，有完善的文档，有完善的文档。组件要让使用者，易于安装，理解和使用。所以说写一个好的README文档真的很重要。要想提高的自己开发的组件的知名度，首先，组件确实好；其次，就是提供相当nice的README文档【这个要去学一下】。还有源码中也要有详细的注释，为组件中的类、属性和方法添加行内容文档块，说明参数、返回值和可能抛出的异常。</li>
</ul>
<p>关于最后的选择，究竟我是选择使用组件式开发还是框架开发？</p>
<p>这个答案就是根据自己的需求来选择。其实现代的PHP框架就是在构建一些小型PHP组件上的一系列的约定。如果能通过一些PHP组件就能解决实际问题的项目就使用组件开发。组件开发能够让代码保持轻量级和灵活性，很容易将一个组件变成另外一个项目的组件。</p>
<p>如果是大型的项目，能够从框架的一些约定、标准和结构中受益的话，那就使用框架。因为框架能帮我们决定好多事情。但框架的灵活性较低一点，框架提供了一些拿来就用的工具，这样看来，框架也是一个很好的选择。</p>
<p>总之，根据自己的需求来选择适合自己的东西！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经有这样一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小李：超哥啊，我想要写个脚本去注册域名，按照汉字组词拼音来注册域名，发现市面上的汉字词组转拼音的工具不好用啊，都TM是个什么烂鬼。&lt;br&gt;超哥：恩，我去看了一下，确实都不好用啊。放心吧，这下我又可以造轮子了。&lt;b
    
    </summary>
    
    
      <category term="PHP组件" scheme="http://www.dyike.com/tags/PHP%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>GDB调试器的学习</title>
    <link href="http://www.dyike.com/2016/08/13/the-gdb-on-ubuntu/"/>
    <id>http://www.dyike.com/2016/08/13/the-gdb-on-ubuntu/</id>
    <published>2016-08-13T15:37:58.000Z</published>
    <updated>2016-08-14T06:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>关于GDB是什么，我就不多介绍了，这个不了解可以去谷歌一下。反正就是一个很强大的程序调试的工具。<br>为什么要学习这个？之前学习C语言不是在Linux下编程，后来发现之前折腾的跟现实还是有点出入的，所以现在有的时候还是挺懵逼的，每次都为调试代码这件事而苦恼。<br>还有就是学习Golang的都知道，go语言是支持GDB调试的。Go语言作为一门静态语言，当然可以通过Println之类的打印，但每次修改都需要重新编译。<br>这么看来，既然有这么一个强大的工具，有什么理由不掌握它呢？这里我从网上收集的，整理了一下，希望对你的学习也有帮助。</p>
</blockquote>
<p>GDB能做的事情如下几个方面：</p>
<ul>
<li>启动程序，根据自己的想法来运行程序</li>
<li>让程序在指定的断点出停住，断点可以是条件表达式</li>
<li>在断点处，查看上下文</li>
<li>动态的改变程序的执行环境</li>
</ul>
<p>先说说安装吧，在ubuntu下安装也不是一件很难的事，这个自行谷歌。最好尝试编译安装，国内下载可能非常非常的慢。我这里给一个我之前下载好的，放在<a href="https://pan.baidu.com/s/1qYtOIio" target="_blank" rel="external">百度云盘</a>中, <strong>密码: 3drw</strong></p>
<p>下面直接切入学习吧！</p>
<p>我们来编写一个简单的C程序：example.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sum[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> array1[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line">    <span class="keyword">int</span> array2[<span class="number">5</span>] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">    &#123;</div><div class="line">        sum[i] = add(array1[i], array2[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译：<code>gcc -g example.c -o example</code>,得到一个二进制文件example,执行<code>gdb example</code>命令进入调试状态。</p>
<blockquote>
<p>注意这里的编译命令，想想为什么要带上-g参数。如果没有-g参数，就看不到程序的函数名、变量名，所替代的全是运行时的内存地址。</p>
</blockquote>
<p>你将看到的是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@ityike:/vagrant/cproject/learngdb  # gdb example</div><div class="line">GNU gdb (GDB) 7.11.1</div><div class="line">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class="line">and &quot;show warranty&quot; for details.</div><div class="line">This GDB was configured as &quot;x86_64-pc-linux-gnu&quot;.</div><div class="line">Type &quot;show configuration&quot; for configuration details.</div><div class="line">For bug reporting instructions, please see:</div><div class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class="line">Find the GDB manual and other documentation resources online at:</div><div class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class="line">For help, type &quot;help&quot;.</div><div class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</div><div class="line">Reading symbols from example...done.</div><div class="line">(gdb)</div></pre></td></tr></table></figure>
<p>启动GDB的方法有：</p>
<ul>
<li><code>gdb &lt;program&gt;</code>      | program也就是你的执行文件，一般在当前目录下。</li>
<li><code>gdb &lt;program&gt; core</code>  | 用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件。</li>
<li><code>gdb &lt;program&gt; &lt;PID&gt;</code>  | 可以指定这个服务程序运行时的进程ID，gdb会自动attach上去，并调试他。（一般用于调试已经在运行的程序）</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="1、list【缩写：l】"><a href="#1、list【缩写：l】" class="headerlink" title="1、list【缩写：l】"></a>1、list【缩写：l】</h3><p> list命令后面可以带的参数：</p>
<ul>
<li><code>&lt;linenum&gt;</code> 行号</li>
<li><code>&lt;+offset&gt;</code> 当前行号的正偏移量</li>
<li><code>&lt;-offset&gt;</code> 当前行号的负偏移量</li>
<li><code>&lt;filename:linenum&gt;</code> 哪个文件的哪一行</li>
<li><code>&lt;function&gt;</code> 函数名</li>
<li><code>&lt;filename:function&gt;</code> 哪个文件的哪个函数</li>
<li><code>&lt;*address&gt;</code> 程序运行时语句在内存中的地址</li>
</ul>
<ul>
<li><code>list &lt;linenum&gt;</code>,显示第linenum行附近的源程序。</li>
<li><code>list &lt;function&gt;</code>,显示函数名为function函数上下的源程序。</li>
<li><code>list</code> ,显示当前行后面的源程序。</li>
<li><code>list -</code>,显示当前行前面的源程序。<br>一般默认显示行数是10，也可以设置自己的行数。</li>
<li><code>show listsize</code>,查看当前设置的list行数。</li>
<li><code>set listsize &lt;count&gt;</code>,设置自己的一次显示的行数。<br>其他常用的list命令：</li>
<li><code>list &lt;first&gt;,&lt;last&gt;</code>  显示从first到last行之间的代码。</li>
<li><code>list ,&lt;last&gt;</code>  显示从当前行到last行之间的代码。</li>
<li><code>list +</code>  往后显示源代码。</li>
</ul>
<p>看到这里，不难发现，list就是一个显示内容的命令，是不是没啥呢？其实GDB还提供了代码搜索的命令。</p>
<ul>
<li><code>forward-search &lt;regexp&gt;</code> | <code>search &lt;regexp&gt;</code> 向前搜索</li>
<li><code>reverse-search &lt;regexp&gt;</code> 全部搜索<blockquote>
<p><code>&lt;regexp&gt;</code>是正则表达式，你是不是跟我一样还要去学习正则表达式，没有啥怕的！</p>
</blockquote>
</li>
</ul>
<h3 id="2、run【缩写-r】"><a href="#2、run【缩写-r】" class="headerlink" title="2、run【缩写:r】"></a>2、run【缩写:r】</h3><p> 程序的运行，你有可能需要设置下面四方面的事:</p>
<ul>
<li>程序运行参数<blockquote>
<p><code>set args</code> 指定运行时的参数。（set args 1,2,3,4,5)<br><code>show args</code> 查看当前设置好的运行参数。</p>
</blockquote>
</li>
<li>运行环境<blockquote>
<p><code>show paths</code> 查看程序的运行路径。<br><code>path &lt;dir&gt;</code> 设定程序的运行路径。<br><code>set enviroment varname[=value]</code> 设置环境变量。（set env USER=ityike)<br><code>show enviroment [varname]</code> 查看环境变量。</p>
</blockquote>
</li>
<li>工作目录<blockquote>
<p><code>cd &lt;dir&gt;</code>相当于shell的cd命令。<br><code>pwd</code> 显示当前的所在目录。</p>
</blockquote>
</li>
<li>程序的输入输出<blockquote>
<p><code>info terminal</code> 显示你程序用到的终端的模式。<br>使用重定向控制程序输出。如：<code>run &gt; outfile</code><br>tty命令可以指写输入输出的终端设备。如：<code>tty /dev/ttyb</code></p>
</blockquote>
</li>
</ul>
<h3 id="3、break【缩写-b】"><a href="#3、break【缩写-b】" class="headerlink" title="3、break【缩写:b】"></a>3、break【缩写:b】</h3><ul>
<li><code>break &lt;function&gt;</code> 进入指定函数时停住。在C++中使用class::function或者function(type,type)格式来指定函数名。</li>
<li><code>break &lt;linenum&gt;</code> 在指定行停住。</li>
<li><code>break +offset / break -offset</code>在当前行号的前面或后面的offset行停住。</li>
<li><code>break filename:linenum</code>在filename文件的linenum行停住。</li>
<li><code>break filename:function</code>在filename文件的function函数的入口处停住。</li>
<li><code>break *address</code>在程序运行的内存地址处停住。</li>
<li><code>break</code>不带参数表示在下一条指令处停住。</li>
<li>在上面的带有参数的命令后面，还可以带有condition表示条件。<code>break ... if &lt;condition&gt;</code>，条件成立的时候停住。</li>
<li>查看断点，可使用info命令，如<code>info breakpoints [n]</code>、<code>info break [n]</code>（n表示断点号）。</li>
</ul>
<h3 id="4、单步命令"><a href="#4、单步命令" class="headerlink" title="4、单步命令"></a>4、单步命令</h3><p>next命令可以用于单步执行，但是next不会进入函数的内部，那怎么办呢？还有一个命令step【缩写:s】会进入函数的内部。</p>
<ul>
<li><code>step &lt;count&gt;</code> step后面不加count表示一条条地执行，加表示执行后面的count条指令，然后再停住。</li>
<li><code>next &lt;count&gt;</code>next后面不加count表示一条条地执行，加表示执行后面的count条指令，然后再停住。</li>
<li><code>set step-mode</code> </li>
</ul>
<blockquote>
<p>set step-mode on用于打开step-mode模式，这样，在进行单步跟踪时，程序不会因为没有debug信息而不停住，这个参数的设置可便于查看机器码。<br>set step-mod off用于关闭step-mode模式。</p>
</blockquote>
<ul>
<li><code>finish</code> 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li>
<li><code>until</code>【缩写:u】一直在循环体内执行单步，退不出来是一件令人烦恼的事情，until命令可以运行程序直到退出循环体。</li>
</ul>
<h3 id="5、continue【缩写-c】"><a href="#5、continue【缩写-c】" class="headerlink" title="5、continue【缩写:c】"></a>5、continue【缩写:c】</h3><p>当程序被停住后，可以使用continue恢复程序的运行知道程序结束，或达到下一个端点。</p>
<ul>
<li><code>continue [ignore-count]</code>  ignore-count表示忽略其后多少次断点。</li>
</ul>
<h3 id="6、print-【缩写-p】"><a href="#6、print-【缩写-p】" class="headerlink" title="6、print 【缩写:p】"></a>6、print 【缩写:p】</h3><ul>
<li><code>print &lt;expr&gt;</code>  <expr>是表达式，是被调试的程序中的表达式。</expr></li>
<li><p><code>print /&lt;f&gt; &lt;expr&gt;</code>   <f>是输出的格式，如果要把表达式按16进制的格式输出，那么就是/x。</f></p>
<blockquote>
<p>“@”是一个和数组有关的操作符，“::”指定一个在文件或是函数中的变量，“{<type>} <addr>”表示一个指向内存地址<addr>的类型为type的一个对象。</addr></addr></type></p>
<p>x 按十六进制格式显示变量。<br>d 按十进制格式显示变量。<br>u 按十六进制格式显示无符号整型。<br>o 按八进制格式显示变量。<br>t 按二进制格式显示变量。<br>a 按十六进制格式显示变量。<br>c 按字符格式显示变量。<br>f 按浮点数格式显示变量。</p>
</blockquote>
</li>
</ul>
<p>下面我们演示一下sum[]的数组变化过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">(gdb) b 14</div><div class="line">Breakpoint 1 at 0x400584: file example.c, line 14.</div><div class="line">(gdb) r</div><div class="line">Starting program: /vagrant/cproject/learngdb/example</div><div class="line"></div><div class="line">Breakpoint 1, main () at example.c:14</div><div class="line">14          sum[i] = add(array1[i], array2[i]);</div><div class="line">(gdb) p sum</div><div class="line">$1 = &#123;0, 0, 0, 0, 0&#125;</div><div class="line">(gdb) n</div><div class="line">12      for (i = 0; i &lt; 5; i++)</div><div class="line">(gdb) n</div><div class="line"></div><div class="line">Breakpoint 1, main () at example.c:14</div><div class="line">14          sum[i] = add(array1[i], array2[i]);</div><div class="line">(gdb) p sum</div><div class="line">$2 = &#123;3, 0, 0, 0, 0&#125;</div><div class="line">(gdb) n</div><div class="line">12      for (i = 0; i &lt; 5; i++)</div><div class="line">(gdb) p sum</div><div class="line">$3 = &#123;3, 6, 0, 0, 0&#125;</div><div class="line">(gdb) n</div><div class="line"></div><div class="line">Breakpoint 1, main () at example.c:14</div><div class="line">14          sum[i] = add(array1[i], array2[i]);</div><div class="line">(gdb) p sum</div><div class="line">$4 = &#123;3, 6, 0, 0, 0&#125;</div><div class="line">(gdb) n</div><div class="line">12      for (i = 0; i &lt; 5; i++)</div><div class="line">(gdb) p sum</div><div class="line">$5 = &#123;3, 6, 9, 0, 0&#125;</div></pre></td></tr></table></figure>
<p>如果要修改变量，如x的值，可使用命令：<code>print x=4</code></p>
<p>还有关于数组，有时需要查看一段连续内存空间的值，比如数组的一段，或者是动态分配的数据大小。可以使用“@”操作符。“@”左边是一个内存的地址的值，“@”右边是你查看内存的长度。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(gdb) p sum</div><div class="line">$7 = &#123;3, 6, 9, 12, 0&#125;</div><div class="line">(gdb) p *sum@5</div><div class="line">$8 = &#123;3, 6, 9, 12, 0&#125;</div><div class="line">(gdb) p *sum@2</div><div class="line">$9 = &#123;3, 6&#125;</div></pre></td></tr></table></figure>
<h3 id="7、watch命令"><a href="#7、watch命令" class="headerlink" title="7、watch命令"></a>7、watch命令</h3><p>watch一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。</p>
<ul>
<li><code>watch &lt;expr&gt;</code>：为表达式（变量）expr设置一个观察点。</li>
<li><code>rwatch &lt;expr&gt;</code>：当表达式（变量）expr被读时，停住程序。</li>
<li><code>awatch &lt;expr&gt;</code>：当表达式（变量）的值被读或被写时，停住程序。</li>
<li><code>info watchpoints</code>：列出当前所设置了的所有观察点。</li>
</ul>
<p>看看i在连续运行next时一旦发现i变化，i值就会显示出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(gdb) watch i</div><div class="line">Hardware watchpoint 2: i</div><div class="line">(gdb) next</div><div class="line"></div><div class="line">Hardware watchpoint 2: i</div><div class="line"></div><div class="line">Old value = 2</div><div class="line">New value = 3</div><div class="line">0x00000000004005ae in main () at example.c:12</div><div class="line">12      for (i = 0; i &lt; 5; i++)</div><div class="line">(gdb) n</div><div class="line"></div><div class="line">Breakpoint 1, main () at example.c:14</div><div class="line">14          sum[i] = add(array1[i], array2[i]);</div><div class="line">(gdb) n</div><div class="line">12      for (i = 0; i &lt; 5; i++)</div><div class="line">(gdb) n</div><div class="line"></div><div class="line">Hardware watchpoint 2: i</div><div class="line"></div><div class="line">Old value = 3</div><div class="line">New value = 4</div><div class="line">0x00000000004005ae in main () at example.c:12</div><div class="line">12      for (i = 0; i &lt; 5; i++)</div><div class="line">(gdb) info watchpoints</div><div class="line">Num     Type           Disp Enb Address            What</div><div class="line">2       hw watchpoint  keep y                      i</div><div class="line">    breakpoint already hit 2 times</div></pre></td></tr></table></figure>
<p><strong>下面这一部分结合上面的break命令</strong></p>
<h4 id="设置捕捉点（CatchPoint）"><a href="#设置捕捉点（CatchPoint）" class="headerlink" title="设置捕捉点（CatchPoint）"></a>设置捕捉点（CatchPoint）</h4><p>你可设置捕捉点来捕捉程序运行时的一些事件。如：载入共享库（动态链接库）或是C++的异常。</p>
<ul>
<li><p>catch <event></event></p>
<blockquote>
<p>当event发生时，停住程序。event可以是下面的内容：<br>1、throw 一个C++抛出的异常。（throw为关键字）<br>2、catch 一个C++捕捉到的异常。（catch为关键字）<br>3、exec 调用系统调用exec时。（exec为关键字，目前此功能只在HP-UX下有用）<br>4、fork 调用系统调用fork时。（fork为关键字，目前此功能只在HP-UX下有用）<br>5、vfork 调用系统调用vfork时。（vfork为关键字，目前此功能只在HP-UX下有用）<br>6、load 或 load <libname> 载入共享库（动态链接库）时。（load为关键字，目前此功能只在HP-UX下有用）<br>unload 或 unload <libname> 卸载共享库（动态链接库）时。（unload为关键字，目前此功能只在HP-UX下有用）</libname></libname></p>
</blockquote>
</li>
<li><p>tcatch <event><br>只设置一次捕捉点，当程序停住以后，该点被自动删除。</event></p>
</li>
</ul>
<h4 id="维护停止点"><a href="#维护停止点" class="headerlink" title="维护停止点"></a>维护停止点</h4><p>GDB中的停止点也就是断点、观察点、捕捉点。如果你觉得停止点没有用了，可以使delete、clear、disable、enable来进行维护。</p>
<ul>
<li><code>clear</code>    清除所有的已定义的停止点。</li>
<li><code>clear &lt;function&gt; /clear &lt;filename：function&gt;</code> 清除所有设置在函数上的停止点。</li>
<li><code>clear &lt;linenum&gt; / clear &lt;filename：linenum&gt;</code>  清除所有设置在指定行上的停止点。</li>
<li><code>delete [breakpoints] [range...]</code>   删除指定的断点，breakpoints为断点号。如果不指定断点号，则表示删除所有的断点。range 表示断点号的范围（如：3-7）。简写:d</li>
</ul>
<p>比删除更好的一种方法是disable停止点，disable了的停止点，GDB不会删除，当你还需要时，enable即可，就好像回收站一样。</p>
<ul>
<li><code>disable [breakpoints] [range...]</code> disable所指定的停止点，breakpoints为停止点号。如果什么都不指定，表示disable所有的停止点。简写:dis。</li>
<li><code>enable [breakpoints] [range...]</code> enable所指定的停止点，breakpoints为停止点号。</li>
<li><code>enable [breakpoints] once range...</code> enable所指定的停止点一次，当程序停止后，该停止点马上被GDB自动disable。</li>
<li><code>enable [breakpoints] delete range...</code> enable所指定的停止点一次，当程序停止后，该停止点马上被GDB自动删除。</li>
</ul>
<h4 id="停止条件的维护"><a href="#停止条件的维护" class="headerlink" title="停止条件的维护"></a>停止条件的维护</h4><p>前面我们说到的设置断点时，可以设置一个条件，当条件成立时，程序会自动停止。这个的条件的相关维护命令，为断点设置一个条件，使用if关键字，后面加上断点条件。条件设置好，我们可以使用condition命令来修改断点的条件。（只有break和watch命令支持if，catch目前暂不支持if）</p>
<ul>
<li><code>condition &lt;bnum&gt; &lt;expression&gt;</code> 修改断点号为bnum的停止条件为expression。</li>
<li><code>condition &lt;bnum&gt;</code> 清除断点号为bnum的停止条件。</li>
</ul>
<p>还有一个特殊的命令ignore</p>
<ul>
<li><code>ignore &lt;bnum&gt; &lt;count&gt;</code>  表示忽略断点号为bnum的停止条件count次。</li>
</ul>
<h4 id="为停止点设定运行的命令"><a href="#为停止点设定运行的命令" class="headerlink" title="为停止点设定运行的命令"></a>为停止点设定运行的命令</h4><p>为断点号bnum指写一个命令列表。当程序被该断点停住时，gdb会依次运行命令列表中的命令。格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">commands [bnum]</div><div class="line">... command-list ...</div><div class="line">end</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">break add if sum&gt;0</div><div class="line">commands</div><div class="line">printf &quot;sum is %d\n&quot;,sum</div><div class="line">continue</div><div class="line">end</div></pre></td></tr></table></figure>
<p>断点设置在函数add中，断点条件为sum》0，一旦sum的值大于0，就会自动打印sum的值，并继续运行程序。<br>如果要清除断点上的命令序列，那么只要简单的执行一下commands命令，并直接再打个end就行了。</p>
<h3 id="8、Signals"><a href="#8、Signals" class="headerlink" title="8、Signals"></a>8、Signals</h3><p>信号是一种软中断，是一种处理异步事件的方法。一般来说，操作系统都支持许多信号。UNIX定义了许多信号，比如SIGINT表示中断字符信号，也就是Ctrl+C的信号，SIGBUS表示硬件故障的信号；SIGCHLD表示子进程状态改变信号；SIGKILL表示终止程序运行的信号，等等。<br>GDB的handle命令可以完成这个调试，格式如下：<br><code>handle &lt;signal&gt; &lt;keywords...&gt;</code><br>信号<signal>可以以SIG开头或不以SIG开头，可以用定义一个要处理信号的范围（如：SIGIO- SIGKILL，表示处理从SIGIO信号到SIGKILL的信号，其中包括SIGIO，SIGIOT，SIGKILL三个信号），也可以使用关键字 all来标明要处理所有的信号。一旦被调试的程序接收到信号，运行程序马上会被GDB停住，以供调试。其<keywords>可以是以下几种关键字的一个或多个。</keywords></signal></p>
<ul>
<li><code>nostop</code> 当被调试的程序收到信号时，GDB不会停住程序的运行，但会打出消息告诉你收到这种信号。</li>
<li><code>stop</code> 当被调试的程序收到信号时，GDB会停住你的程序。</li>
<li><code>print</code> 当被调试的程序收到信号时，GDB会显示出一条信息。</li>
<li><code>noprint</code> 当被调试的程序收到信号时，GDB不会告诉你收到信号的信息。</li>
<li><code>pass | noignore</code> 当被调试的程序收到信号时，GDB不处理信号。这表示，GDB会把这个信号交给被调试程序处理。</li>
<li><code>nopass | ignore</code>   当被调试的程序收到信号时，GDB不会让被调试程序来处理这个信号。</li>
<li><code>info signals | info handle</code>  查看有哪些信号在被GDB检测中。</li>
</ul>
<h3 id="9、线程"><a href="#9、线程" class="headerlink" title="9、线程"></a>9、线程</h3><p>很多时间会涉及到多线程，那么断点是不是要打在所有的线程或者某个特定的线程上，GDB可以出色的完成这一项，这也是它强大的原因。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">break &lt;linespec&gt; thread &lt;threadno&gt;</div><div class="line">break &lt;linespec&gt; thread &lt;threadno&gt; if ...</div></pre></td></tr></table></figure>
<p>linespec指定了断点设置在的源程序的行号。threadno指定了线程的ID</p>
<blockquote>
<p>这个ID是GDB分配的，你可以通过<code>info threads</code>命令来查看正在运行程序中的线程信息.</p>
</blockquote>
<p>如果你不指定thread <threadno>则表示你的断点设在所有线程上面。还可以为某线程指定断点的条件。当你的程序被GDB停住时，所有的运行线程都会被停住。这方便你查看运行程序的总体情况。而在你恢复程序运行时，所有的线程也会被恢复运行。哪怕是主进程在被单步调试时。</threadno></p>
<h4 id="查看栈信息"><a href="#查看栈信息" class="headerlink" title="查看栈信息"></a>查看栈信息</h4><p>如果程序被停住了，此刻需要做的第一件事就是查看程序是在哪儿停住的。当你的程序调用了一个函数，函数的地址，参数，函数内部的局部变量都会被压入栈中。这时你又可以发现GDB的强大之处了。</p>
<ul>
<li><code>命令backtrace 【缩写:bt】</code>可以打印当前函数调用栈的所有信息。</li>
<li><code>bt &lt;n&gt;</code> n是一个正整数，表示只打印栈顶上n层的栈信息。</li>
<li><code>bt &lt;-n&gt;</code> -n表一个负整数，表示只打印栈底下n层的栈信息。<br>如果你要查看某一层的信息，你需要切换当前栈，一般来说，程序停止时，最顶层的栈就是当前栈，如果你需要查看栈下面层的详细信息，你需要做的就是切换当前栈。</li>
<li><code>frame &lt;n&gt; | f &lt;n&gt;</code> n是一个从0开始的整数，是栈中的层编号。比如：frame 0，表示栈顶，frame 1，表示栈的第二层。</li>
<li><code>up &lt;n&gt;</code>  表示向栈的上面移动n层，可以不打n，表示向上移动一层。</li>
<li><code>down &lt;n&gt;</code>  表示向栈的下面移动n层，可以不打n，表示向下移动一层。<br>上面这三条命令都会打印栈层的信息，如果不想打印其信息，可以使用这三条命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select-frame &lt;n&gt; 对应于 frame 命令。</div><div class="line">up-silently &lt;n&gt; 对应于 up 命令。</div><div class="line">down-silently &lt;n&gt; 对应于 down 命令。</div></pre></td></tr></table></figure>
<h3 id="10、info命令"><a href="#10、info命令" class="headerlink" title="10、info命令"></a>10、info命令</h3><p>info命令可以在调试时用来查看寄存器、断点、观察点和信号等信息。</p>
<ul>
<li><code>info registers</code> 查看除了浮点寄存器以外的寄存器</li>
<li><code>info all-registers</code> 查看所有寄存器，包括浮点寄存器</li>
<li><code>info registers &lt;regname ...&gt;</code>  查看所指定的寄存器</li>
<li><code>info break</code>  列出当前所设置的所有观察点 </li>
<li><code>info frame | info f</code> 打印出更为详细的当前栈层的信息，只不过，大多数都是运行时的内存地址。比如：函数地址，调用函数的地址，被调用函数的地址，目前的函数是由什么样的程序语言写成的、函数参数地址及值、局部变量的地址等等。</li>
<li><code>info args</code>    打印出当前函数的参数名及其值。</li>
<li><code>info locals</code>  打印出当前函数中所有局部变量及其值。</li>
<li><code>info catch</code>   打印出当前的函数中的异常处理信息。 </li>
<li><code>info source</code>  查看当前文件的程序语言。</li>
</ul>
<h3 id="11、jump命令"><a href="#11、jump命令" class="headerlink" title="11、jump命令"></a>11、jump命令</h3><p>一般情况程序都是顺序执行的，现在想要乱序执行怎么办呢？GDB也是可以修改程序的执行顺序，让程序随意跳转。</p>
<ul>
<li><code>jump &lt;linespec&gt;</code> 来指定下一条语句的运行点。<linespec>可以是文件的行号，可以是file:line格式，也可以是+num这种偏移量格式，表示下一条运行语句从哪里开始。</linespec></li>
<li><code>jump &lt;address&gt;</code> 这里的<address>是代码行的内存地址。</address></li>
</ul>
<blockquote>
<p>jump命令不会改变当前的程序栈中的内容，所以，如果使用jump从一个函数跳转到另一个函数，当跳转到的函数运行完返回，进行出栈操作时必然会发生错误，这可能导致意想不到的结果，所以最好只用jump在同一个函数中进行跳转。</p>
</blockquote>
<h3 id="12、强制函数返回-return"><a href="#12、强制函数返回-return" class="headerlink" title="12、强制函数返回 return"></a>12、强制函数返回 return</h3><p><code>return</code><br><code>return &lt;expression&gt;</code> 使用return命令取消当前函数的执行，并立即返回，如果指定了<expression>，那么该表达式的值会被认作函数的返回值。</expression></p>
<h3 id="13、强制调用某函数-call"><a href="#13、强制调用某函数-call" class="headerlink" title="13、强制调用某函数 call"></a>13、强制调用某函数 call</h3><ul>
<li><code>call &lt;expr&gt;</code> 表达式中可以一是函数，以此达到强制调用函数的目的，它会显示函数的返回值（如果函数返回值不是void）</li>
</ul>
<h3 id="14、set命令"><a href="#14、set命令" class="headerlink" title="14、set命令"></a>14、set命令</h3><ul>
<li><code>set print address on/off</code>   打开/关闭地址输出，当程序显示函数信息时，GDB会显出函数的参数地址。</li>
<li><code>set print array on/off</code>    打开/关闭 数组显示。</li>
<li><code>set print elements &lt;number-of-elements&gt;</code>   设置数组的长度，，如果长度太长，超过了就不再往下显示了。</li>
<li><code>set print null-stop &lt;on/off&gt;</code>  打开了这个选项，那么当显示字符串时，遇到结束符则停止显示。这个选项默认为off。</li>
<li><code>set print pretty on</code>   GDB显示结构体时会比较漂亮。</li>
<li><code>set print sevenbit-strings &lt;on/off&gt;</code>   设置字符显示，是否按“\nnn”的格式显示，如果打开，则字符串或字符数据按\nnn显示，如“\065”。</li>
<li><code>set print union &lt;on/off&gt;</code>   设置显示结构体时，是否显式其内的联合体数据。</li>
<li><code>set scheduler-locking off|on|step</code></li>
</ul>
<blockquote>
<p>off 不锁定任何线程，也就是所有线程都执行，这是默认值。<br>on 只有当前被调试程序会执行。<br>step 在单步的时候，除了next过一个函数的情况以外，只有当前线程会执行。</p>
</blockquote>
<ul>
<li>还有其他的。比如修改寄存器，修改内存</li>
</ul>
<h3 id="15、自动显示-display"><a href="#15、自动显示-display" class="headerlink" title="15、自动显示 display"></a>15、自动显示 display</h3><p>expr是一个表达式，fmt表示显示的格式，addr表示内存地址，当你用display设定好了一个或多个表达式后，只要你的程序被停下来，GDB会自动显示你所设置的这些表达式的值。</p>
<ul>
<li><code>display &lt;expr&gt;</code></li>
<li><code>display/&lt;fmt&gt; &lt;expr&gt;</code></li>
<li><code>display/&lt;fmt&gt; &lt;addr&gt;</code><br>格式i和s同样被display支持，一个非常有用的命令是：<code>display/i $pc</code><br>$pc是GDB的环境变量，表示着指令的地址，/i则表示输出格式为机器指令码，也就是汇编。于是当程序停下后，就会出现源代码和机器指令码相对应的情形，这是一个很有意思的功能。</li>
</ul>
<p>删除自动显示：</p>
<ul>
<li><code>disable display &lt;dnums...&gt;</code></li>
<li><code>enable display &lt;dnums...&gt;</code></li>
</ul>
<p>———end—-有错误欢迎指定!———–</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于GDB是什么，我就不多介绍了，这个不了解可以去谷歌一下。反正就是一个很强大的程序调试的工具。&lt;br&gt;为什么要学习这个？之前学习C语言不是在Linux下编程，后来发现之前折腾的跟现实还是有点出入的，所以现在有的时候还是挺懵逼的，每次都为调试代码这
    
    </summary>
    
    
      <category term="GDB,C,Golang" scheme="http://www.dyike.com/tags/GDB-C-Golang/"/>
    
  </entry>
  
  <entry>
    <title>面试总结分享</title>
    <link href="http://www.dyike.com/2016/07/31/mianshi-zongjie-fenxiang/"/>
    <id>http://www.dyike.com/2016/07/31/mianshi-zongjie-fenxiang/</id>
    <published>2016-07-31T12:23:59.000Z</published>
    <updated>2016-07-31T13:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>明天就要开始工作了，之前也没有什么面试的经验，我找工作也是通过社交性找的工作。在我找到PHP开发的这份工作之前我面过两三家，问过我的东西，当然了不会很全，但我每面一家都会做一个总结。希望这个能给找PHP开发的你带来些许帮助，或许一点卵用都没有。</p>
<p>我先说一下我自己接触PHP的经历吧，听说有这门世界上最好的语言是我在大二的时候，那个时候在网上找了一个教程把代码敲了一遍，做了一个简单的音乐盒子，能够播放管理音乐。后来正真接触PHP是我在今年三月份去渣浪微博实习的三个月里接触了这门语言，后来自己的毕设用Laravel框架做了一个在线学习的网站。总的来说，我真正接触这门语言时间也不算很长，很多东西还不是很深入，比如常用的函数啥我有的时候还需要查阅文档……下面还是来做总结吧：</p>
<p>学习PHP也就是那一套嘛——LNPM。也就是说Linux、Nginx、PHP、MySQL。</p>
<h2 id="Linux这一块"><a href="#Linux这一块" class="headerlink" title="Linux这一块"></a>Linux这一块</h2><p>我问的比较多的问题就是会不会写一些shell脚本，然后还有就是常用的命令，还有一些不常见的就是：</p>
<ul>
<li>读取文件的最后100行，并复制到的新的文件中 </li>
</ul>
<blockquote>
<p>tail -n 100 &gt;&gt;bbb.txt<br>这个里面稍微引申一下就是参数【-c】就是统计字节数</p>
</blockquote>
<ul>
<li>删除某个文件夹所有内容，要求删除后停止1秒</li>
</ul>
<blockquote>
<p>rm -r -f ./ &amp;&amp;  sleep 1<br>像这个里面需要注意的是句点，想想这个可不可以少掉。</p>
</blockquote>
<ul>
<li>find、grep的使用以及管道符“|”</li>
<li>等等其他的，最好系统学习一下Linux的操作，像鸟哥的私房菜。</li>
</ul>
<h2 id="PHP这一块"><a href="#PHP这一块" class="headerlink" title="PHP这一块"></a>PHP这一块</h2><p>这一块内容比较多，面试的话，也是各个面试官有自己的问法风格，这个时候需要察言观色。我就记录点我遇到的问题吧：</p>
<h4 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$a = <span class="keyword">array</span>();</div><div class="line">$a[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">$a[<span class="number">1</span>] = <span class="number">2</span>;</div><div class="line">$a[<span class="number">3</span>] = <span class="number">3</span>;</div><div class="line">$a[<span class="number">4</span>] = <span class="number">4</span>;</div><div class="line">$a[<span class="number">2</span>] = <span class="number">5</span>;</div><div class="line"><span class="keyword">foreach</span>($a <span class="keyword">as</span> $v)&#123;</div><div class="line">    <span class="keyword">echo</span> $v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请问上面的遍历输出的值是什么？</p>
<h4 id="问题2：（这个是简单的概括）"><a href="#问题2：（这个是简单的概括）" class="headerlink" title="问题2：（这个是简单的概括）"></a>问题2：（这个是简单的概括）</h4><ul>
<li>PHP的字符串翻转，不用自带的函数。</li>
<li>从一个数组中取出第一个元素有几种方式？分别是什么？</li>
<li>PHP中的传引用、传值、传地址。</li>
<li>单引号和双引号的区别。</li>
<li>PHP时间相关的函数，时间格式。</li>
<li>给定两个时间，计算相差的天数，diff</li>
<li>你使用的PHP版本是什么？如果是PHP7，你要知道一些PHP7的新特性。</li>
<li>PHP字符串截取含有中文的字符，且保证不乱码</li>
<li>想起了就再补充……（我打算在一年的时间把PHP常用的函数熟练掌握）</li>
</ul>
<h4 id="问题3：curl请求处理方式"><a href="#问题3：curl请求处理方式" class="headerlink" title="问题3：curl请求处理方式"></a>问题3：curl请求处理方式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//cURL的具体实现方法</span></div><div class="line">$url = <span class="string">"http://www.php.net/"</span>;</div><div class="line"><span class="comment">//1初始化</span></div><div class="line">$ch = curl_init();</div><div class="line"><span class="comment">//2设置选项,包括URL</span></div><div class="line">curl_setopt($ch,CURLOPT_URL,$url);</div><div class="line">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class="number">1</span>);   <span class="comment">//将curl_exec()获取的信息以文件流的形式返回</span></div><div class="line">                                              <span class="comment">//而不是输出</span></div><div class="line">                                              <span class="comment">//启用时将头文件的信息作为数据流输出</span></div><div class="line">curl_setopt($ch,CURLOPT_HEADER,<span class="number">1</span>);</div><div class="line"><span class="comment">//3执行并获取内容</span></div><div class="line">$output = curl_exec($ch);</div><div class="line"><span class="comment">//4释放cURL句柄</span></div><div class="line">curl_close($ch);</div><div class="line"><span class="keyword">echo</span> $output;</div></pre></td></tr></table></figure>
<p>我自己引申：有的时候偷懒用 file_get_content()函数，知道其中的区别。</p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>刚入门PHP，最好要知道简单的配置，知道每个配置选项的意思，能折腾就尽量折腾吧，最好是自己编译安装nginx。这个我现在也没有想说的，自己也整得不是很明白。哈哈哈</p>
<h2 id="MySQL方面"><a href="#MySQL方面" class="headerlink" title="MySQL方面"></a>MySQL方面</h2><p>这一块显然要问的，不问的话怎么叫面试呢？之前对这个挺害怕的，因为这一块是自己的弱项。总要去面对，害怕是没有用的。之前我被问过的。</p>
<ul>
<li>MySQL的架构是什么样的？也就是说三层架构，或者说两层，就看你怎么解释，我觉得这个问题就是想问一下你有没有深入了解过MySQL。</li>
<li>MySQL常用的存储引擎，知道他们之间的区别，也就是问InnoDB和MyISAM的区别，都是问常用，其他的了解了解。</li>
<li>关联表的查询join  on的用法 【注意哟：这儿有个坑，mysql不支持full join。这是我面试完后总结发现的】</li>
<li>sql查询的优化的方法，你需要知道从哪些方面入手。</li>
<li>MySQL使用的数据结构，其实就是在问B+/B- tree，深入了解MySQL还是需要的。</li>
<li>问来问去也差不多就是这些了，还有的话我再补充。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h4><ul>
<li>PHP常用的四个排序算法，冒泡、选择、插入、快排，其实问的比较多的就是冒泡和快排【不是你只掌握这两个应付面试】，如果还有兴趣，归并排序。反正这几个我都自己撸了一遍，现在也常拿出来看看，毕竟不用的话就容易忘记。</li>
<li>队列和栈的区别，怎么初始化他们，然后他们的操作要熟悉，常问的就是插入和删除操作。还有会问双向链表。</li>
</ul>
<blockquote>
<p>双链表结点中有两个指针prior和next，分别指向其前驱结点和后继结点.</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> DNode &#123;  <span class="comment">//定义双链表结点类型</span></div><div class="line">    ElemType data;  <span class="comment">//数据域</span></div><div class="line">    <span class="keyword">struct</span> DNode *prior, *next;  <span class="comment">//前驱和后继指针</span></div><div class="line">&#125;DNode, *DLinklist;</div></pre></td></tr></table></figure>
<ul>
<li>还有数据结构的树那一块，没被问太多，估计是我这一块薄弱吧，面试官就合理避开。【这样的面试官才是好面试，至少他了解你的基础，也有傻×的面试官，明明你表现了不会，他还一个人自high问个不停】</li>
</ul>
<h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><ul>
<li>线程和进程的区别</li>
<li>还有忘了，以后想起了补充</li>
</ul>
<h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><ul>
<li>各种状态码都要熟悉，常问的301、304和500</li>
<li>tcp和udp的区别</li>
<li>TCP/IP的协议还是要清楚</li>
<li>三次握手，四次挥手的状态分析</li>
<li>SESSION和COOKIE的区别，多台web服务器怎么共享SESSION？【经典问题，每家必问】</li>
</ul>
<h4 id="有事没事的时候还是要学好C语言"><a href="#有事没事的时候还是要学好C语言" class="headerlink" title="有事没事的时候还是要学好C语言"></a>有事没事的时候还是要学好C语言</h4><p>目前我被问到：</p>
<ul>
<li>文件读取</li>
<li>字符串复制strcp是怎么实现的，用自己的方式实现字符串的复制。</li>
<li>函数参数有两个以上的，参数入栈的顺序</li>
<li>想起再补充。</li>
</ul>
<h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><p>面向对象编程的封装、继承和多态</p>
<blockquote>
<p>1、面向对象是一种基于结构分析的、以数据为中心的程序设计思想。面向过程语言是一种基于功能分析的、以算法为中心的程序设计方法。<br>2、封装就是隐藏对象实现的细节，在外界通过公共的方法来访问。比如，在C语言中，我们需要关注每一个细节、过程，在面向对象的程序语言中，我们就不用关注每个对象的细节，只要关注功能的实现就行，根据提供好的接口，然后面向接口编程。<br>3、继承就是子类能够继承父类的公共属性和方法，无法继承父类的私有属性和方法。在java|C#|PHP等面向对象语言中，是不允许多重继承的。【但php trait是个例外，可以多层继承】<br>4、多态，就是同一个接口，对不同的实例而执行不同的操作。同属一个基类的不同派生类也可以有自己不同于其他类的属性和方法。</p>
</blockquote>
<p>以上就是我面了三家的一些总结，有的很简单我就没有总结出来，有的总结出来对你来说也许很简单。最后我现在工作在杭州，欢迎面基！也希望大牛们求带！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明天就要开始工作了，之前也没有什么面试的经验，我找工作也是通过社交性找的工作。在我找到PHP开发的这份工作之前我面过两三家，问过我的东西，当然了不会很全，但我每面一家都会做一个总结。希望这个能给找PHP开发的你带来些许帮助，或许一点卵用都没有。&lt;/p&gt;
&lt;p&gt;我先说一下我自
    
    </summary>
    
    
      <category term="面试，PHP" scheme="http://www.dyike.com/tags/%E9%9D%A2%E8%AF%95%EF%BC%8CPHP/"/>
    
  </entry>
  
  <entry>
    <title>高性能JavaScript学习笔记——DOM编程</title>
    <link href="http://www.dyike.com/2016/06/30/learn-dom-scripting-of-js/"/>
    <id>http://www.dyike.com/2016/06/30/learn-dom-scripting-of-js/</id>
    <published>2016-06-30T06:07:19.000Z</published>
    <updated>2016-06-30T14:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>DOM是文档对象模型，用于操作XML和HTML文档的程序接口。DOM是JavaScript编码中一个重要的部分。</p>
<h3 id="DOM的修改与访问"><a href="#DOM的修改与访问" class="headerlink" title="DOM的修改与访问"></a>DOM的修改与访问</h3><p>访问DOM元素是具有代价的，修改DOM元素的代价更大，因为它会导致浏览器重新计算页面的几何变化。</p>
<p>最快的情况就是在循环中修改或者访问元素，尤其对HTML元素结合循环操作。先看一个简单的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerHTMLLoop</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> count = <span class="number">0</span>; count &lt; <span class="number">100</span> ; count++) &#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'here'</span>).innerHTML += <span class="string">'a'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数就是修改页面元素的内容，那性能问题出现在哪儿？每次循环迭代，该元素都会被访问两次：第一次是读取innerHTML的属性值，第二次就是重写它。</p>
<p>那换一种局部变量的存储方式修改其中的内容，在循环体结束之后一次性写入，是不是效率要更高效呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerHTMLLoop2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> content = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> count = <span class="number">0</span>; count &lt; <span class="number">100</span> ; count++) &#123;</div><div class="line">        content += <span class="string">'a'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'here'</span>).innerHTML += content;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显修改后的代码运行速度更快了。访问DOM的次数越多，代码的运行速度越慢。因此，常用的经验法则：减少访问DOM的次数，把运行尽量留在ECMAScript处理。</p>
<h3 id="innerHTML-对比-DOM方法"><a href="#innerHTML-对比-DOM方法" class="headerlink" title="innerHTML 对比 DOM方法"></a>innerHTML 对比 DOM方法</h3><p>首先带着一个问题：修改页面区域的最佳方案是用非标准但支持良好的innerHTML属性？还是只用类似document.createElement()的原声DOM方法？如果不考虑web标准，他们的性能都差不多，但是在出开最新版的webkit内核之外的浏览器中，innerHTML会更快一点。<br>这儿省略一个例子：两种方式创建一个1000行的表格。</p>
<ul>
<li>合并HTML字符，然后更新DOM的innerHTML属性。</li>
<li>只用标准的DOM方法，比如document.createElement()和document.createTextNode().</li>
</ul>
<p>最终的结果怎么样？最终选择哪种方法取决你的用户使用的浏览器以及你的编码习惯。如果你的需求是在一个对性能有着苛刻的要求操作中更新一大段HTML，推荐使用innerHTML，在大部分的浏览器中，这个运行速度都要快！</p>
<h3 id="节点克隆"><a href="#节点克隆" class="headerlink" title="节点克隆"></a>节点克隆</h3><p>使用DOM方法是更新页面的内容的另外一个途径就是克隆已有元素。就是使用element.cloneNode()(element表示已有节点)替代document.createElement().<br>看个例子吧：用element.cloneNode()生成表格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tableClonedDOM</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> i,table,thead,tbody,tr,th,td,a,ul,li,</div><div class="line">        oth = <span class="built_in">document</span>.createElement(<span class="string">'th'</span>),</div><div class="line">        otd = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>),</div><div class="line">        otr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>),</div><div class="line">        oa = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>),</div><div class="line">        oli = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>),</div><div class="line">        oul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</div><div class="line">    tbody = <span class="built_in">document</span>.createElement(<span class="string">'tbody'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</div><div class="line">        tr = otr.cloneNode(<span class="literal">false</span>);</div><div class="line">        td = otd.cloneNode(<span class="literal">false</span>);</div><div class="line">        td.appendChild(<span class="built_in">document</span>.createTextNode((i % <span class="number">2</span>) ? <span class="string">'yes'</span> : <span class="string">'no'</span>));</div><div class="line">        tr.appendChild(td);</div><div class="line">        td = otd.cloneNode(<span class="literal">false</span>);</div><div class="line">        td.appendChild(<span class="built_in">document</span>.createTextNode(i));</div><div class="line">        tr.appendChile(td);</div><div class="line">        td = otd.cloneNode(<span class="literal">false</span>);</div><div class="line">        td.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'my name is #'</span> + i));</div><div class="line">        tr.appendChild(td);</div><div class="line">        <span class="comment">// ....</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ....</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HTML集合"><a href="#HTML集合" class="headerlink" title="HTML集合"></a>HTML集合</h3><p>html集合是包含了DOM节点引用的类数组对象。以下方法就是返回值就是一个集合：</p>
<ul>
<li>document.getElementsByName()</li>
<li>document.getElementsByClassName()</li>
<li>document.getElementsByTagName()<br>下面的属性同样是返回HTML集合：</li>
<li>document.images 页面所有img元素</li>
<li>document.links 页面所有a元素</li>
<li>document.forms 页面所有表单元素</li>
<li>document.forms[0].elements 页面中第一个表单所有的字段</li>
</ul>
<h4 id="访问集合元素使用局部变量"><a href="#访问集合元素使用局部变量" class="headerlink" title="访问集合元素使用局部变量"></a>访问集合元素使用局部变量</h4><p>对于任何类型的DOM访问，需要多次访问同一个DOM属性或者方法需要多次访问，最好使用一个局部变量缓存此成员，前面文章开头也谈到了原因了。遍历一个集合是，第一个优化原则是把集合存储到局部变量中，并把length存储在循环外部，然后使用局部变量替代这些需要多次读取的元素。<br>看例子是最好的学习方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//较慢</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">collectionGlobal</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> coll = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>),</div><div class="line">        len = coll.length,</div><div class="line">        name = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> count = <span class="number">0</span>; count &lt; len; count++)&#123;</div><div class="line">        name = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[count].nodeName;</div><div class="line">        name = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[count].nodeType;</div><div class="line">        name = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[count].tagName;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//较快</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">collectionLocal</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> coll = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>),</div><div class="line">        len = coll.length,</div><div class="line">        name = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> count = <span class="number">0</span>; count&lt;len; count++)&#123;</div><div class="line">        name = coll[count].nodeName;</div><div class="line">        name = coll[count].nodeType;</div><div class="line">        name = coll[count].tagName;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//最快</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">collectionNodeLocal</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> coll = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>),</div><div class="line">        len = coll.length,</div><div class="line">        name = <span class="string">''</span>,</div><div class="line">        el = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> count = <span class="number">0</span>; count&lt;len; count++)&#123;</div><div class="line">        el = coll[count];</div><div class="line">        name = el.nodeName;</div><div class="line">        name = el.nodeType;</div><div class="line">        name = el.tagName;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="遍历DOM"><a href="#遍历DOM" class="headerlink" title="遍历DOM"></a>遍历DOM</h3><h4 id="获取DOM元素"><a href="#获取DOM元素" class="headerlink" title="获取DOM元素"></a>获取DOM元素</h4><p>有这样一个场景就是你需要从某一个DOM元素开始，操作周围的元素，或者递归查找所有子节点。可以使用childNodes得到元素集合，或者用nextSibling来获取每个相邻的元素。</p>
<p>两个等价的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testNextSibling</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'mydiv'</span>),</div><div class="line">        ch = el.firstChild,</div><div class="line">        name = <span class="string">''</span>;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        name = ch.nodeName;</div><div class="line">    &#125;<span class="keyword">while</span>(ch = ch.nextSibling);</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testChildNodes</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'mydiv'</span>),</div><div class="line">        ch = el.childNodes,</div><div class="line">        len = el.length,</div><div class="line">        name = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> count = <span class="number">0</span>; count&lt;len; count++)&#123;</div><div class="line">        name = ch[count].nodeName;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//需要注意的是childNodes是一个元素集合，在循环体中，缓存length属性以避免在每次迭代中更新。</span></div></pre></td></tr></table></figure>
<h4 id="节点元素"><a href="#节点元素" class="headerlink" title="节点元素"></a>节点元素</h4><p>DOM元素属性诸如，childNodes,firstChild和nextSibling并不区分元素节点和其他类型节点，比如注释和文本节点。在某些情况下只需要访问元素节点，因此在循环中很可能需要检查返回节点类型并过滤掉非元素节点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DOM是文档对象模型，用于操作XML和HTML文档的程序接口。DOM是JavaScript编码中一个重要的部分。&lt;/p&gt;
&lt;h3 id=&quot;DOM的修改与访问&quot;&gt;&lt;a href=&quot;#DOM的修改与访问&quot; class=&quot;headerlink&quot; title=&quot;DOM的修改与访问&quot;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.dyike.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>高性能JavaScript的学习笔记——加载和执行</title>
    <link href="http://www.dyike.com/2016/06/29/learn-loading-and-execution-of-js/"/>
    <id>http://www.dyike.com/2016/06/29/learn-loading-and-execution-of-js/</id>
    <published>2016-06-29T04:00:55.000Z</published>
    <updated>2016-06-29T08:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个web开发者来说，在开发的过程需要考虑性能的问题。JavaScript在浏览器中的性能，可能就是可用性的问题，这个问题因JavaScript的阻塞特性变得复杂，说白了就是当浏览器在执行JavaScript的时候，浏览器不能同时做其他的事情。js的执行时间越长，浏览器的响应时间就会越长。&lt;script&gt;标签出现的时候，就会让页面等待脚本的解析和执行，不管JavaScript的代码是内嵌还是包含的在外链的文件中，页面的下载和渲染都必须要停下来等待脚本的执行完毕。</p>
<h3 id="脚本的位置"><a href="#脚本的位置" class="headerlink" title="脚本的位置"></a>脚本的位置</h3><p>在HTML4规范中指出&lt;script&gt;标签可以放在html文档中&lt;head&gt;或&lt;body&gt;的标签中。通常情况是这样的：&lt;script&gt;标签用来加载出现在&lt;head&gt;中外链的js文件，挨着&lt;link&gt;标签用来加载外部的css文件或其他页面元信息。</p>
<p>先看下面的一段代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js学习例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"file1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"file2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"file3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的代码需要注意的是：在浏览器解析到&lt;body&gt;标签之前，不会渲染页面的其他的内容。所以说把脚本放在页面的顶部会导致明显的延迟，表现出页面空白，没有内容信息。执行过程差不多就是这样的：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/jslearning/jslearning1.png" alt="js执行过程"></p>
<p>从上图可以清晰的看到，第一个js文件下载的同时阻塞了页面其他文件的下载，以此类推！</p>
<p>面对这样的原因，可以适当的调整js代码的位置是不是更合理呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js学习例子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"file1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"file2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"file3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>推荐是将所有的&lt;script&gt;标签尽可能的放在&lt;body&gt;标签的底部，尽量减少对整个页面的影响。记住：优化JavaScript代码的首要规范：将代码放在底部！</p>
<p>上面谈到的原因也差不多明白，在组织脚本的时候，我们尽量减少&lt;script&gt;标签的个数，这不仅仅是针对外链，内嵌也是一样的。考虑HTTP请求会带来额外的性能开销，下载一个100kb的文件要比下载4个25kb的文件更快！这样我们就应该考虑文件的合并，可以通过离线打包工具等等，后面继续讲！</p>
<p>下面说明两种脚本：</p>
<ul>
<li>无阻塞的脚本就是，在页面加载完成后才加载JavaScript代码，专业的就是说法就是在window对象的load事件触发后再下载脚本。</li>
<li>延迟的脚本就是，在&lt;script&gt;标签中定义了一个扩展属性：defer。致命本元素所含的脚本不会修改DOM，这样代码就会安全的延迟执行。</li>
</ul>
<p>需要说明的是：目前主流的浏览器已经实现对defer属性的支持，W3C的html5规范，当且仅当src属性声明时生效。</p>
<p>还有一种无阻塞加载脚本的方法是使用XMLHttpRequest(XHR)对象获取脚本并注入页面中。先创建一个XHR对象，然后用它去下载JavaScript文件，最后通过创建动态的&lt;script&gt;元素将代码注入到页面中。代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.open(<span class="string">"get"</span>,<span class="string">"file1.js"</span>,<span class="literal">true</span>);</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.status &gt;=<span class="number">200</span> &amp;&amp; xhr.status &lt;<span class="number">300</span> || xhr.status == <span class="number">304</span>)&#123;</div><div class="line">            <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">            script.type = <span class="string">"text/javascript"</span>;</div><div class="line">            script.text = xhr.responseText;</div><div class="line">            <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">xhr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>发送一个GET请求获取file1.js文件。事件处理函数onreadystatechange检查readyState的状态是否为1，同时还要校验http的状态码，如果满足条件，创建一个&lt;script&gt;元素。这样做的好处就是，可以先去下载一个JavaScript代码，但可以先不去执行。但也有局限性：JavaScript文件必须与请求的页面处与相同的域，也就是说不能从CDN上下载JavaScript文件，这种方法不用于大型web应用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个web开发者来说，在开发的过程需要考虑性能的问题。JavaScript在浏览器中的性能，可能就是可用性的问题，这个问题因JavaScript的阻塞特性变得复杂，说白了就是当浏览器在执行JavaScript的时候，浏览器不能同时做其他的事情。js的执行时间越长，浏览器
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.dyike.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2016年，我的毕业感想</title>
    <link href="http://www.dyike.com/2016/06/26/the-feelings-of-graduation-2016/"/>
    <id>http://www.dyike.com/2016/06/26/the-feelings-of-graduation-2016/</id>
    <published>2016-06-26T02:33:13.000Z</published>
    <updated>2016-06-26T05:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>去年的我写了一篇文章谈了谈了自己对毕业的感想，由于去年我才大三没有真正的那种体验，唯一的感觉就是数字的冲击——2015年毕业生746万，然而今年就不一样了，自己毕业了，面临的事很多——要找工作，要租房，要自己养活自己……</p>
<p>前一段时间在微博上看到了一篇关于2016年毕业生薪酬数据的报告，我不知道这个数据的来源是不是多么的准确，但至少能说明一些问题，从数据的冲击上来看确实可以看出现在大学毕业生的就业现状——相当残酷！很庆幸的是在前100名看到了我的母校。其实对于一个刚毕业的学生来说，先是找到一份适合自己的工作，再去关注薪资，然后让自己在工作逐渐成长起来。就算给你一份很丰厚的薪资，然而你没有那个实力，你敢去吗？谁刚毕业都有一段那些能让自己难忘的经历。</p>
<p>然后我就顺着去查了一下2016年的毕业生人数，只能这样说：“2016年高校毕业生人数创历史新高——765万！”足足比去年多了19万，再加上现今的经济下行的压力相当大，各种行业都不是很景气，所以说就业压力还是很艰难的。</p>
<h3 id="选择就业"><a href="#选择就业" class="headerlink" title="选择就业"></a>选择就业</h3><p>在大学四年，能想到自己的就业问题，也差不多在大三吧。在大三的时候，大家都会有自己的目标去奋斗了，有的准备考研，有的在外面找实习就干起来，有的选择自主创业，还有选择考公、事业单位……这当中有成功也有失败，我还记得当初自己也选择了考研，考研可以说是对就业的一种短暂的逃避，是可以这样说，但不完全是！现在想想挺后悔当初的考研的决定，当初也就是在同学面前随口一说我要考研，然后就入坑了，说白了就是自己都不知道自己考研的真正目的是什么。其实后悔也是没有用的，毕竟都是自己选择的路，再怎么难走含着泪也要走完，至少那一年里，也是一种尝试一种体验。为什么说我自己后悔当初的决定的呢？在今年三月份我找到了一份比较体面的实习，在这三个月的实习里，我的感触就是三个月很充实，学到的东西很多，对自己很有帮助，性价比很高，如果去年一年我就开始去找一份实习，可能对自己的长进更有帮助，当然这过程可能会走一些弯路，但也是值得吧！</p>
<h3 id="选择行业"><a href="#选择行业" class="headerlink" title="选择行业"></a>选择行业</h3><p>这个要回到当初大学填报志愿的时候，那个时候就听说互联网IT行业比较吃香，而且赚的也比较多，所以当初在选择专业上就选择了一个跟IT有关的专业。确实是这样的，互联网这几年特别火，不管什么样的创业项目都要跟互联网挂钩就显得特别高大上，我也不明白为什么那些创业者都这样。在大学四年，从大二的时候就开始折腾互联网相关的实习参与创业团队，后来明白自己不能这样胡来，自己终究要靠手艺吃饭，大三的时候开始拾起书本搞学习准备考研，毕业之后要靠技术养活自己，带着一颗“有了技术到哪儿都有饭吃”的心态。好像折腾得并不怎么样，可能是自己的姿势不对吧，反正跟实习的经历比起来，不真正地参与到项目中的折腾都是瞎折腾。很庆幸自己选择的行业，现在也算能养活自己了，一切都慢慢来吧！与此同时，互联网行业的压力也不小，再加之自己是搞技术的，需要保持学习的热情。</p>
<h3 id="选择城市"><a href="#选择城市" class="headerlink" title="选择城市"></a>选择城市</h3><p>毕业了，大家的选择也是不一样的，有人选择回家，有人选择留下，还有人选择去别的地方。四年前，高考结束填报志愿的时候，第一选择的不是选择专业、学校，而是选择城市，在我眼里，选择城市还是挺重要的，而且当初自己的选择也没有错，自己选择到大城市，让自己的眼界变得开阔了，自己认识朋友也变多了。大城市有大城市的好处，比如就业机会多、交流接触的人群也多元化，但是大城市也有一些问题，比如住房、交通的压力，消费水平也高，虽然赚得多但消费也高。反正现在先这样吧，刚毕业要把目光放得长远一点，更应该着眼于平台而不是薪资，找一份工作能养活自己，然后让自己积累更多的经验。</p>
<h3 id="大学四年"><a href="#大学四年" class="headerlink" title="大学四年"></a>大学四年</h3><p>大学四年过的真的很快，一眨眼的功夫，四年就结束了。坦率地讲，这四年真的没有的学到什么，在大学也没指望学校能教给我什么，其实四年能学会怎么玩就行了，让自己的情商不降低就行！四年应该给你的不是你会解微分方程、会计算行列式，而是你要学会思考问题的方式，这个很重要的。。。四年结束了，我发现自己还不是很会“玩”！！！</p>
<h3 id="对即将走上工作的自己说的几句话"><a href="#对即将走上工作的自己说的几句话" class="headerlink" title="对即将走上工作的自己说的几句话"></a>对即将走上工作的自己说的几句话</h3><ul>
<li>年轻的时候应该多折腾折腾，想做的事，在考虑清楚了之后就去做，不要拖！</li>
<li>对自己接下来的工作的三年五年作一个详细计划，不能盲目地工作，那样会失去动力的，清楚自己应该做什么不应该做什么。</li>
<li>锻炼身体哟！锻炼身体哟！锻炼身体哟！身体是自己的，金钱换不回身体！</li>
<li>该认认真真诚诚恳恳地撩个妹子咯！</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年的我写了一篇文章谈了谈了自己对毕业的感想，由于去年我才大三没有真正的那种体验，唯一的感觉就是数字的冲击——2015年毕业生746万，然而今年就不一样了，自己毕业了，面临的事很多——要找工作，要租房，要自己养活自己……&lt;/p&gt;
&lt;p&gt;前一段时间在微博上看到了一篇关于201
    
    </summary>
    
    
      <category term="毕业" scheme="http://www.dyike.com/tags/%E6%AF%95%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>在这三个月里，我学到的那些事</title>
    <link href="http://www.dyike.com/2016/06/23/write-after-practice/"/>
    <id>http://www.dyike.com/2016/06/23/write-after-practice/</id>
    <published>2016-06-23T14:32:59.000Z</published>
    <updated>2016-06-23T15:47:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>三个月的时间过得真的很快，还记得过完年，在家过完寒假来北京第一件事就是面试，记得当初面试完的感觉真的很差，确实很差，知道自己是多么的差劲。那天下午去中关村面试，当初在理想国际八层的大厅，面我的是那个郝明，一个高高的哥儿，一听话音就是东北人了。面试整个过程也比较简单粗暴，没有想象中那样先做题，然后再问你一些乱七八糟的事情。还记得面试的前一天晚上，我还把之前自己的笔记翻了翻，看了看一些关于数据库的东西，偏偏没有面试的时候没触及到。面试就问了三个问题，也就是问那种考问题解决思路的，在我看来这就是考逻辑的东西。</p>
<p>后来，我认识的大牛，现在也算是我的师哥，过来问了我一些简单的问题，问了我常见的网络请求都有哪些？当初我也就知道get、post，还有啥也就不知道了。结果师哥一口气说了七八个，我一听那叫一脸的懵逼。</p>
<p>那天晚上回来了，我跟胡大大说了两句：“感觉今天的面试很糟糕”。后来也没说啥，只是回复了两句“你先来实习吧”、“年轻人要有信心”差不多就是这样的。等了半个月，终于在三个月前的今天，来到了sina weibo实习了，开启了我的实习生活。</p>
<p>刚来的那会儿，真的是啥也不会，都是从别人的代码中学习，第一天先被安排有人带。人带这事，其实就是让你迁出项目的代码，然后自己看看代码，有啥不懂的就问。顶多开始的时候交代一下怎么看代码。差不多这样看了两个礼拜，也就给你两礼拜，那个时候还是有点压力的，如果真的两个礼拜之后还是啥都不会的话，这张脸真的没地方放啊！这个时候也只能靠自己勤问，多动手！在大公司有一个好处就是，遇到问题可以随便问各种人，前期真的是没人觉得你是最笨的，大家都乐于帮助你，所以这个时候的脸皮真的不能薄。现在想想，脸皮厚起来，差不多就是从这个时候开始的吧。</p>
<p>说几点吧：<br>第一：我实习呆的组，版本控制用的svn，之前自己折腾的时候是git，自己也有一点git的基础，当用svn的，各种不习惯，感觉这个东西怎么这么难用，甚至有想法“为什么现在还用svn这个东西，难道就不能换git吗？”第一天就直说了，没接触过svn了。没一会儿功夫，带我的weiwei就找一篇blog链接给我，让我先学习，认认真真看完顶多一个小时，再稍微理解一下操作一下，差不多两个小时，后来发现这个东西不是很难，而且跟git也有很多相似的，所以说用起来更不是什么难事。就一个感想：稍微耐点心，认真一下，没有什么很难的。<br>第二：关于工具的使用，选择一个适合自己的工具真的特别重要，常说工欲善其事必先利其器，差不多就是这个道理吧，之前没有什么实战的项目，即便有点，也都是野路子，可以说不规范，从这个时候我也逐渐开始规范自己。比如编辑器的配置使用、网络请求的调试工具等等，有了前人的知道，这些都让我在今后的开发之路少走了一些弯路。成长或许就是这样一点一点地积累起来的。</p>
<p>实习完全是看自己，因为这段时间有很多时间是属于自己。差不多实习快一个月的时候，需求不是很多，确实有很多时间是空闲，这个时候就开始忙于自己的毕设。毕设的项目就是基于laravel开发的在线学习的平台。之前也没有接触过laravel框架，可能环境配置，安装laravel就让我卡住了一段时间。虽然有师哥，但师哥好像还挺严厉的，每每咨询的时候，都会先说“你的问题是什么”然后再抛出一句“请看文档”。现在毕设都已经做完，回想这些事，都是非常在理的。说实话，自己的毕设做了差不多有两个礼拜吧，那段时间里，自己文档真的看得不是很仔细，为什么这么说呢？因为我的问题在文档里都有过解释说明。后来我总结的原因是，看文档的时候一定要动手试试里面的例子。这个很重要，有的东西过一遍大脑，过两天就可能忘了。反正在毕设的路上，师哥帮忙解决了几个坑，其次就是跟我苦口婆心的说了n遍的“看文档”。【写到这里，万一师哥看到了，会怎样呢？】</p>
<p>接触最重要的一个项目就是项目sla了，这个我最熟练的应该是前台部分，后台的那个现在还不是很熟练。这个环节，搞得最多的就是写接口了。然后是前端用js处理渲染，这里，这里，这里，我有一个硬伤，这个过程写js真的写很痛苦，主要是自己的真的还不是很熟悉js，自己写的那点东西，我自己都看不下去了。现如今一直在补，还有关于php代码的事，这里有一个我自己不知道是好还是不好的东西：由于项目比较庞大，有一些业务处理是相似的，然后我在我开发的过程中总结了一部分，就一言不合封装函数。后来也发一个问题，过了两个周自己再去看的时候似乎又有点看不懂自己当初是怎么写的，不知道我这样是好还是不好。关于php数组处理的，我还特地整理了一篇文章，今后需要多消化学习。</p>
<p>今后要做的事，以及对自己的规划：<br>第一：学习跟产品沟通好，首先知道是干什么的，需要把话想清楚说清楚，这样跟产品沟通起来才会顺利。这是今后工作中必不可少的一关。<br>第二：继续巩固php的基础知识，常用的两百多个函数一定要做到滚瓜烂熟，知道参数的意义。【听说有的时候面试，就奇葩的问，某某函数的第二个参数是干嘛的，能不能去掉】、【还有有的时候参数的顺序不同，然后出现的结果就不一样了，自己还找不出原因】<br>第三：学好C语言吧，基础！<br>第四：查漏补缺，比如js的学习，http协议、tcp/Ip协议的详解，还有就是linux的操作<br>第五：有事没事多学习，多写blog，然后专注撩(专)妹！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三个月的时间过得真的很快，还记得过完年，在家过完寒假来北京第一件事就是面试，记得当初面试完的感觉真的很差，确实很差，知道自己是多么的差劲。那天下午去中关村面试，当初在理想国际八层的大厅，面我的是那个郝明，一个高高的哥儿，一听话音就是东北人了。面试整个过程也比较简单粗暴，没有
    
    </summary>
    
    
      <category term="实习" scheme="http://www.dyike.com/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PHP数组的“合并相加”</title>
    <link href="http://www.dyike.com/2016/06/08/php-array-combine-with-array/"/>
    <id>http://www.dyike.com/2016/06/08/php-array-combine-with-array/</id>
    <published>2016-06-08T02:31:24.000Z</published>
    <updated>2016-06-08T09:02:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>情况大概是这样的，一个刚入门PHP程序狗，某天接到了一个需求，需要从两个表里获取数据，这两张表的字段是相同的，但记录的类型不同，现在需要将两个类型合并了，不建新表。大概就是把相同字段值的记录中其他某个字段值相加这个意思(可能说的不清楚看下面的例子就知道是什么意思了)。当时第一个反应就是写sql语句，拼啊拼，也不是不行，写了一个sql语句，等了n分钟重要出结果，要是这样就上线了，那不得被吊起来打。可能还是自己的原因，自己数据库学得特别烂，不会写sql语句，只能在原有的程序上，照葫芦画瓢儿，各自从每个表中去取数据，然后处理数组。也不知道这样是不是可行的。</p>
</blockquote>
<h3 id="情形一：先来一个简单的相加，很简单的"><a href="#情形一：先来一个简单的相加，很简单的" class="headerlink" title="情形一：先来一个简单的相加，很简单的"></a>情形一：先来一个简单的相加，很简单的</h3><p>数组1:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span> =&gt; <span class="number">20</span>,</div><div class="line">    <span class="string">'1'</span> =&gt; <span class="number">10</span>,</div><div class="line">    <span class="string">'2'</span> =&gt; <span class="number">23</span>,</div><div class="line">    <span class="string">'3'</span> =&gt; <span class="number">12</span>,</div><div class="line">)</div></pre></td></tr></table></figure>
<p>数组2：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span> =&gt; <span class="number">10</span>,</div><div class="line">    <span class="string">'1'</span> =&gt; <span class="number">5</span>,</div><div class="line">    <span class="string">'2'</span> =&gt; <span class="number">12</span>,</div><div class="line">)</div></pre></td></tr></table></figure>
<p>应该得到的结果是：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span> =&gt; <span class="number">30</span>,</div><div class="line">    <span class="string">'1'</span> =&gt; <span class="number">15</span>,</div><div class="line">    <span class="string">'2'</span> =&gt; <span class="number">35</span>,</div><div class="line">    <span class="string">'3'</span> =&gt; <span class="number">12</span>,</div><div class="line">)</div></pre></td></tr></table></figure>
<p>处理函数如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_add</span><span class="params">($arr1,$arr2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//根据键名获取两个数组的交集</span></div><div class="line">    $arr=array_intersect_key($arr1, $arr2);</div><div class="line">    <span class="comment">//遍历第二个数组，如果键名不存在与第一个数组，将数组元素增加到第一个数组</span></div><div class="line">    <span class="keyword">foreach</span>($arr2 <span class="keyword">as</span> $key =&gt; $value)&#123;</div><div class="line">        <span class="keyword">if</span>(!array_key_exists($key, $arr1))&#123;</div><div class="line">            $arr1[$key] = $value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//计算键名相同的数组元素的和，并且替换原数组中相同键名所对应的元素值</span></div><div class="line">    <span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key =&gt; $value)&#123;</div><div class="line">        $arr1[$key] = $arr1[$key] + $arr2[$key];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回相加后的数组</span></div><div class="line">    <span class="keyword">return</span> $arr1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="情形二：比如有有两个数组"><a href="#情形二：比如有有两个数组" class="headerlink" title="情形二：比如有有两个数组"></a>情形二：比如有有两个数组</h3><p>数组1:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">10</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">20</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">15</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>数组2:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">8</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">12</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">14</span></div><div class="line">    )，</div><div class="line">    <span class="string">'3'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">3</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">11</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>按照要求后，需要得到结果是：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">18</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">32</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">29</span></div><div class="line">    )，</div><div class="line">    <span class="string">'3'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">3</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">11</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>处理函数：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayAddArray</span><span class="params">($res1,$res2,$key1,$key2)</span></span></div><div class="line">&#123;</div><div class="line">    $re0 = array_merge($res1,$res2);</div><div class="line">    $tmp = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">foreach</span>($re0 <span class="keyword">as</span> $k =&gt; $v)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">isset</span>($tmp[$v[$key1]]) ? $tmp[$v[$key1]] += $v[$key2] : $tmp[$v[$key1]] = $v[$key2];</div><div class="line">    &#125;</div><div class="line">    $result = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">foreach</span>($tmp <span class="keyword">as</span> $k =&gt; $v)&#123;</div><div class="line">        $result[] = <span class="keyword">array</span>($key1=&gt;$k,$key2=&gt;$v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="情形三：处理两个数组"><a href="#情形三：处理两个数组" class="headerlink" title="情形三：处理两个数组"></a>情形三：处理两个数组</h3><p>数组1:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">10</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.1</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">20</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.2</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">15</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.12</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>数组2:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">8</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.1</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">12</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.12</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">14</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.2</span></div><div class="line">    ),</div><div class="line">    <span class="string">'3'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">3</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">11</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.12</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>按照要求后，需要得到结果是：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">18</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.2</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">32</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.32</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">29</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.32</span></div><div class="line">    ),</div><div class="line">    <span class="string">'3'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">3</span>,</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">11</span>,</div><div class="line">        <span class="string">'ttt'</span>=&gt;<span class="number">0.12</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>处理函数：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//里面的每个数组有三个键名，两个二维数组合并相加不再添加新的键名</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayAdd3ArrayWithoutNewKey</span><span class="params">($re1,$re2,$key1,$key2,$key3)</span></span></div><div class="line">&#123;</div><div class="line">    $res1 = arrayAddArray($re1, $re2, $key1, $key2);<span class="comment">//先将$key2键名对应的值相加,用到上面的函数。</span></div><div class="line">    $res2 = arrayAddArray($re1, $re2, $key1, $key3); <span class="comment">//将$key3键名对应的值相加</span></div><div class="line">    $res = array_merge($res1, $res2);</div><div class="line">    $tmp = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span> ($res <span class="keyword">as</span> $v) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($tmp[$v[$key1]])) &#123;</div><div class="line">            <span class="keyword">empty</span>($tmp[$v[$key1]][$key2]) &amp;&amp; $tmp[$v[$key1]][$key2] = <span class="keyword">isset</span>($v[$key2]) ? $v[$key2] : <span class="number">0</span>;</div><div class="line">            <span class="keyword">empty</span>($tmp[$v[$key1]][$key3]) &amp;&amp; $tmp[$v[$key1]][$key3] = <span class="keyword">isset</span>($v[$key3]) ? $v[$key3] : <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $tmp[$v[$key1]] = <span class="keyword">array</span>(</div><div class="line">                $key1 =&gt; $v[$key1],</div><div class="line">                $key2 =&gt; <span class="keyword">isset</span>($v[$key2]) ? $v[$key2] : <span class="number">0</span>,</div><div class="line">                $key3 =&gt; <span class="keyword">isset</span>($v[$key3]) ? $v[$key3] : <span class="number">0</span>,</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="情形四-还是两个二维数组需要合并相加，可能现在是这样的-需要增加一个键计算新的值："><a href="#情形四-还是两个二维数组需要合并相加，可能现在是这样的-需要增加一个键计算新的值：" class="headerlink" title="情形四:还是两个二维数组需要合并相加，可能现在是这样的,需要增加一个键计算新的值："></a>情形四:还是两个二维数组需要合并相加，可能现在是这样的,需要增加一个键计算新的值：</h3><p>数组1:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'hits1'</span>=&gt;<span class="number">10</span>,</div><div class="line">        <span class="string">'hits2'</span>=&gt;<span class="number">15</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'hits1'</span>=&gt;<span class="number">20</span>,</div><div class="line">        <span class="string">'hits2'</span>=&gt;<span class="number">12</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'hits1'</span>=&gt;<span class="number">15</span>,</div><div class="line">        <span class="string">'hits2'</span>=&gt;<span class="number">18</span></div><div class="line">    )           </div><div class="line">);</div></pre></td></tr></table></figure>
<p>数组2:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'hits1'</span>=&gt;<span class="number">8</span>,</div><div class="line">        <span class="string">'hits2'</span>=&gt;<span class="number">12</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'hits1'</span>=&gt;<span class="number">12</span>,</div><div class="line">        <span class="string">'hits2'</span>=&gt;<span class="number">22</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'hits1'</span>=&gt;<span class="number">14</span>,</div><div class="line">        <span class="string">'hits2'</span>=&gt;<span class="number">12</span></div><div class="line">    ),</div><div class="line">    <span class="string">'3'</span>=&gt;<span class="keyword">array</span></div><div class="line">    (</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">3</span>,</div><div class="line">        <span class="string">'hits1'</span>=&gt;<span class="number">11</span>,</div><div class="line">        <span class="string">'hits2'</span>=&gt;<span class="number">10</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>按照要求后，需要得到结果是：(原先rate比率是在sql语句中就算好的，现在要得到正确的比率，就得先将’hits1’相加，’hits2’相加，相加完了再计算)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span></div><div class="line">(</div><div class="line">    <span class="string">'0'</span> =&gt; <span class="keyword">array</span></div><div class="line">        (</div><div class="line">            <span class="string">'type'</span>=&gt;<span class="number">0</span></div><div class="line">            <span class="string">'hits1'</span>=&gt;<span class="number">18</span></div><div class="line">            <span class="string">'hits2'</span>=&gt;<span class="number">27</span></div><div class="line">            <span class="string">'rate'</span>=&gt;<span class="number">0.67</span></div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="string">'1'</span> =&gt; <span class="keyword">array</span></div><div class="line">        (</div><div class="line">            <span class="string">'type'</span>=&gt;<span class="number">1</span></div><div class="line">            <span class="string">'hits1'</span>=&gt;<span class="number">32</span></div><div class="line">            <span class="string">'hits2'</span>=&gt;<span class="number">34</span></div><div class="line">            <span class="string">'rate'</span>=&gt;<span class="number">0.94</span></div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="string">'2'</span> =&gt; <span class="keyword">array</span></div><div class="line">        (</div><div class="line">            <span class="string">'type'</span>=&gt;<span class="number">2</span></div><div class="line">            <span class="string">'hits1'</span>=&gt;<span class="number">29</span></div><div class="line">            <span class="string">'hits2'</span>=&gt;<span class="number">30</span></div><div class="line">            <span class="string">'rate'</span>=&gt;<span class="number">0.97</span></div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="string">'3'</span> =&gt; <span class="keyword">array</span></div><div class="line">        (</div><div class="line">            <span class="string">'type'</span>=&gt;<span class="number">3</span></div><div class="line">            <span class="string">'hits1'</span>=&gt;<span class="number">5</span></div><div class="line">            <span class="string">'hits2'</span>=&gt;<span class="number">10</span></div><div class="line">            <span class="string">'rate'</span>=&gt;<span class="number">0.50</span></div><div class="line">        )</div><div class="line"></div><div class="line">)</div></pre></td></tr></table></figure>
<p>处理函数：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayAdd3Array</span><span class="params">($re1,$re2,$key1,$key2,$key3,$key4)</span></span></div><div class="line">&#123;</div><div class="line">    $res1 = arrayAddArray($re1, $re2, $key1, $key2);</div><div class="line">    $res2 = arrayAddArray($re1, $re2, $key1, $key3);</div><div class="line"></div><div class="line">    $res = array_merge($res1, $res2);</div><div class="line">    $tmp = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span> ($res <span class="keyword">as</span> $v) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($tmp[$v[$key1]])) &#123;</div><div class="line">            <span class="keyword">empty</span>($tmp[$v[$key1]][$key2]) &amp;&amp; $tmp[$v[$key1]][$key2] = <span class="keyword">isset</span>($v[$key2]) ? $v[$key2] : <span class="number">0</span>;</div><div class="line">            <span class="keyword">empty</span>($tmp[$v[$key1]][$key3]) &amp;&amp; $tmp[$v[$key1]][$key3] = <span class="keyword">isset</span>($v[$key3]) ? $v[$key3] : <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>($tmp[$v[$key1]][$key2]) &amp;&amp; !<span class="keyword">empty</span>($tmp[$v[$key1]][$key3]))&#123;</div><div class="line">                $tmp[$v[$key1]][$key4] = $tmp[$v[$key1]][$key2]/$tmp[$v[$key1]][$key3];  <span class="comment">//计算新添加的键值</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $tmp[$v[$key1]] = <span class="keyword">array</span>(</div><div class="line">                $key1 =&gt; $v[$key1],</div><div class="line">                $key2 =&gt; <span class="keyword">isset</span>($v[$key2]) ? $v[$key2] : <span class="number">0</span>,</div><div class="line">                $key3 =&gt; <span class="keyword">isset</span>($v[$key3]) ? $v[$key3] : <span class="number">0</span>,</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="情形五：变着花样玩，现在是根据两个键判断然后在合并"><a href="#情形五：变着花样玩，现在是根据两个键判断然后在合并" class="headerlink" title="情形五：变着花样玩，现在是根据两个键判断然后在合并"></a>情形五：变着花样玩，现在是根据两个键判断然后在合并</h3><p>数组一：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'500'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">12</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'502'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">30</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'404'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">10</span></div><div class="line">    )，</div><div class="line">    <span class="string">'3'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">3</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'400'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">14</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>数组二：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'500'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">15</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'502'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">4</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'404'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">20</span></div><div class="line">    )，</div><div class="line">    <span class="string">'3'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">3</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'400'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">14</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>应该得到的结果：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span>(</div><div class="line">    <span class="string">'0'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">0</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'500'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">27</span></div><div class="line">    ),</div><div class="line">    <span class="string">'1'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">1</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'502'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">34</span></div><div class="line">    ),</div><div class="line">    <span class="string">'2'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">2</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'404'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">30</span></div><div class="line">    )，</div><div class="line">    <span class="string">'3'</span>=&gt;<span class="keyword">array</span>(</div><div class="line">        <span class="string">'type'</span>=&gt;<span class="number">3</span>,</div><div class="line">        <span class="string">'num'</span>=&gt;<span class="string">'400'</span>，</div><div class="line">        <span class="string">'hits'</span>=&gt;<span class="number">28</span></div><div class="line">    )</div><div class="line">)</div></pre></td></tr></table></figure>
<p>处理函数：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayAddArrayByTwoKeys</span><span class="params">($re1,$re2,$key1,$key2,$key3)</span></span></div><div class="line">&#123;</div><div class="line">    $tmp = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">foreach</span> ($re1 <span class="keyword">as</span> $v1) &#123;</div><div class="line">        $tmp[$v1[$key1]][$v1[$key2]] = $v1[$key3];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span>($re2 <span class="keyword">as</span> $v2) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($tmp[$v2[$key1]][$v2[$key2]])) &#123;</div><div class="line">            $tmp[$v2[$key1]][$v2[$key2]] += $v2[$key3];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span>($tmp <span class="keyword">as</span> $kk =&gt; $vv)&#123;</div><div class="line">        $n = count($vv);</div><div class="line">        $k = array_keys($vv);</div><div class="line">        $v = array_values($vv);</div><div class="line">        <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$n;$i++)&#123;</div><div class="line">            $result[] = <span class="keyword">array</span>(</div><div class="line">                $key1=&gt;$kk,</div><div class="line">                $key2=&gt;$k[$i],</div><div class="line">                $key3=&gt;$v[$i],</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>差不多就是这几个情形比较多吧，第一次就这么处理了数组，给我留下深深地印象。主要自己把玩数组不是很溜，不管了，先记录一点吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;情况大概是这样的，一个刚入门PHP程序狗，某天接到了一个需求，需要从两个表里获取数据，这两张表的字段是相同的，但记录的类型不同，现在需要将两个类型合并了，不建新表。大概就是把相同字段值的记录中其他某个字段值相加这个意思(可能说的不清楚看下面的例子就
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.dyike.com/tags/PHP/"/>
    
  </entry>
  
</feed>
