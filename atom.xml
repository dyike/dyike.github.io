<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一刻笔记</title>
  <subtitle>带着一颗变态的、积极的心走向未来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dyike.com/"/>
  <updated>2017-11-12T14:33:40.549Z</updated>
  <id>http://www.dyike.com/</id>
  
  <author>
    <name>ityike</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生成Charts图片，并发送Charts图片邮件</title>
    <link href="http://www.dyike.com/2017/10/16/charts-and-text-email-tutorial/"/>
    <id>http://www.dyike.com/2017/10/16/charts-and-text-email-tutorial/</id>
    <published>2017-10-16T14:33:37.000Z</published>
    <updated>2017-11-12T14:33:40.549Z</updated>
    
    <content type="html"><![CDATA[<p>CTEmail(Charts and Text Email)是一个发送带有图片的邮件的小工具，这个图片是邮件内容中显示，不是添加在附件中，这个脚本实现的比较简单粗暴，不管长相丑陋，只要能解决实际问题就行。</p>
<h2 id="为什么有CTEmail"><a href="#为什么有CTEmail" class="headerlink" title="为什么有CTEmail?"></a>为什么有CTEmail?</h2><ul>
<li>没有一个不懒的程序员，做啥都想着写个脚本跑一下，跑个脚本抢月饼，跑个脚本…能用脚本的干嘛不用脚本。每天的数据报表需要一个邮件脚本发送。</li>
<li>对接了各大厂商，每天每周每月都会往来邮件。报表用图表的形式更简单直观的反馈数据，为什么我们不在邮件中使用图表。</li>
<li>各大厂商的邮件中图表都是小姐姐手动制作，手动发出%&gt;_&lt;%，为什么不跑一个脚本。</li>
<li>如果解决上面的问题，是不是解放了小手。1) 用数据生成图表，2) 将图表拼接到邮件中发出。</li>
</ul>
<p>这个小工具的初衷，解决实际问题还是很重要的。</p>
<h2 id="哪些人需要这个工具？"><a href="#哪些人需要这个工具？" class="headerlink" title="哪些人需要这个工具？"></a>哪些人需要这个工具？</h2><ul>
<li>产品同学，图表是展示数据的最佳实践！</li>
<li>运营同学，图表是展示报表的最佳实践！</li>
<li>技术同学，为了继续懒下去！</li>
<li>…零编程基础的同学都能使用【只要会科学上网就能解决一切】</li>
</ul>
<p>说这些都是没用，那就跟来做一下吧。<br>项目托管在github上，地址：<a href="https://github.com/dyike/CTEmail" target="_blank" rel="external">dyike/CTEmail</a>。记得来star哟！！！</p>
<h2 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h2><p>首先，稍微知道怎么操作Python，像我这种不会写代码都能操作，你一定也可以。其次是到<a href="https://plot.ly/python/getting-started/" target="_blank" rel="external">Plotly</a>——这是一个可视化数据的工具有点类似于HighCharts，不过支持多种语言，很强大了。先熟悉一下， 然后注册一个账号，后面会用到。本文着重数据生成图表图片。邮件服务配置查看<code>README</code></p>
<h3 id="1st-Step："><a href="#1st-Step：" class="headerlink" title="1st Step："></a>1st Step：</h3><p>将项目clone下来，熟悉项目的结构，里面不到两百行代码，简单粗暴。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:dyike/CTEmail.git</div></pre></td></tr></table></figure>
<p>在<code>send.py</code>文件中配置自己的邮箱账号，密码，邮件标题，邮件模板路径和发送到的邮箱。</p>
<p>邮件模板的默认路径是<code>./content/</code>，会自动读取该路径下的html文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> ctemail <span class="keyword">import</span> CTEmail</div><div class="line">e = CTEmail(<span class="string">'Your email acount'</span>, <span class="string">'Your password'</span>)</div><div class="line"><span class="comment"># " ./content/ 邮件文件的路径 "</span></div><div class="line">e.send_email(<span class="string">'Test Email Title'</span>, <span class="string">'./content/'</span>, [<span class="string">'i@ityike.com'</span>])</div></pre></td></tr></table></figure>
<p>默认是配置QQ的STMP发送服务（stmp.qq.com）,端口是25。你也可以配置163.gmail等等，在初始化CTEmail()配置相应的配置即可。</p>
<h3 id="2nd-Step"><a href="#2nd-Step" class="headerlink" title="2nd Step:"></a>2nd Step:</h3><p>项目中提供了一个默认的模板，你可以根据你的实际需求定制的模板，<code>content</code>文件夹下面还有图片资源，我们生成的图表的图片资源也是在该文件夹下面。</p>
<p>需要注意的是，html文件中，将img标签用<email_img>给包了一层，这样只是为了能够方便Python解析，替换。【ps：这里可以了解一下Python发送图片邮件的实现，将图片cid替换进来】<a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832745198026a685614e7462fb57dbf733cc9f3ad000" target="_blank" rel="external">参考廖雪峰老师的教程</a> 这里你可以不Care这些事。</email_img></p>
<p>模板中需要注意的一点：也是非常重要的一点就是：html中多个<email_img>标签需要换行。不换行就无法正确解析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a&gt;&lt;EMAIL_IMG&gt;&lt;img src=&quot;image1.png&quot;&gt;&lt;/EMAIL_IMG&gt;&lt;/a&gt;</div><div class="line">&lt;a&gt;&lt;EMAIL_IMG&gt;&lt;img src=&quot;image2.png&quot;&gt;&lt;/EMAIL_IMG&gt;&lt;/a&gt;</div></pre></td></tr></table></figure></email_img></p>
<h3 id="3th-Step"><a href="#3th-Step" class="headerlink" title="3th Step:"></a>3th Step:</h3><p>快要结束了，本文的却重点来了，不要慌，也很简单。就是使用Plotly，关于使用离线（本地）模式还是在线模式，看自己实际需求。我这里说在线的。因为我用的是定时脚本，我只能调用在线的API生成图片保存到本地<code>content</code>文件夹下面。</p>
<ul>
<li><p>安装Plotly</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install plotly</div></pre></td></tr></table></figure>
</li>
<li><p><code>get_img.py</code>文件,文件名可以重命名，里面需要的配置你的认证信息credentials，信息在<code>https://plot.ly/settings/api</code>中查看。有两种方式：第一种如下<br>设置username和api_key。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> plotly </div><div class="line">plotly.tools.set_credentials_file(username=<span class="string">'DemoAccount'</span>, api_key=<span class="string">'lr1c37zw81'</span>)</div></pre></td></tr></table></figure>
<p>或者在安装完成后，在<code>~/.plotly/.credentials</code>文件中配置你的账号信息。<br>看到的信息大致如下：修改对应的即可。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"DemoAccount"</span>,</div><div class="line">    <span class="attr">"stream_ids"</span>: [<span class="string">"ylosqsyet5"</span>, <span class="string">"h2ct8btk1s"</span>, <span class="string">"oxz4fm883b"</span>],</div><div class="line">    <span class="attr">"api_key"</span>: <span class="string">"lr1c37zw81"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>继续<code>get_img.py</code>文件<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</div><div class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</div><div class="line"></div><div class="line">py.sign_in(<span class="string">'Your account'</span>, <span class="string">'API Token'</span>) <span class="comment"># 注意：这里是plotly网站的用户名和密码</span></div><div class="line"></div><div class="line">trace = go.Bar(x=[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], y= [<span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>])</div><div class="line">data = [trace]</div><div class="line">layout = go.Layout(title=<span class="string">'A Simple Plot'</span>, width=<span class="number">800</span>, height=<span class="number">640</span>)</div><div class="line">fig = go.Figure(data=data, layout=layout)</div><div class="line"><span class="comment"># 保存图片文件的路径</span></div><div class="line">py.image.save_as(fig, filename=<span class="string">'./content/image1.png'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 拼接模板文件</span></div><div class="line">template = <span class="string">'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;body&gt;'</span> + <span class="string">"\n"</span> + <span class="string">'&lt;a&gt;&lt;EMAIL_IMG&gt;&lt;img src="image1.png"&gt;&lt;/EMAIL_IMG&gt;&lt;/a&gt;'</span> + <span class="string">"\n"</span> + <span class="string">'&lt;a&gt;&lt;EMAIL_IMG&gt;&lt;img src="image2.png"&gt;&lt;/EMAIL_IMG&gt;&lt;/a&gt;'</span> + <span class="string">"\n"</span> + <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> template</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意上面拼接模板文件内容的时候使用了换行符<code>&quot;\n&quot;</code>,为什么这样使用，一简单粗暴，二为了引起重视【这里有坑】。</p>
<ul>
<li><p>执行上面的脚本文件<code>python get_img.py &gt; ./content/index.html</code> 这样就可以将模板文件写入到<code>content</code>目录下的<code>index.html</code></p>
</li>
<li><p>执行<code>python send.py</code>邮件就可以发送邮件，将上面的几个命令写入到shell脚本中,更新方便快捷。</p>
</li>
<li><p>其他图表的生成也可以参考官方文档的介绍。</p>
</li>
</ul>
<h3 id="4th-Enjoy-it"><a href="#4th-Enjoy-it" class="headerlink" title="4th Enjoy it!!!"></a>4th Enjoy it!!!</h3><p>放在最后的不是不重要，解决实际问题才是更重要，欢迎来<a href="https://github.com/dyike/CTEmail" target="_blank" rel="external">CTEmail</a>Star！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CTEmail(Charts and Text Email)是一个发送带有图片的邮件的小工具，这个图片是邮件内容中显示，不是添加在附件中，这个脚本实现的比较简单粗暴，不管长相丑陋，只要能解决实际问题就行。&lt;/p&gt;
&lt;h2 id=&quot;为什么有CTEmail&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
    
      <category term="Python" scheme="http://www.dyike.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之“工厂方法模式”——计算器实例</title>
    <link href="http://www.dyike.com/2017/09/12/design-pattern-factory-method/"/>
    <id>http://www.dyike.com/2017/09/12/design-pattern-factory-method/</id>
    <published>2017-09-12T14:44:06.000Z</published>
    <updated>2017-09-12T15:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是工厂模式？"><a href="#什么是工厂模式？" class="headerlink" title="什么是工厂模式？"></a>什么是工厂模式？</h3><p>就是定义一个创建对象的接口，让子类是实例化具体的类，工厂方法就是让类的实例化，延迟到子类中。这是属于创建类模式。</p>
<h3 id="怎么实现？"><a href="#怎么实现？" class="headerlink" title="怎么实现？"></a>怎么实现？</h3><p>用模板方法的方式创建对象来解决，父类定义所有标准通用行为，然后将创建细节放在子类中实现并输出给客户端。工厂方法模式主要四个要素：</p>
<ul>
<li>工厂接口。工厂接口是工厂方法模式的核心，与调用者直接交互用来提供产品。</li>
<li>工厂实现。工厂实现决定如何实例化产品，是实现扩展的途径，需要多少种产品，就需要多少具体工厂实现。</li>
<li>产品接口。产品接口的主要目的是定义产品的规范，所有的产品实现都必须遵循产品接口定义的规范。</li>
<li>产品实现。实现产品接口的具体类，决定了产品在客户端中的具体行为。</li>
</ul>
<h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>工厂模式是一种典型的解耦模式，当需要系统有比较好的扩展性时，可以考虑工厂模式，不同的产品用不同的实现工厂来组装。</p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="comment">// 协议</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num: (<span class="type">Double</span>, <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">get</span></div><div class="line">        <span class="keyword">set</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>?</div><div class="line">    <span class="comment">// 工厂</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遵守协议</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Addition</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> + num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Addition</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Subtraction</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> - num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Subtraction</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Multiplication</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> * num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Multiplication</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Division</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">var</span> result: <span class="type">Double</span>?</div><div class="line">        <span class="keyword">if</span> num.<span class="number">1</span> != <span class="number">0</span> &#123;</div><div class="line">            result = num.<span class="number">0</span> / num.<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createOperation</span><span class="params">()</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Division</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> testSubtraction = <span class="type">Subtraction</span>.createOperation()</div><div class="line">testSubtraction.num = (<span class="number">5</span>, <span class="number">2</span>)</div><div class="line"><span class="built_in">print</span>(testSubtraction.getResult())</div><div class="line"></div><div class="line"><span class="keyword">var</span> testMultiplication = <span class="type">Multiplication</span>.createOperation()</div><div class="line">testMultiplication.num = (<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="built_in">print</span>(testMultiplication.getResult())</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是工厂模式？&quot;&gt;&lt;a href=&quot;#什么是工厂模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是工厂模式？&quot;&gt;&lt;/a&gt;什么是工厂模式？&lt;/h3&gt;&lt;p&gt;就是定义一个创建对象的接口，让子类是实例化具体的类，工厂方法就是让类的实例化，延迟到子类中。
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.dyike.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之”简单工厂模式“——计算器示例</title>
    <link href="http://www.dyike.com/2017/09/11/design-pattern-simple-factory/"/>
    <id>http://www.dyike.com/2017/09/11/design-pattern-simple-factory/</id>
    <published>2017-09-11T14:30:12.000Z</published>
    <updated>2017-09-11T14:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习设计模式，其实跟语言是无关的，我们主要是学习其中的思想。今天换一个语言来实现吧，主要好久没有写swift了，今天就拿swift来写好了。</p>
<p>还是先来说说概念吧，简单工厂模式（simple factory pattern）又称为静态工厂方法模式，是属于创建型模式。可以根据参数的不同返回不同类的实例，说通俗一点就是一家工厂，能够生产轮胎，还能生产齿轮等等，只需要跟工厂说一声（传参数），就能生产出来了。一般情况下被创建的实例都是具有共同的父类。</p>
<p>什么时候使用？比如在计算器中，有加法运算，有减法运算，有乘法运算，有除法运算等等。各个运算都是一种运算操作（operator）,我们只是修改部分属性从而让他们具备了不同的运算能力。如果我们希望我们在使用这个计算器的时候，我们不需要知道具体是怎么计算的，就只需要得到正确的结果，此时，不是不就可以使用简单工厂模式。</p>
<p>下面直接看源码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="comment">// 协议</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num: (<span class="type">Double</span>, <span class="type">Double</span>) &#123;</div><div class="line">        <span class="keyword">get</span></div><div class="line">        <span class="keyword">set</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>?</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遵循此协议</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Addition</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> + num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Subtraction</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> - num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Multiplication</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">return</span> num.<span class="number">0</span> * num.<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Division</span>: <span class="title">Operator</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> num = (<span class="number">0.0</span>, <span class="number">0.0</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>? &#123;</div><div class="line">        <span class="keyword">var</span> result: <span class="type">Double</span>?</div><div class="line">        <span class="keyword">if</span> num.<span class="number">1</span> != <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> num.<span class="number">0</span> / num.<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 操作符枚举</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Operators</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> addition, subtraction, multiplication, divsion</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 工厂 </span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OperatorFactory</span> </span>&#123;</div><div class="line">	  <span class="comment">// 计算操作</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">calculateForOperator</span><span class="params">(<span class="number">_</span> opt: Operators)</span></span> -&gt; <span class="type">Operator</span> &#123;</div><div class="line">        <span class="keyword">switch</span> opt &#123;</div><div class="line">        <span class="keyword">case</span> .addition:</div><div class="line">            <span class="keyword">return</span> <span class="type">Addition</span>()</div><div class="line">        <span class="keyword">case</span> .subtraction:</div><div class="line">            <span class="keyword">return</span> <span class="type">Subtraction</span>()</div><div class="line">        <span class="keyword">case</span> .multiplication:</div><div class="line">            <span class="keyword">return</span> <span class="type">Multiplication</span>()</div><div class="line">        <span class="keyword">case</span> .divsion:</div><div class="line">            <span class="keyword">return</span> <span class="type">Division</span>()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> testDivision = <span class="type">OperatorFactory</span>.calculateForOperator(.divsion)</div><div class="line">testDivision.num = (<span class="number">1</span>, <span class="number">3</span>)</div><div class="line"><span class="built_in">print</span>(testDivision.getResult() ?? <span class="string">"Error"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> testAddition = <span class="type">OperatorFactory</span>.calculateForOperator(.addition)</div><div class="line">testAddition.num = (<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="built_in">print</span>(testAddition.getResult() ?? <span class="string">"Error"</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习设计模式，其实跟语言是无关的，我们主要是学习其中的思想。今天换一个语言来实现吧，主要好久没有写swift了，今天就拿swift来写好了。&lt;/p&gt;
&lt;p&gt;还是先来说说概念吧，简单工厂模式（simple factory pattern）又称为静态工厂方法模式，是属于创建型模
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.dyike.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Laravel请求生命周期</title>
    <link href="http://www.dyike.com/2017/04/22/laravel-request-life-cycle/"/>
    <id>http://www.dyike.com/2017/04/22/laravel-request-life-cycle/</id>
    <published>2017-04-22T12:45:40.000Z</published>
    <updated>2017-04-23T14:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>要想了解Laravel的整个运行流程，那么就需要从入口文件下手，再一步步的往下探索，剥开神秘的面纱。在Laravel框架中入口文件就是public文件夹下的index.php文件。Laravel的生命周期也就是从这里开始的，从这里结束。如此优雅的代码却清晰的展示请求到相应的整个生命周期。不妨先看看index.php的源码吧：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// 第一块</span></div><div class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/autoload.php'</span>;</div><div class="line"><span class="comment">// 第二块</span></div><div class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</div><div class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</div><div class="line"><span class="comment">// 第三块</span></div><div class="line">$response = $kernel-&gt;handle(</div><div class="line">    $request = Illuminate\Http\Request::capture()</div><div class="line">);</div><div class="line">$response-&gt;send();</div><div class="line"><span class="comment">// 第四块</span></div><div class="line">$kernel-&gt;terminate($request, $response);</div></pre></td></tr></table></figure>
<p>为了分析上面的代码，将代码分为四块：</p>
<ul>
<li><p>第一块</p>
<blockquote>
<p>主要用来实现类的自动加载，注册加载composer自动生成的class loader。</p>
</blockquote>
</li>
<li><p>第二块</p>
<blockquote>
<p>主要来实例化服务容器，Laravel的一些基本服务的注册，核心组件注册等等，当然了也包括容器本身的注册。在注册的过程中服务容器会在对应的属性中记录注册的内容，方便于在程序运行期间提供对应的服务。这部分内容可以称为程序启动准备阶段。</p>
</blockquote>
</li>
<li><p>第三块</p>
<blockquote>
<p>处理请求，用户发送的请求入口文件是index.php，从生成<code>Illuminate\Http\Request</code>实例，交给handle()进行处理。将该$request实例绑定到第二步生成的$app容器上。并发送相应</p>
</blockquote>
</li>
<li><p>第四块</p>
<blockquote>
<p>请求的后期清理处理工作，请求结束并进行回调。</p>
</blockquote>
</li>
</ul>
<h1 id="服务容器的实例化（详谈第二块代码）"><a href="#服务容器的实例化（详谈第二块代码）" class="headerlink" title="服务容器的实例化（详谈第二块代码）"></a>服务容器的实例化（详谈第二块代码）</h1><p>先看看<code>bootstrap\app.php</code>源码：里面有注释</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// 服务容器实例化的过程</span></div><div class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</div><div class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</div><div class="line">);</div><div class="line"><span class="comment">// 向容器绑定了三个核心类服务</span></div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Http\Kernel::class,</div><div class="line">    App\Http\Kernel::class</div><div class="line">);</div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Console\Kernel::class,</div><div class="line">    App\Console\Kernel::class</div><div class="line">);</div><div class="line">$app-&gt;singleton(</div><div class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</div><div class="line">    App\Exceptions\Handler::class</div><div class="line">);</div><div class="line"><span class="comment">// 返回服务容器实例</span></div><div class="line"><span class="keyword">return</span> $app;</div></pre></td></tr></table></figure>
<p>关于<code>Illuminate\Foundation\Application.php</code>文件查看源码</p>
<h4 id="应用的基础路径setBasePath"><a href="#应用的基础路径setBasePath" class="headerlink" title="应用的基础路径setBasePath()"></a>应用的基础路径<code>setBasePath()</code></h4><p>设置注册应用的基础路径，并在容器中绑定这些基础基础路径。</p>
<h4 id="注册基础绑定registerBaseBindings"><a href="#注册基础绑定registerBaseBindings" class="headerlink" title="注册基础绑定registerBaseBindings()"></a>注册基础绑定<code>registerBaseBindings()</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 向容器注册基础绑定</span></div><div class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseBindings</span><span class="params">()</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);</div><div class="line">     <span class="comment">// 向服务共享实例数组中注册量单例服务，</span></div><div class="line">     <span class="comment">// 服务名称分别为`app`和`Illuminate\Container\Container`</span></div><div class="line">     <span class="comment">// 对应的实例对象即为服务容器本身</span></div><div class="line">     <span class="keyword">$this</span>-&gt;instance(<span class="string">'app'</span>, <span class="keyword">$this</span>);</div><div class="line">     <span class="keyword">$this</span>-&gt;instance(Container::class, <span class="keyword">$this</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>主要绑定容器实例本身，服务容器中设置了一个静态变量<code>$instance</code>，该变量是在<code>Illuminate\Container\Container.php</code>中定义,<code>Application</code>类继承了<code>Container</code>类，在<code>Container</code>类中可以通过<code>public static function getInstance()</code>获取服务容器实例。服务容器实例还绑定不同的服务容器别名，记录在<code>$instances</code>共享实例数组（在<code>Container</code>类中）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在容器中注册一个已经存在的实例作为共享实例</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">instance</span><span class="params">($abstract, $instance)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;removeAbstractAlias($abstract);</div><div class="line"></div><div class="line">    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;aliases[$abstract]);</div><div class="line">    <span class="comment">// 检查该类有没有本绑定</span></div><div class="line">    <span class="comment">// 如果已经绑定，将触发向容器注册的反弹回调</span></div><div class="line">    <span class="keyword">$this</span>-&gt;instances[$abstract] = $instance;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;bound($abstract)) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;rebound($abstract);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注册基础服务提供者registerBaseServiceProviders"><a href="#注册基础服务提供者registerBaseServiceProviders" class="headerlink" title="注册基础服务提供者registerBaseServiceProviders()"></a>注册基础服务提供者<code>registerBaseServiceProviders()</code></h4><p>服务提供者的注册是非常重要的，因为它给服务容器添加各种服务。这里只是注册了最基本的三个服务：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseServiceProviders</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> EventServiceProvider(<span class="keyword">$this</span>));</div><div class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> LogServiceProvider(<span class="keyword">$this</span>));</div><div class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> RoutingServiceProvider(<span class="keyword">$this</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在容器里注册一个服务提供者的方法：<br><code>public function register($provider, $options = [], $force = false)</code></p>
<p>源码阅读分析：</p>
<ul>
<li>首先<code>getProvider($provider)</code>进行判断，如果服务提供者存在则获取这个实例对象。</li>
<li>第二，如果给定$provider是一个string，则通过类名<code>resolveProvider($provider)</code>进行实例对象。</li>
<li>然后，对实例化完成的$provider进行标记为已经注册，<code>markAsRegistered($provider)</code>。</li>
<li>最后，启动规定的服务提供者<code>bootProvider($provider)</code>。</li>
</ul>
<h4 id="注册核心类别名registerCoreContainerAliases"><a href="#注册核心类别名registerCoreContainerAliases" class="headerlink" title="注册核心类别名registerCoreContainerAliases()"></a>注册核心类别名<code>registerCoreContainerAliases()</code></h4><p><code>$aliases</code>数组变量中定义了整个框架的核心服务别名，在解析的过程中需要根据实例化的类或者接口名查找服务别名，然后通过服务别名获取具体的服务。</p>
<p>这里放一张图进行小小的总结：<br> <img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/laravel/程序启动准备阶段.png" alt="程序启动准备阶段"></p>
<h1 id="核心类实例化-Kernel类"><a href="#核心类实例化-Kernel类" class="headerlink" title="核心类实例化(Kernel类)"></a>核心类实例化(Kernel类)</h1><p>为什么要服务容器？服务容器实例化后，就可以通过服务容器自动实例化对象了，可以参考上一篇的<a href="https://www.dyike.com/2017/04/11/inversion-of-control/">服务容器</a>。<br><code>index.php</code>中Kernel类就是通过服务容器自动创建完成的。</p>
<p>在<code>bootstrap\app.php</code>文件中就注册了三个服务，其中包括了这个核心类接口，在注册服务时，服务名一般是接口。注册的服务是具体的类名，这一般是通过反射基础来实例化的，并通过反射机制解决构造函数的依赖关系，参考上篇的服务容器有讲解。</p>
<p>这里说的核心类是指<code>App\Http\Kernel</code>类，这个类只是定义了<code>$middleware</code> ，<code>$middlewareGroups</code> 和 <code>$routeMiddleware</code>是哪个数组属性。这个类是继承<code>Illuminate\Foundation\Http\Kernel</code>类的，不妨看看这个类中的构造函数，不难看出这个构造函数是存在依赖关系，一个是<code>Illuminate\Contracts\Foundation\Application</code>，还有一个是<code>Illuminate\Routing\Router</code>。他们在服务容器初始化的时候都进行了实例化。</p>
<h1 id="请求实例化capture"><a href="#请求实例化capture" class="headerlink" title="请求实例化capture()"></a>请求实例化<code>capture()</code></h1><p>在程序启动准备工作完成了之后，就开始请求的实例化。对于请求就是客户端的发送的一个请求报文。这个对应着<code>Illuminate\Http\Request</code>类的实例对象。请求实例的创建是通过<code>Illuminate\Http\Request</code>类中的<code>capture()</code>函数完成的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建HTTP请求实例</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">capture</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span>::enableHttpMethodParameterOverride();</div><div class="line">    <span class="comment">// 通过Symfony实例创建一个请求实例</span></div><div class="line">    <span class="comment">// 而Symfony请求实例是通过createFromGlobals()静态函数实现的</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::createFromBase(SymfonyRequest::createFromGlobals());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFromBase</span><span class="params">(SymfonyRequest $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($request <span class="keyword">instanceof</span> <span class="keyword">static</span>) &#123;</div><div class="line">        <span class="keyword">return</span> $request;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $content = $request-&gt;content;</div><div class="line"></div><div class="line">    $request = (<span class="keyword">new</span> <span class="keyword">static</span>)-&gt;duplicate(</div><div class="line">        $request-&gt;query-&gt;all(), $request-&gt;request-&gt;all(), $request-&gt;attributes-&gt;all(),</div><div class="line">        $request-&gt;cookies-&gt;all(), $request-&gt;files-&gt;all(), $request-&gt;server-&gt;all()</div><div class="line">    );</div><div class="line"></div><div class="line">    $request-&gt;content = $content;</div><div class="line"></div><div class="line">    $request-&gt;request = $request-&gt;getInputSource();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $request;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过PHP全局变量创建一个新的请求实例</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFromGlobals</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $server = $_SERVER;</div><div class="line">    <span class="keyword">if</span> (<span class="string">'cli-server'</span> === PHP_SAPI) &#123;</div><div class="line">        <span class="keyword">if</span> (array_key_exists(<span class="string">'HTTP_CONTENT_LENGTH'</span>, $_SERVER)) &#123;</div><div class="line">            $server[<span class="string">'CONTENT_LENGTH'</span>] = $_SERVER[<span class="string">'HTTP_CONTENT_LENGTH'</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (array_key_exists(<span class="string">'HTTP_CONTENT_TYPE'</span>, $_SERVER)) &#123;</div><div class="line">            $server[<span class="string">'CONTENT_TYPE'</span>] = $_SERVER[<span class="string">'HTTP_CONTENT_TYPE'</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $request = <span class="keyword">self</span>::createRequestFromFactory($_GET, $_POST, <span class="keyword">array</span>(), $_COOKIE, $_FILES, $server);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> === strpos($request-&gt;headers-&gt;get(<span class="string">'CONTENT_TYPE'</span>), <span class="string">'application/x-www-form-urlencoded'</span>)</div><div class="line">        &amp;&amp; in_array(strtoupper($request-&gt;server-&gt;get(<span class="string">'REQUEST_METHOD'</span>, <span class="string">'GET'</span>)), <span class="keyword">array</span>(<span class="string">'PUT'</span>, <span class="string">'DELETE'</span>, <span class="string">'PATCH'</span>))</div><div class="line">    ) &#123;</div><div class="line">        parse_str($request-&gt;getContent(), $data);</div><div class="line">        $request-&gt;request = <span class="keyword">new</span> ParameterBag($data);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $request;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createRequestFromFactory</span><span class="params">(array $query = array<span class="params">()</span>, array $request = array<span class="params">()</span>, array $attributes = array<span class="params">()</span>, array $cookies = array<span class="params">()</span>, array $files = array<span class="params">()</span>, array $server = array<span class="params">()</span>, $content = null)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 如果定义了请求工厂方法，则可以将自定义的工厂方法赋值给属性$requestFactory</span></div><div class="line">    <span class="comment">// 否则通过new static来完成请求的实例。</span></div><div class="line">    <span class="comment">// new static语法是后期静态绑定</span></div><div class="line">    <span class="comment">// 参照http://php.net/manual/zh/language.oop5.late-static-bindings.php</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>::$requestFactory) &#123;</div><div class="line">        $request = call_user_func(<span class="keyword">self</span>::$requestFactory, $query, $request, $attributes, $cookies, $files, $server, $content);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!$request <span class="keyword">instanceof</span> <span class="keyword">self</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException(<span class="string">'The Request factory must return an instance of Symfony\Component\HttpFoundation\Request.'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $request;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">static</span>($query, $request, $attributes, $cookies, $files, $server, $content);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="处理请求handle"><a href="#处理请求handle" class="headerlink" title="处理请求handle()"></a>处理请求<code>handle()</code></h1><p>完成了请求实例化自然需要对请求实例进行处理，最终返回响应。请求处理是通过<code>Illuminate\Foundation\Http\Kernel.php</code>中<code>handle()</code>进行的，处理是handle中的<code>sendRequestThroughRouter()</code>方法实现的，通过路由请求实例。而<code>enableHttpMethodParameterOverride()</code>方法会是使能请求拒绝，被使能后在请求过程中添加CSRF保护，服务端发送一个CSRF令牌给客户端，也就是一个cookie,在客户端发送POST请求需要将该令牌发送给服务端，否则拒绝处理该请求。</p>
<h4 id="请求前是不是也要准备一下？"><a href="#请求前是不是也要准备一下？" class="headerlink" title="请求前是不是也要准备一下？"></a>请求前是不是也要准备一下？</h4><p>直接看源码：<br>有6个步骤：环境检测、配置加载、异常处理、Facade注册、服务提供者注册、启动服务，通过<code>bootstrap()</code>方法完成准备工作，会调用服务容器$app实例中<code>bootstrapWith()</code>函数,进而通过<code>$this-&gt;make($bootstrapper)-&gt;bootstrap($this)</code>make方法完成每个准备类的初始化工作，然后调用准备类的<code>bootstrap</code>方法实现准备工作。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $bootstrappers = [</div><div class="line">    \Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\LoadConfiguration::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\HandleExceptions::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\RegisterFacades::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\RegisterProviders::class,</div><div class="line">    \Illuminate\Foundation\Bootstrap\BootProviders::class,</div><div class="line">];</div><div class="line"><span class="comment">// 请求通过中间件和路由转发</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;bootstrap();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</div><div class="line">                -&gt;send($request)</div><div class="line">                -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</div><div class="line">                -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Bootstrap the application for HTTP requests.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bootstrapWith(<span class="keyword">$this</span>-&gt;bootstrappers());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Foundation\Application.php</span></div><div class="line"><span class="comment">// 执行bootstrap类的数组</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrapWith</span><span class="params">(array $bootstrappers)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;hasBeenBootstrapped = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span> ($bootstrappers <span class="keyword">as</span> $bootstrapper) &#123;</div><div class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapping: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;make($bootstrapper)-&gt;bootstrap(<span class="keyword">$this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapped: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>环境检测和配置加载（这部分略过了）</li>
<li>Facade注册<br>这个怎么理解呢，就是为了美观方便而起的别名，通过别名调用对应实例的属性和方法。这个在很多地方都用到了，比如路由，<code>Route::get()</code>以为是一个Route类，其实不然，只是通过别名实现的。<br>看源码是最好的老师：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Foundation\Bootstrap\RegisterFacades.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></div><div class="line">&#123;</div><div class="line">    Facade::clearResolvedInstances();</div><div class="line"></div><div class="line">    Facade::setFacadeApplication($app);</div><div class="line">    <span class="comment">// Illuminate\Foundation\AliasLoader.php（外观自动加载类）</span></div><div class="line">    <span class="comment">// 注意与composer的自动加载类不同</span></div><div class="line">    AliasLoader::getInstance($app-&gt;make(<span class="string">'config'</span>)-&gt;get(<span class="string">'app.aliases'</span>, []))-&gt;register();</div><div class="line">&#125;</div><div class="line"><span class="comment">// Illuminate\Foundation\AliasLoader.php</span></div><div class="line"><span class="comment">// 创建别名加载的实例对象</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">(array $aliases = [])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">static</span>::$instance)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$instance = <span class="keyword">new</span> <span class="keyword">static</span>($aliases);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $aliases = array_merge(<span class="keyword">static</span>::$instance-&gt;getAliases(), $aliases);</div><div class="line"></div><div class="line">    <span class="keyword">static</span>::$instance-&gt;setAliases($aliases);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$instance;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在自动加载栈中注册一个自动加载函数</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;registered) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;prependToLoaderStack();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;registered = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要分要两个步骤：完成外观自动加载类的实例化并将外观别名数组添加到实例中，然后完成外观自动加载类中自动加载函数的添加。</p>
<p>在laravel中有两个别名，一个是容器核心别名，定义在Application类中，而存储在中Application实例的$aliases属性中，另一个是外观别名，定义在app.php配置文件中，程序运行后存储在AliasLoader类实例中的$aliases属性中。</p>
<p>那像<code>Route::get()</code>是怎么调用的呢？程序首先需要加载类Route，注册了外观别名，那么自动加载栈的第一个函数是AliasLoader类的load()函数，此函数会查找外观别名对应的类名，也就是<code>Illuminate\Support\Facades\Route</code>类，加载这个类，执行get()方法，但是这个类中并没有此静态方法。这个类继承<code>Illuminate\Support\Facades\Facade</code>，也没有get()方法，但是有一个<code>__callStatic()</code>魔术方法，然后调用一个<code>getFacadeAccessor()</code>静态方法，每一个具体的外观类都需要这个静态方法，该方法就是返回别名类所对应的在服务容器中的名称，对于<code>Illuminate\Support\Facades\Route</code>返回的就是“router”，接着通过服务容器获取对应的实例对象，这里对应的<code>Illuminate\Routing\Router</code>类的实例，通过<code>static::$app[$name]</code>实现，最终调用这个类中的get()方法。</p>
<ul>
<li>服务提供者注册<br>服务提供注册这位应用程序提供服务支持，在启动的准备阶段进行了基础服务提供者的加载，但这些服务职能应对前期的启动阶段，对于后期请求处理需要用到的数据库服务、认证服务、session服务还不够。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务提供者注册</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></div><div class="line">&#123;</div><div class="line">    $app-&gt;registerConfiguredProviders();</div><div class="line">&#125;</div><div class="line"><span class="comment">// Illuminate\Foundation\Application.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerConfiguredProviders</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    (<span class="keyword">new</span> ProviderRepository(<span class="keyword">$this</span>, <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;getCachedServicesPath()))</div><div class="line">                -&gt;load(<span class="keyword">$this</span>-&gt;config[<span class="string">'app.providers'</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>启动服务<br>服务提供者必须要实现<code>register()</code>函数，还有一个<code>boot()</code>函数根据需求实现，主要用于启动服务，不是必须的，不实现会在父类中统一处理。对于实现boot()函数的服务提供者，会通过BootProviders类进行统一管理调用。要实现boot()也比较简短，只需要调用服务容器中的boot()函数即可。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Foundation\Bootstrap.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></div><div class="line">&#123;</div><div class="line">    $app-&gt;boot();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>在Laravel程序中有中间件的概念，就是对请求的处理，首先是经过中间的处理，然后经过路由的处理，最终到控制器生成响应。这个过程中基本是以装饰者模式的思想进行的。<br>看看app/Http/Kernel.php源码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> $middleware = [</div><div class="line">    \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</div><div class="line">    \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</div><div class="line">    \App\Http\Middleware\TrimStrings::class,</div><div class="line">    \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Foundation\Http\Kernel.php</span></div><div class="line"><span class="comment">// 将请求通过中间件和路由处理</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</div><div class="line">    <span class="keyword">$this</span>-&gt;bootstrap();</div><div class="line">    <span class="comment">// 主要看这里</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</div><div class="line">                -&gt;send($request)</div><div class="line">                -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</div><div class="line">                -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置路由分发回调函数</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Pipeline\Pipeline.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Container $container = null)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;container = $container;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置被送入管道的对象</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($passable)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;passable = $passable;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 设置导管数组</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">through</span><span class="params">($pipes)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;pipes = is_array($pipes) ? $pipes : func_get_args();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 以一个回调函数为重点执行管道处理</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">then</span><span class="params">(Closure $destination)</span></span></div><div class="line">&#123;</div><div class="line">    $pipeline = array_reduce(</div><div class="line">        <span class="comment">// 可以看看carry()</span></div><div class="line">        array_reverse(<span class="keyword">$this</span>-&gt;pipes), <span class="keyword">$this</span>-&gt;carry(), <span class="keyword">$this</span>-&gt;prepareDestination($destination)</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> $pipeline(<span class="keyword">$this</span>-&gt;passable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="路由处理生成响应"><a href="#路由处理生成响应" class="headerlink" title="路由处理生成响应"></a>路由处理生成响应</h4><p>回到刚才看到的路由分发回调函数</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</div><div class="line">        <span class="comment">// 将请求信息传递给路由信息存储实例</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Illuminate\Routing\Router.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;currentRequest = $request;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchToRoute($request);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 分发请求到路由上，并返回响应</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRoute</span><span class="params">(Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 查找对应的路由实例</span></div><div class="line">    $route = <span class="keyword">$this</span>-&gt;findRoute($request);</div><div class="line">    $request-&gt;setRouteResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> $route;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">new</span> Events\RouteMatched($route, $request));</div><div class="line"></div><div class="line">    $response = <span class="keyword">$this</span>-&gt;runRouteWithinStack($route, $request);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse($request, $response);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过一个实例栈运行给定的路由</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRouteWithinStack</span><span class="params">(Route $route, Request $request)</span></span></div><div class="line">&#123;</div><div class="line">    $shouldSkipMiddleware = <span class="keyword">$this</span>-&gt;container-&gt;bound(<span class="string">'middleware.disable'</span>) &amp;&amp;</div><div class="line">                            <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'middleware.disable'</span>) === <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    $middleware = $shouldSkipMiddleware ? [] : <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($route);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;container))</div><div class="line">                    -&gt;send($request)</div><div class="line">                    -&gt;through($middleware)</div><div class="line">                    -&gt;then(<span class="function"><span class="keyword">function</span> <span class="params">($request)</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse(</div><div class="line">                            $request, $route-&gt;run()</div><div class="line">                        );</div><div class="line">                    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>路由的信息都会保存在一个<code>Illuminate\Routing\Router</code>类实例中，而这个类实例存储在kernel类中。</p>
<p>查到请求对应的路由后，请求传递给对应的路由去处理</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Routing\Route.php</span></div><div class="line"><span class="comment">// 执行路由动作并返回相应</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;container = <span class="keyword">$this</span>-&gt;container ?: <span class="keyword">new</span> Container;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isControllerAction()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runController();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runCallable();</div><div class="line">    &#125; <span class="keyword">catch</span> (HttpResponseException $e) &#123;</div><div class="line">        <span class="keyword">return</span> $e-&gt;getResponse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进而交给相应的controller去处理。这部分，首先根据控制器类名通过服务容器进行实例化，再通过调用控制的实例对应的方法来生成响应的主体部分（并非最终的响应）。经过一系列的处理之后生成响应。响应是封装在<code>Illuminate\Http\Response</code>实例中的。</p>
<h1 id="响应的发送和请求生命周期的终止"><a href="#响应的发送和请求生命周期的终止" class="headerlink" title="响应的发送和请求生命周期的终止"></a>响应的发送和请求生命周期的终止</h1><h4 id="响应发送-response-gt-send"><a href="#响应发送-response-gt-send" class="headerlink" title="响应发送$response-&gt;send()"></a>响应发送<code>$response-&gt;send()</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Symfony\Component\HttpFoundation\Response.php</span></div><div class="line"><span class="comment">// 发送 HTTP响应头和内容</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 发送HTTP头部</span></div><div class="line">    <span class="keyword">$this</span>-&gt;sendHeaders();</div><div class="line">    <span class="comment">// 发送Web响应的内容</span></div><div class="line">    <span class="keyword">$this</span>-&gt;sendContent();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (function_exists(<span class="string">'fastcgi_finish_request'</span>)) &#123;</div><div class="line">        fastcgi_finish_request();</div><div class="line">    &#125; <span class="keyword">elseif</span> (<span class="string">'cli'</span> !== PHP_SAPI) &#123;</div><div class="line">        <span class="keyword">static</span>::closeOutputBuffers(<span class="number">0</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="程序终止——生命周期的最后阶段-kernel-gt-terminate-request-response"><a href="#程序终止——生命周期的最后阶段-kernel-gt-terminate-request-response" class="headerlink" title="程序终止——生命周期的最后阶段$kernel-&gt;terminate($request, $response)"></a>程序终止——生命周期的最后阶段<code>$kernel-&gt;terminate($request, $response)</code></h4><p>程序终止，完成终止中间件的调用</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Illuminate\Foundation\Http\Kernel.php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">($request, $response)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;terminateMiddleware($request, $response);</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;app-&gt;terminate();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 终止中间件</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">terminateMiddleware</span><span class="params">($request, $response)</span></span></div><div class="line">&#123;</div><div class="line">    $middlewares = <span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : array_merge(</div><div class="line">        <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($request),</div><div class="line">        <span class="keyword">$this</span>-&gt;middleware</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span> ($middlewares <span class="keyword">as</span> $middleware) &#123;</div><div class="line">        <span class="keyword">if</span> (! is_string($middleware)) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">list</span>($name, $parameters) = <span class="keyword">$this</span>-&gt;parseMiddleware($middleware);</div><div class="line"></div><div class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;make($name);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (method_exists($instance, <span class="string">'terminate'</span>)) &#123;</div><div class="line">            $instance-&gt;terminate($request, $response);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>什么东西都是有始有终的，至此请求生命周期结束。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>请求到响应整个执行过程，可以分为四个阶段：程序启动准备阶段，请求实例化阶段，请求处理阶段，响应发送和终止程序。<br>准备阶段：完成一些文件自动加载，服务容器实例化，基础服务提供者注册和Kernel类的实例化。<br>请求实例化阶段：将请求信息以对象的实行进行存储。<br>请求处理阶段：准备请求处理环境，完成环境和配置加载等6大东西。通过中间件处理通过路由和控制器处理，生成相应。<br>请求终止阶段：将响应发送给客户端并终止程序。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要想了解Laravel的整个运行流程，那么就需要从入口文件下手，再一步步的往下探索，剥开神秘的面纱。在Laravel框架中入口文件就是public文件夹下的index.php文件。Laravel的生命周期也就是从这里开始的，从这里结束。如此优雅的代码却清晰的展示请求到相应的
    
    </summary>
    
    
      <category term="Laravel" scheme="http://www.dyike.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel源码阅读笔记——服务容器</title>
    <link href="http://www.dyike.com/2017/04/11/inversion-of-control/"/>
    <id>http://www.dyike.com/2017/04/11/inversion-of-control/</id>
    <published>2017-04-11T14:35:43.000Z</published>
    <updated>2017-04-24T00:30:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>使用laravel也有一段时间了，现在应该向深入理解laravel去看看一些源码了。laravel之所以新颖，使用了大量PHP新语法，包含命名空间（组件化开发的条件），匿名函数，反射机制，还有后期静态绑定，trait等等。<br>当你深入去挖掘源码的时候，laravel框架中使用的都是大家熟知的东西，并没有多么的高深。那就耐着性子一层一层地往下扒吧！</p>
</blockquote>
<h2 id="服务容器"><a href="#服务容器" class="headerlink" title="服务容器"></a>服务容器</h2><p>服务容器是laravel框架中相当核心的东西，提供了整个框架运行需要的服务。服务是什么呢？通俗地讲就是系统运行中需要的比如对象，配置信息之类的东西。服务容器就是承载这些东西的，在程序运行过程中动态的给系统提供服务（资源）。</p>
<p>服务容器提供的东西比较多，在这些功能中，需要注意的问题就是解决依赖实现解耦。说到这里，我们可能都听说过控制反转（Inversion Of Control）——IOC容器。服务容器也可以是IOC容器。控制反转模式是解决系统组件之间的相互依赖关系的一种模式。那什么是依赖？怎么解决依赖？不妨看一个例子。</p>
<p>我们就拿出去春游儿来谈吧，出去玩有很多方式，比如开车出去，乘坐火车出去。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visit</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Visit</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Drive car"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Train</span> <span class="keyword">implements</span> <span class="title">Visit</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Take train"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现该类需要依赖交通工具实例</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traveller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $trafficTool;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($trafficTool)</span></span></div><div class="line">    &#123;</div><div class="line">       <span class="comment">// 依赖产生</span></div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool = <span class="keyword">new</span> Car();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitOut</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool-&gt;go();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$traveller = <span class="keyword">new</span> Traveller();</div><div class="line">$traveller-&gt;visitOut();</div></pre></td></tr></table></figure>
<p>不难看出上面的代码，两个组件之间就产生的依赖，<code>Traveller</code>的初始化依赖与<code>Car</code>，如果需求改动了，实例化的交通工具不是car是其他的，就需要不断改变实例化的对象，你说这样的代码怎样？我们不应该在<code>Traveller</code>中固定交通工具的初始化，而是交给外部去实现，将这种依赖关系通过动态注入的方式实现，这就是IOC模式的思想。</p>
<p>于是乎，我们将交通工具的实例化提取出来外部管理，这样做，也体现出面向对象的设计的一个原则——将经常变化的部分提取出去，与固定不变的部分进行分离。这里我们使用工厂模式来实现。</p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrafficToolFactory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createTrafficTool</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">switch</span> ($name) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'Car'</span> :</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Car();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'Train'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Train();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">exit</span>(<span class="string">"set traffic tool error"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traveller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $trafficTool;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($trafficTool)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 通过工厂生产依赖的交通工具实例</span></div><div class="line">        $factory = <span class="keyword">new</span> TrafficToolFactory();</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool = $factory-&gt;createTrafficTool($trafficTool);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitOut</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool-&gt;go();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$traveller = <span class="keyword">new</span> Traveller(<span class="string">'Car'</span>);</div><div class="line">$traveller-&gt;visitOut();</div></pre></td></tr></table></figure>
<p>现在看，<code>Traveller</code>跟<code>trafficTool</code>之间没有依赖关系了，但是却变成<code>Traveller</code>跟<code>TrafficToolFactory</code>之间的依赖了，如果我们再碰到需求，需要修改工厂模式，这样的代码还是不易于维护。</p>
<h3 id="IOC模式"><a href="#IOC模式" class="headerlink" title="IOC模式"></a>IOC模式</h3><p>控制反转模式也叫做依赖注入模式，控制反转是将组件之间的依赖关系从程序内部提到外部的容器中，而依赖注入是将组建的依赖通过外部以参数或其他形式注入。两种说法一个意思。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traveller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $trafficTool;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Visit $trafficTool)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool = $trafficTool;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visitOut</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;trafficTool-&gt;go();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 生成依赖的交通工具实例</span></div><div class="line">$trafficTool = <span class="keyword">new</span> Train();</div><div class="line"><span class="comment">// 依赖注入的方式解决依赖问题</span></div><div class="line">$traveller = <span class="keyword">new</span> Traveller($trafficTool);</div><div class="line">$traveller-&gt;visitOut();</div></pre></td></tr></table></figure>
<p>这儿就是一个依赖注入的过程，<code>Traveller</code>类的构造函数依赖一个外部具有<code>Visit</code>接口的实例，在实例化<code>Traveller</code>时，传入一个<code>$trafficTool</code>实例，即通过依赖注入的方式解决依赖问题。</p>
<p>但是还是有一个小问题，这儿是我们是通过手动的方式注入依赖，依赖注入需要通过接口来限制，而不能随便开放。你还有完没完？其实通过IOC容器就可以实现自动依赖注入。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 用于提供实例的回调函数</span></div><div class="line">    <span class="keyword">protected</span> $bindings = [];</div><div class="line"></div><div class="line">    <span class="comment">// 绑定接口和生成相应实例的回调函数</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, $concrete = null, $shared = false)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (! $concrete <span class="keyword">instanceof</span> Closure) &#123;</div><div class="line">                <span class="comment">// 如果提供的参数不是回调函数，则产生默认的回调函数</span></div><div class="line">            $concrete = <span class="keyword">$this</span>-&gt;getClosure($abstract, $concrete);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;bindings[$abstract] = compact(<span class="string">'concrete'</span>, <span class="string">'shared'</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 默认生成实例的回调函数</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getClosure</span><span class="params">($abstract, $concrete)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 生成实例的回调函数，$container 一般为IOC容器对象，在调用回调生成实例时提供</span></div><div class="line">        <span class="comment">// 即 build函数中的 $concrete($this)</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($container, $parameters = [])</span> <span class="title">use</span> <span class="params">($abstract, $concrete)</span> </span>&#123;</div><div class="line">            $method = ($abstract == $concrete) ? <span class="string">'build'</span> : <span class="string">'make'</span>;</div><div class="line">                <span class="comment">// 调用的是容器的build或者make方法生成实例</span></div><div class="line">            <span class="keyword">return</span> $container-&gt;$method($concrete, $parameters);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 生成实例对象，首先解决接口和要实例化类之间的依赖关系</span></div><div class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract)</span></span></div><div class="line">    &#123;</div><div class="line">        $concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</div><div class="line">            $object = <span class="keyword">$this</span>-&gt;build($concrete);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $object = <span class="keyword">$this</span>-&gt;make($concrete);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取绑定的回调函数</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract])) &#123;</div><div class="line">            <span class="keyword">return</span> $abstract;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$abstract][<span class="string">'concrete'</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 实例化对象</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">($concrete)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 服务能否被服务提供者注册为实例</span></div><div class="line">        <span class="keyword">if</span> ($concrete <span class="keyword">instanceof</span> Closure) &#123;</div><div class="line">            <span class="keyword">return</span> $concrete(<span class="keyword">$this</span>);</div><div class="line">        &#125;</div><div class="line">            <span class="comment">// $concrete就是类名</span></div><div class="line">        $reflector = <span class="keyword">new</span> ReflectionClass($concrete);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (! $reflector-&gt;isInstantiable()) &#123;</div><div class="line">            <span class="keyword">echo</span> $message = <span class="string">"Target [$concrete] is not instantiable."</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="comment">// 获取构造信息</span></div><div class="line">        $constructor = $reflector-&gt;getConstructor();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (is_null($constructor)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> $concrete;</div><div class="line">        &#125;</div><div class="line">            <span class="comment">// 获取构造函数依赖的输入参数</span></div><div class="line">        $dependencies = $constructor-&gt;getParameters();</div><div class="line"></div><div class="line"></div><div class="line">        $instances = <span class="keyword">$this</span>-&gt;resolveDependencies(</div><div class="line">            $dependencies</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $reflector-&gt;newInstanceArgs($instances);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 解决通过反射机制实例化对象时的依赖</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveDependencies</span><span class="params">(array $dependencies)</span></span></div><div class="line">    &#123;</div><div class="line">        $results = [];</div><div class="line"></div><div class="line">        <span class="keyword">foreach</span> ($dependencies <span class="keyword">as</span> $dependency) &#123;</div><div class="line">            </div><div class="line">            $results[] = is_null($class = $dependency-&gt;getClass())</div><div class="line">                            ? <span class="keyword">NULL</span></div><div class="line">                            : <span class="keyword">$this</span>-&gt;resolveClass($dependency);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $results;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveClass</span><span class="params">(ReflectionParameter $parameter)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;make($parameter-&gt;getClass()-&gt;name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$app = <span class="keyword">new</span> Container();</div><div class="line"><span class="comment">// 容器的填充</span></div><div class="line">$app-&gt;bind(<span class="string">'Visit'</span>, <span class="string">"Car"</span>);</div><div class="line">$app-&gt;bind(<span class="string">"traveller"</span>, <span class="string">"Traveller"</span>);</div><div class="line"><span class="comment">// 通过容器实现依赖注入，完成类的实例化</span></div><div class="line">$tra = $app-&gt;make(<span class="string">"traveller"</span>);</div><div class="line">$tra-&gt;visitOut();</div></pre></td></tr></table></figure>
<p>在这个实现过程中，没有用new关键字来实例化对象，不需要关注对象的依赖关系，只需要在容器填充的过程中理顺接口与实现类之间的关系以及实现类与依赖接口之间的关系。这里的实例化是通过反射的机制完成的。</p>
<p>下篇继续以Laravel的源码进行分析。</p>
<p>在Laravel中，服务容器是由<code>Illuminate\Container\Container</code>类实现的，实现了服务容器的核心功能，而<code>Illuminate\Foundation\Application</code>类继承了该类，主要实现服务容器的初始配置和功能扩展。<br>在<code>bootstrap\app.php</code>中，$app就是服务容器的创建，然后在index.php中，通过require_once <code>bootstrap\app.php</code>就生成了服务容器。</p>
<p>服务容器生成了之后，里面除了最基本的好像什么也没有，那是不行的，首先需要向容器中填充服务，也即是服务绑定。那是怎么绑定的呢？可以简单地理解为键值对的概念，根据一个“key”就能找到对应的服务。难怪里面有一些数组属性。对于不同的绑定需要在服务容器中不同的绑定函数来实现，主要包括回调函数服务绑定和实例对象服务绑定。回调函数服务绑定就是一个回调函数，而实例对象服务绑定的就是一个实例对象。</p>
<p>回调函数服务绑定还分为普通绑定和单例绑定。普通绑定就是每次生成该服务的实例对象时还会生成一个新的实例对象，也就是说在生命周期中可以同时生成多个这种实例对象，而单例绑定在生成一个实例对象后，如果再次生成就会返回第一次生成的实例对象也就是在程序生命周期中只能生成一个这样的实例的对象，这个就是设计模式中的单例模式。</p>
<p>说了这么多，现在我们来一个简单的测试。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Test</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneralService</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $serviceName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Test</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleService</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $serviceName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Test</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstanceService</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $serviceName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>bootstrap\app.php</code>中，</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</div><div class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</div><div class="line">);</div><div class="line"></div><div class="line">$app-&gt;bind(App\Test\GenernalService::class, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> App\Test\GeneralService();</div><div class="line">&#125;)</div><div class="line">$app-&gt;singleton(App\Test\SingleService::class, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> App\Test\SingleService();</div><div class="line">&#125;)</div><div class="line">$instance = <span class="keyword">new</span> App\Test\InstanceService();</div><div class="line">$app-&gt;instance(<span class="string">'instanceService'</span>, $instance);</div><div class="line"><span class="keyword">return</span> $app;</div></pre></td></tr></table></figure>
<p>上面的服务容器通过三种不同的方式绑定服务，一种是普通模式绑定回调函数，另一种是单例模式绑定回调函数，还有一种是绑定实例对象。绑定后在服务容器增加内容：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$bindings = <span class="keyword">array</span>(<span class="string">"App\Test\GeneralService"</span> =&gt; <span class="keyword">array</span>(<span class="string">"concrete"</span> =&gt; &#123;Closure&#125;, <span class="string">"shared"</span> =&gt; <span class="keyword">false</span>), <span class="string">"App\Test\SingleService"</span> =&gt; <span class="keyword">array</span>(<span class="string">"concrete"</span> =&gt; &#123;Closure&#125;, <span class="string">"share"</span> =&gt; <span class="keyword">true</span>));</div><div class="line">$instances = <span class="keyword">array</span>(<span class="string">"instanceService"</span> =&gt; &#123;App\Test\InstanceService&#125;);</div></pre></td></tr></table></figure>
<p>不难看出，回调函数服务绑定是在$bindings中记录的，其key为绑定的服务名称，value是回调函数和模式标识。如果是普通模式，则share为false，如果是单例模式则为true。实例对象服务绑定在$instances中记录，key为服务名称，value为实例对象。</p>
<p>说到这里其实还有一个形式的绑定，就是绑定具体类名称，本质上也是绑定回调函数的方式，只是回调函数是服务容器根据提供的参数自动生成的。绑定服务的时候可以通过类名或者接口名作为服务，而服务是类名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用laravel也有一段时间了，现在应该向深入理解laravel去看看一些源码了。laravel之所以新颖，使用
    
    </summary>
    
    
      <category term="Laravel" scheme="http://www.dyike.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之“装饰者模式”——手机与包装盒示例</title>
    <link href="http://www.dyike.com/2017/03/29/design-pattern-decorator/"/>
    <id>http://www.dyike.com/2017/03/29/design-pattern-decorator/</id>
    <published>2017-03-29T14:27:22.000Z</published>
    <updated>2017-03-29T14:50:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在“装饰模式”中很好的提现了开放关闭原则，即类应该对扩展开放对修改关闭。装饰者模式可以让我们在不对原来代码的修改的情况下对类进行扩展。现在我们举一个例子，就好比给生产好的手机进行包装，我们在对手机进行包装的过程不会去对手机进行任何修改，只管用盒子将盒子包装好就行。</p>
<p>装饰者模式，用另一种表达方式就是“对原有的物体进行装饰，给原有的物体添加上新的装饰品”。这里的例子就是，手机是被装饰者，包装盒就是装饰品。这样的话，可以看出装饰者模式就是“动态地将责任附加到对象上。若要扩展功能，装饰着提供了比继承更有弹性的替代方案。”</p>
<p>在“装饰者模式”中所使用的装饰就是变化的部分，也就是Decorator是变化的部分对应着我们的包装盒，因为对手机进行包装的过程就是包装盒变化的过程，也就是为手机装饰的过程。而手机就可以看做是组件。需要注意的是，所谓的装饰者不仅仅是给组件添加的新的装饰品。一个装饰者对象就是添加该装饰后的组件，也就是说装饰者=旧组件 + 新装饰品。</p>
<h2 id="手机-包装盒的具体实现"><a href="#手机-包装盒的具体实现" class="headerlink" title="手机+包装盒的具体实现"></a>手机+包装盒的具体实现</h2><h3 id="实现一个手机的接口PhoneInterface-php"><a href="#实现一个手机的接口PhoneInterface-php" class="headerlink" title="实现一个手机的接口PhoneInterface.php"></a>实现一个手机的接口<code>PhoneInterface.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PhoneInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 生产手机</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现一个装饰器抽象的基类Decorator-php"><a href="#实现一个装饰器抽象的基类Decorator-php" class="headerlink" title="实现一个装饰器抽象的基类Decorator.php"></a>实现一个装饰器抽象的基类<code>Decorator.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 装饰器抽象类</div><div class="line"> */</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">PhoneInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 产品生产线对象</div><div class="line">     * <span class="doctag">@var</span> Object</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> $phone;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PhoneInterface $phone)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;phone = $phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生产</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;phone-&gt;product();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decorate</span><span class="params">($value)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现包装盒子的装饰器DecoratorPack-php"><a href="#实现包装盒子的装饰器DecoratorPack-php" class="headerlink" title="实现包装盒子的装饰器DecoratorPack.php"></a>实现包装盒子的装饰器<code>DecoratorPack.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 包装盒子装饰器</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorPack</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $pack;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(PhoneInterface $phone)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;phone = $phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name = <span class="string">''</span>, $value = <span class="string">''</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;$name = $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生产</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;phone-&gt;product();</div><div class="line">        <span class="keyword">$this</span>-&gt;decorate(<span class="keyword">$this</span>-&gt;pack);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进行包装</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decorate</span><span class="params">($value = <span class="string">''</span>)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"使用&#123;$value&#125;进行了包装\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现各个装饰者-Decorator-这里是ApplePhone-php和SmartisanPhone-php"><a href="#实现各个装饰者-Decorator-这里是ApplePhone-php和SmartisanPhone-php" class="headerlink" title="实现各个装饰者(Decorator),这里是ApplePhone.php和SmartisanPhone.php"></a>实现各个装饰者(Decorator),这里是<code>ApplePhone.php</code>和<code>SmartisanPhone.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 苹果手机</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplePhone</span> <span class="keyword">implements</span> <span class="title">PhoneInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"生产了一部苹果手机\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">decorator</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 锤子手机</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartisanPhone</span> <span class="keyword">implements</span> <span class="title">PhoneInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">product</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"生产了一部锤子手机\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="大差不差了，最后测试-test-php"><a href="#大差不差了，最后测试-test-php" class="headerlink" title="大差不差了，最后测试 test.php"></a>大差不差了，最后测试 <code>test.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 结构型模式</div><div class="line"> * 装饰器模式</div><div class="line"> * 对现有的对象增加功能，动态的将责任附加到对象上。</div><div class="line"> * 和适配器的区别： 适配器是链接两个接口，装饰器是对现有的对象包装</div><div class="line"> */</div><div class="line"><span class="comment">// 注册自加载</span></div><div class="line">spl_autoload_register(<span class="string">'autoload'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($class)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">require</span> dirname($_SERVER[<span class="string">'SCRIPT_FILENAME'</span>]) . <span class="string">'//..//'</span> . str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $class) . <span class="string">'.php'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">decorator</span>\<span class="title">DecoratorPack</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">decorator</span>\<span class="title">ApplePhone</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">decorator</span>\<span class="title">SmartisanPhone</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"为加装饰器之前： \n"</span>;</div><div class="line">    <span class="comment">// 生产苹果手机</span></div><div class="line">    $applePhone = <span class="keyword">new</span> ApplePhone();</div><div class="line">    $applePhone-&gt;product();</div><div class="line"></div><div class="line">    <span class="comment">// 生产锤子手机</span></div><div class="line">    $smartisanPhone = <span class="keyword">new</span> SmartisanPhone();</div><div class="line">    $smartisanPhone-&gt;product();</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">"\n------------\n"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">"进行包装装饰器: \n"</span>;</div><div class="line">    <span class="comment">// 初始化一个包装适配器</span></div><div class="line">    $decoratorPack1 = <span class="keyword">new</span> DecoratorPack(<span class="keyword">new</span> ApplePhone);</div><div class="line">    $decoratorPack1-&gt;pack = <span class="string">'白盒子'</span>;</div><div class="line">    $decoratorPack1-&gt;product();</div><div class="line"></div><div class="line">    $decoratorPack2 = <span class="keyword">new</span> DecoratorPack(<span class="keyword">new</span> SmartisanPhone);</div><div class="line">    $decoratorPack1-&gt;pack = <span class="string">'黑盒子'</span>;</div><div class="line">    $decoratorPack1-&gt;product();</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</div><div class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果：通过结果更清晰这个过程了"><a href="#运行结果：通过结果更清晰这个过程了" class="headerlink" title="运行结果：通过结果更清晰这个过程了"></a>运行结果：通过结果更清晰这个过程了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">为加装饰器之前：</div><div class="line">生产了一部苹果手机</div><div class="line">生产了一部锤子手机</div><div class="line"></div><div class="line">------------</div><div class="line">进行包装装饰器:</div><div class="line">生产了一部苹果手机</div><div class="line">使用白盒子进行了包装</div><div class="line">生产了一部苹果手机</div><div class="line">使用黑盒子进行了包装</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在“装饰模式”中很好的提现了开放关闭原则，即类应该对扩展开放对修改关闭。装饰者模式可以让我们在不对原来代码的修改的情况下对类进行扩展。现在我
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.dyike.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之“策略模式”——出行outing示例</title>
    <link href="http://www.dyike.com/2017/03/27/design-pattern-strategy/"/>
    <id>http://www.dyike.com/2017/03/27/design-pattern-strategy/</id>
    <published>2017-03-27T13:42:50.000Z</published>
    <updated>2017-03-29T14:29:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式通俗地说就是将不同的策略（算法）进行封装，让他们之间可以相互替换，此模式让策略的变化独立于使用策略的用户。</p>
<p>在设计模式中有不同的设计原则，其中一条就是”将可能会变化的代码独立出来，不要和不变得代码混在一起“。</p>
<p>现在举个例子就是，我们周末出去游玩，我们出去可以乘坐多种交通工具，这个时候就可以选择”策略模式“来实现。简单分析一下，这个场景中的乘坐的交通工具是多种多样的，可以骑自行车，可以坐地铁，可以自己开车。</p>
<p>根据上面的设计思路，，我们可以对”乘坐交通工具“的策略进行提取。使用<code>StrategyInterface</code>接口来规定策略，使用不同的出行方式对外都有一个统一的接口。在此就是乘坐交通工具，不同的出行方式有不同的”乘坐交通工具“的策略。</p>
<p>对于出行（outing）的定义就是不变的部分。这个类中定义了出行的方式，以及是否改变策略，其中依赖于乘坐交通工具的接口。</p>
<h2 id="策略模式的具体实现"><a href="#策略模式的具体实现" class="headerlink" title="策略模式的具体实现:"></a><code>策略模式</code>的具体实现:</h2><h3 id="乘坐交通工具的策略接口StrategyInterface-php"><a href="#乘坐交通工具的策略接口StrategyInterface-php" class="headerlink" title="乘坐交通工具的策略接口StrategyInterface.php"></a>乘坐交通工具的策略接口<code>StrategyInterface.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">strategy</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StrategyInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">takeTraffic</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="紧接着我们实现出行-Outing-Outing-php"><a href="#紧接着我们实现出行-Outing-Outing-php" class="headerlink" title="紧接着我们实现出行(Outing)Outing.php"></a>紧接着我们实现出行(Outing)<code>Outing.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">strategy</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 实体类</div><div class="line"> * 依赖外部不同策略的实体类</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outing</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 策略实例</div><div class="line">     * <span class="doctag">@var</span> Object</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> $traffic;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否改变策略</div><div class="line">     * <span class="doctag">@var</span> boolean</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> $isChangeMind = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(StrategyInterface $traffic)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;traffic = $traffic;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 改变策略</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">(StrategyInterface $traffic)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;traffic = $traffic;</div><div class="line">        <span class="keyword">$this</span>-&gt;isChangeMind = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">outing</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isChangeMind) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"改变策略\n"</span>;</div><div class="line">            <span class="keyword">$this</span>-&gt;traffic-&gt;takeTraffic();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;traffic-&gt;takeTraffic();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="然后-具体实现每一个策略OutingByCar-php和OutingBySubway-php"><a href="#然后-具体实现每一个策略OutingByCar-php和OutingBySubway-php" class="headerlink" title="然后,具体实现每一个策略OutingByCar.php和OutingBySubway.php"></a>然后,具体实现每一个策略<code>OutingByCar.php</code>和<code>OutingBySubway.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">strategy</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 观察者实体类示例</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutingByCar</span> <span class="keyword">implements</span> <span class="title">StrategyInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 行为</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">takeTraffic</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"选择自己开车出去玩 \n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">strategy</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 观察者实体类示例</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutingBySubway</span> <span class="keyword">implements</span> <span class="title">StrategyInterface</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 行为</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">takeTraffic</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"选择自己坐地铁出去玩 \n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们来测试一下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 行为型模式</div><div class="line"> *</div><div class="line"> * 策略模式</div><div class="line"> * 策略依照使用而定</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// 注册自加载</span></div><div class="line">spl_autoload_register(<span class="string">'autoload'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($class)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">require</span> dirname($_SERVER[<span class="string">'SCRIPT_FILENAME'</span>]) . <span class="string">'//..//'</span> . str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $class) . <span class="string">'.php'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">strategy</span>\<span class="title">Outing</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">strategy</span>\<span class="title">OutingByCar</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">strategy</span>\<span class="title">OutingBySubway</span>;</div><div class="line"></div><div class="line"><span class="comment">// 使用策略1</span></div><div class="line">$substance = <span class="keyword">new</span> Outing(<span class="keyword">new</span> OutingByCar);</div><div class="line">$substance-&gt;outing();</div><div class="line"><span class="comment">// 现在改变策略</span></div><div class="line">$substance-&gt;change(<span class="keyword">new</span> OutingBySubway);</div><div class="line"><span class="comment">// 使用策略2</span></div><div class="line">$substance-&gt;outing();</div></pre></td></tr></table></figure>
<p>运行的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">选择自己开车出去玩</div><div class="line">改变策略</div><div class="line">选择自己坐地铁出去玩</div></pre></td></tr></table></figure>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>策略模式避免了多重条件的转移语句，消除一些if else条件语句。</li>
<li>提供了可以替换继承关系的办法： 继承提供了另一种支持多种算法或行为的方法。</li>
<li>策略模式提供相同行为的不同实现，这样就可以根据不同的时间空间条件进行不同策略的选择。</li>
</ul>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li>
<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>
</ul>
<h2 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h2><ul>
<li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li>
<li>需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。</li>
<li>对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式通俗地说就是将不同的策略（算法）进行封装，让他们之间可以相互替换，此模式让策略的变化独立于使用策略的用户。&lt;/p&gt;
&lt;p&gt;在设计模式中有不同的设计原则，其中一条就是”将可能会变化的代码独立出来，不要和不变得代码混在一起“。&lt;/p&gt;
&lt;p&gt;现在举个例子就是，我们周末出
    
    </summary>
    
    
      <category term="设计模式" scheme="http://www.dyike.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go Package —— bufio包</title>
    <link href="http://www.dyike.com/2017/03/05/read-go-package-bufio/"/>
    <id>http://www.dyike.com/2017/03/05/read-go-package-bufio/</id>
    <published>2017-03-05T14:06:20.000Z</published>
    <updated>2017-03-06T12:58:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文阅读golang的bufio包，常用的函数，结构体以及方法</p>
<h2 id="scan-go"><a href="#scan-go" class="headerlink" title="scan.go"></a><em>scan.go</em></h2><h3 id="func-NewScanner-r-io-Reader-Scanner"><a href="#func-NewScanner-r-io-Reader-Scanner" class="headerlink" title="func NewScanner(r io.Reader) *Scanner"></a><code>func NewScanner(r io.Reader) *Scanner</code></h3><blockquote>
<p>返回一个新的Scanner从r读取。split函数默认为ScanLines。</p>
</blockquote>
<h3 id="func-ScanBytes-data-byte-atEOF-bool-advance-int-token-byte-err-error"><a href="#func-ScanBytes-data-byte-atEOF-bool-advance-int-token-byte-err-error" class="headerlink" title="func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)"></a><code>func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)</code></h3><blockquote>
<p>是scaner的一个分割函数，将每一个字节作为一个字符返回。</p>
</blockquote>
<h3 id="func-ScanLines-data-byte-atEOF-bool-advance-int-token-byte-err-error"><a href="#func-ScanLines-data-byte-atEOF-bool-advance-int-token-byte-err-error" class="headerlink" title="func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error)"></a><code>func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error)</code></h3><blockquote>
<p>ScanLines是一个Scanner的拆分函数，它返回每行文本，删除任何尾随的行尾标记。<br>返回的行可能为空。行结束标记是一个可选的回车，后跟一个强制换行。在正则表达式符号中，它是<code>\ r？\ n</code>。<br>最后一个非空行的输入将被返回，即使它没有换行符。</p>
</blockquote>
<h3 id="func-ScanRunes-data-byte-atEOF-bool-advance-int-token-byte-err-error"><a href="#func-ScanRunes-data-byte-atEOF-bool-advance-int-token-byte-err-error" class="headerlink" title="func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error)"></a><code>func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error)</code></h3><h3 id="func-ScanWords-data-byte-atEOF-bool-advance-int-token-byte-err-error"><a href="#func-ScanWords-data-byte-atEOF-bool-advance-int-token-byte-err-error" class="headerlink" title="func ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error)"></a><code>func ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error)</code></h3><blockquote>
<p>拆分函数，删除空格，返回空格分割的文字，永远不会返回一个空字符串。<br>空间定义由<code>unicode.IsSpace</code>设定。</p>
</blockquote>
<h3 id="func-s-Scanner-Err-error"><a href="#func-s-Scanner-Err-error" class="headerlink" title="func (s *Scanner) Err() error"></a><code>func (s *Scanner) Err() error</code></h3><h3 id="func-s-Scanner-Bytes-byte"><a href="#func-s-Scanner-Bytes-byte" class="headerlink" title="func (s *Scanner) Bytes() []byte"></a><code>func (s *Scanner) Bytes() []byte</code></h3><h3 id="func-s-Scanner-Text-string"><a href="#func-s-Scanner-Text-string" class="headerlink" title="func (s *Scanner) Text() string"></a><code>func (s *Scanner) Text() string</code></h3><h3 id="func-s-Scanner-Scan-bool"><a href="#func-s-Scanner-Scan-bool" class="headerlink" title="func (s *Scanner) Scan() bool"></a><code>func (s *Scanner) Scan() bool</code></h3><h3 id="func-s-Scanner-Buffer-buf-byte-max-int"><a href="#func-s-Scanner-Buffer-buf-byte-max-int" class="headerlink" title="func (s *Scanner) Buffer(buf []byte, max int)"></a><code>func (s *Scanner) Buffer(buf []byte, max int)</code></h3><h3 id="func-s-Scanner-Split-split-SplitFunc"><a href="#func-s-Scanner-Split-split-SplitFunc" class="headerlink" title="func (s *Scanner) Split(split SplitFunc)"></a><code>func (s *Scanner) Split(split SplitFunc)</code></h3><blockquote>
<p>SplitFunc 有四个：ScanBytes、ScanLines、ScanRunes、ScanWords。</p>
</blockquote>
<h2 id="bufio-go"><a href="#bufio-go" class="headerlink" title="bufio.go"></a><em>bufio.go</em></h2><h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><h3 id="func-NewReader-rd-io-Reader-Reader"><a href="#func-NewReader-rd-io-Reader-Reader" class="headerlink" title="func NewReader(rd io.Reader) *Reader"></a><code>func NewReader(rd io.Reader) *Reader</code></h3><blockquote>
<p>创建一个reader，其中buffer的Size是默认大小。<br>其实就是调用<code>func NewReaderSize(rd io.Reader, size int) *Reader</code></p>
</blockquote>
<h3 id="func-b-Reader-Reset-r-io-Reader"><a href="#func-b-Reader-Reset-r-io-Reader" class="headerlink" title="func (b *Reader) Reset(r io.Reader)"></a><code>func (b *Reader) Reset(r io.Reader)</code></h3><blockquote>
<p>Reset放弃所有缓冲数据，重置所有状态和切换从r读取的缓冲读取器。</p>
</blockquote>
<h3 id="func-b-Reader-Peek-n-int-byte-error"><a href="#func-b-Reader-Peek-n-int-byte-error" class="headerlink" title="func (b *Reader) Peek(n int) ([]byte, error)"></a><code>func (b *Reader) Peek(n int) ([]byte, error)</code></h3><blockquote>
<p>Peek返回下一个n字节，而不推进读取器。<br>如果Peek返回少于n个字节，它也返回一个错误，解释为什么读取短。<br>如果n大于b的缓冲区大小,错误是ErrBufferFull。</p>
</blockquote>
<h3 id="func-b-Reader-Discard-n-int-discarded-int-err-error"><a href="#func-b-Reader-Discard-n-int-discarded-int-err-error" class="headerlink" title="func (b *Reader) Discard(n int) (discarded int, err error)"></a><code>func (b *Reader) Discard(n int) (discarded int, err error)</code></h3><blockquote>
<p>Discard跳过接下来的n个字节，返回丢弃的字节数。<br>如果Discard跳过少于n个字节，它也返回一个错误。<br>如果0 &lt;= n &lt;= b.Buffered()，Discarding能够从底层的io.Reader读取。</p>
</blockquote>
<h3 id="func-b-Reader-Read-p-byte-n-int-err-error"><a href="#func-b-Reader-Read-p-byte-n-int-err-error" class="headerlink" title="func (b *Reader) Read(p []byte) (n int, err error)"></a><code>func (b *Reader) Read(p []byte) (n int, err error)</code></h3><h3 id="func-b-Reader-ReadByte-byte-error"><a href="#func-b-Reader-ReadByte-byte-error" class="headerlink" title="func (b *Reader) ReadByte() (byte, error)"></a><code>func (b *Reader) ReadByte() (byte, error)</code></h3><h3 id="func-b-Reader-UnreadByte-error"><a href="#func-b-Reader-UnreadByte-error" class="headerlink" title="func (b *Reader) UnreadByte() error"></a><code>func (b *Reader) UnreadByte() error</code></h3><h3 id="func-b-Reader-ReadRune-r-rune-size-int-err-error"><a href="#func-b-Reader-ReadRune-r-rune-size-int-err-error" class="headerlink" title="func (b *Reader) ReadRune() (r rune, size int, err error)"></a><code>func (b *Reader) ReadRune() (r rune, size int, err error)</code></h3><h3 id="func-b-Reader-UnreadRune-error"><a href="#func-b-Reader-UnreadRune-error" class="headerlink" title="func (b *Reader) UnreadRune() error"></a><code>func (b *Reader) UnreadRune() error</code></h3><h3 id="func-b-Reader-Buffered-int"><a href="#func-b-Reader-Buffered-int" class="headerlink" title="func (b *Reader) Buffered() int"></a><code>func (b *Reader) Buffered() int</code></h3><h3 id="func-b-Reader-ReadSlice-delim-byte-line-byte-err-error"><a href="#func-b-Reader-ReadSlice-delim-byte-line-byte-err-error" class="headerlink" title="func (b *Reader) ReadSlice(delim byte) (line []byte, err error)"></a><code>func (b *Reader) ReadSlice(delim byte) (line []byte, err error)</code></h3><h3 id="func-b-Reader-ReadLine-line-byte-isPrefix-bool-err-error"><a href="#func-b-Reader-ReadLine-line-byte-isPrefix-bool-err-error" class="headerlink" title="func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error)"></a><code>func (b *Reader) ReadLine() (line []byte, isPrefix bool, err error)</code></h3><h3 id="func-b-Reader-ReadBytes-delim-byte-byte-error"><a href="#func-b-Reader-ReadBytes-delim-byte-byte-error" class="headerlink" title="func (b *Reader) ReadBytes(delim byte) ([]byte, error)"></a><code>func (b *Reader) ReadBytes(delim byte) ([]byte, error)</code></h3><h3 id="func-b-Reader-ReadString-delim-byte-string-error"><a href="#func-b-Reader-ReadString-delim-byte-string-error" class="headerlink" title="func (b *Reader) ReadString(delim byte) (string, error)"></a><code>func (b *Reader) ReadString(delim byte) (string, error)</code></h3><h3 id="func-b-Reader-WriteTo-w-io-Writer-n-int64-err-error"><a href="#func-b-Reader-WriteTo-w-io-Writer-n-int64-err-error" class="headerlink" title="func (b *Reader) WriteTo(w io.Writer) (n int64, err error)"></a><code>func (b *Reader) WriteTo(w io.Writer) (n int64, err error)</code></h3><h2 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h2><h3 id="func-NewWriterSize-w-io-Writer-size-int-Writer"><a href="#func-NewWriterSize-w-io-Writer-size-int-Writer" class="headerlink" title="func NewWriterSize(w io.Writer, size int) *Writer"></a><code>func NewWriterSize(w io.Writer, size int) *Writer</code></h3><h3 id="func-NewWriter-w-io-Writer-Writer"><a href="#func-NewWriter-w-io-Writer-Writer" class="headerlink" title="func NewWriter(w io.Writer) *Writer"></a><code>func NewWriter(w io.Writer) *Writer</code></h3><h3 id="func-b-Writer-Reset-w-io-Writer"><a href="#func-b-Writer-Reset-w-io-Writer" class="headerlink" title="func (b *Writer) Reset(w io.Writer)"></a><code>func (b *Writer) Reset(w io.Writer)</code></h3><h3 id="func-b-Writer-Flush-error"><a href="#func-b-Writer-Flush-error" class="headerlink" title="func (b *Writer) Flush() error"></a><code>func (b *Writer) Flush() error</code></h3><h3 id="func-b-Writer-Available-int"><a href="#func-b-Writer-Available-int" class="headerlink" title="func (b *Writer) Available() int"></a><code>func (b *Writer) Available() int</code></h3><h3 id="func-b-Writer-Buffered-int"><a href="#func-b-Writer-Buffered-int" class="headerlink" title="func (b *Writer) Buffered() int"></a><code>func (b *Writer) Buffered() int</code></h3><h3 id="func-b-Writer-Write-p-byte-nn-int-err-error"><a href="#func-b-Writer-Write-p-byte-nn-int-err-error" class="headerlink" title="func (b *Writer) Write(p []byte) (nn int, err error)"></a><code>func (b *Writer) Write(p []byte) (nn int, err error)</code></h3><h3 id="func-b-Writer-WriteByte-c-byte-error"><a href="#func-b-Writer-WriteByte-c-byte-error" class="headerlink" title="func (b *Writer) WriteByte(c byte) error"></a><code>func (b *Writer) WriteByte(c byte) error</code></h3><h3 id="func-b-Writer-WriteRune-r-rune-size-int-err-error"><a href="#func-b-Writer-WriteRune-r-rune-size-int-err-error" class="headerlink" title="func (b *Writer) WriteRune(r rune) (size int, err error)"></a><code>func (b *Writer) WriteRune(r rune) (size int, err error)</code></h3><h3 id="func-b-Writer-WriteString-s-string-int-error"><a href="#func-b-Writer-WriteString-s-string-int-error" class="headerlink" title="func (b *Writer) WriteString(s string) (int, error)"></a><code>func (b *Writer) WriteString(s string) (int, error)</code></h3><h3 id="func-b-Writer-ReadFrom-r-io-Reader-n-int64-err-error"><a href="#func-b-Writer-ReadFrom-r-io-Reader-n-int64-err-error" class="headerlink" title="func (b *Writer) ReadFrom(r io.Reader) (n int64, err error)"></a><code>func (b *Writer) ReadFrom(r io.Reader) (n int64, err error)</code></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文阅读golang的bufio包，常用的函数，结构体以及方法&lt;/p&gt;
&lt;h2 id=&quot;scan-go&quot;&gt;&lt;a href=&quot;#scan-go&quot; class=&quot;headerlink&quot; title=&quot;scan.go&quot;&gt;&lt;/a&gt;&lt;em&gt;scan.go&lt;/em&gt;&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
    
      <category term="golang" scheme="http://www.dyike.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>制定一个高效的计划</title>
    <link href="http://www.dyike.com/2017/02/26/how-make-an-effective-plan/"/>
    <id>http://www.dyike.com/2017/02/26/how-make-an-effective-plan/</id>
    <published>2017-02-26T11:51:22.000Z</published>
    <updated>2017-02-26T12:44:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇应该是今年的第一篇吧，好久没有写文章了，这个周末修整了两天。前些日子做了一个模块，都谈不上一个独立的项目，真的搞得筋疲力尽的。从过完年就开始搞这个，年前还做了两天的准备。按理说两个周的时间是足够的，但是最终做了快一个月。因为换到新框架上，使用laravel来搞我并没有娴熟地用好这个框架，这中间还踩了一些坑，有那么三两天时间感觉进度就是上不去。还有我觉得最主要的原因，是我做的都是假需求，这个真的让我很心累。不管怎样，事情就是这样发生，从自身找原因吧，现在开始要好好给自己的工作做一个打算规划，以及学习的目标和进度。</p>
<p><em>宏观上讲：</em><br>今年要完成的就是</p>
<ul>
<li>要深入理解PHP(需要看源码了)，学习扩展开发，这样做也是为了拾起一些基础知识和底层的，面试常常会问到这些问题。</li>
<li>golang也要继续深入了，不能只能停留在会使用框架的基础上，看看能不能在项目中尝试使用golang做API项目。</li>
<li>看一些书，做到一定量的阅读，今年的阅读除了技术相关的，会着重偏产品这一块。</li>
<li>这个是最重要的，学习一门强类型的语言——Java。为什么要学它，杭州基本都是Java系，交到朋友至少能聊到一块去，对以后的求职也是增加计划。</li>
<li>注意身体，坚持锻炼身体。</li>
<li>还有时间就做自己喜欢的事，折腾硬件、写swift</li>
</ul>
<p>要想完成这些，需要的合理地、高效地使用时间，其实每天有很多时间是浪费的，边缘时间充分利用的话还是可以做很多的事，为什么之前没能使用起一些边缘时间，还不是因为没有一个明确的计划。比如我要在一周里面看完一本书。</p>
<p><em>微观上谈：</em><br>每天我7点就起床了，其实公司上班是弹性的，朝九晚六朝十晚七，就目前看，也真的没必要每天八点半就往公司赶，十五分钟就走到公司了。为了充分利用时间我每天应该9点出门去公司，这样每天早上就有至少一个半小时的时间看书，中午休息的一个小时，如果不休息的话，我觉得这一个小时还是可以看书的。下班回来也有三四个小时，这段时间可以用来写一些代码，逛逛社区，玩玩游戏，撩撩妹子，总之可以细化一些任务出来。下班回来前可以锻个练。</p>
<p>周末的话，天儿好的时候，一定要出门溜溜了，去年来杭州半年达成的成就就是——周末全宅家里了。春天来了，应该出去走走。充分考虑到杭州好像是每周都是要下雨的，如果碰巧赶上下雨，就在家看书？也不啊，小区后面不是电影院也可以看看有没有好看的电影，总之周末至少有一天时间是玩的。如果真的是高效的话，劳逸结合真是相当必要的。</p>
<p>写了这么多，至少现在清晰了一些计划和思路，不写了去学习算法去了，一周时间搞定那本算法的书。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇应该是今年的第一篇吧，好久没有写文章了，这个周末修整了两天。前些日子做了一个模块，都谈不上一个独立的项目，真的搞得筋疲力尽的。从过完年就开始搞这个，年前还做了两天的准备。按理说两个周的时间是足够的，但是最终做了快一个月。因为换到新框架上，使用laravel来搞我并没有娴
    
    </summary>
    
    
      <category term="学习" scheme="http://www.dyike.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2016年总结</title>
    <link href="http://www.dyike.com/2016/12/25/2016-in-all/"/>
    <id>http://www.dyike.com/2016/12/25/2016-in-all/</id>
    <published>2016-12-25T06:09:21.000Z</published>
    <updated>2016-12-25T09:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得真快，又一年过去了，不知道从什么时候开始喜欢写年度总结的，最开始好像是在51空间上写，那个时候还是高中的时候，后来就在QQ空间上写，再后来到读大学，在自己的blog上写。去年的总结是我在考研结束的那天晚上开始写的，写了两天。这真巧，今天正好也是今年考研的第二天，趁着圣诞的气息，该交作业了。</p>
<p>先祝大家圣诞快乐，其次就是向大家拜个早年，鸡年大吉。</p>
<p>2016年，元旦的时候，在学校的跨年晚会上，感叹，就这么进入本命年了。这一年，好多不太顺利。往好处想想，这些都是好事，有些事情经历了总是好的。最大的感触，就是自己跟身边的人还是有很大的差距的。</p>
<h3 id="说几件事吧："><a href="#说几件事吧：" class="headerlink" title="说几件事吧："></a>说几件事吧：</h3><h4 id="第一：考研"><a href="#第一：考研" class="headerlink" title="第一：考研"></a>第一：考研</h4><p>我不知道去年我是怎么决定考研的，做这个决定后悔吗？后悔，也不后悔。一分为二地看，现在看来，这已经不是很重要了。后来也算明白了一个道理，考研考上了跟没有考上，对你的未来未必有多大的联系，所以不要在意结果，注重过程，自己能开心就好。</p>
<h4 id="第二：实习"><a href="#第二：实习" class="headerlink" title="第二：实习"></a>第二：实习</h4><p>考研结束了，就寻思着要实习，毕竟大四了，应该找一份正规一点的实习工作，不想总像之前的那样折腾打杂的，那样也学不到太多的东西。这个时候就找胡波大大求一份实习，坦率的讲，面试感觉很不好，胡波也给我一些鼓励。后来差不多三月份去渣浪实习了，开始接触PHP了，实习的三个月里，学了一些自己之前不知道的东西，这三个多月也是吊儿郎当的，其实不应该这样。由于之前考研，也没有参加什么校招之类的，在三四月份的时候，在关注春招，还面腾讯的测试岗，问啥啥不会，就是那种感觉。后来又面360的游戏平台的开发，那次面试还是学到了不少。不管面试的结果怎么样，我面完了都会总结。面多了就有感觉了，大家问的题目都是类似的。最喜欢在渣浪的日子，抛出问题总能找到能一起讨论的人。还有就是大家都喜欢自黑，往死黑的那种，那种感觉很爽，我不知道这算不算一种团队文化。后来的故事就不多说了，总之还认识许多渣浪的朋友，大家有缘江湖再见呗。</p>
<h4 id="第三：毕业-来杭州"><a href="#第三：毕业-来杭州" class="headerlink" title="第三：毕业+来杭州"></a>第三：毕业+来杭州</h4><p>啊，大学四年就这么结束了，还记得当初从家拖着两个箱子去学校报道的时候。冬去春来，年复一年又一年，四年都过得这么快，更别说这一年过得这么快了。毕业前给自己定的规划就是：毕业后，在北京呆一两年，然后回南方。就这个事，跟我爸不知道在电话里唠叨了多少次了。别的同学其实也是这样，有的留在北京有的选择回家有的选择继续学习读研出国，总之大家都有一个自己的目标，大家都在为自己的目标奋斗。只有到毕业的时候，才觉得在学校的日子是多么的珍贵，幸好没有哭得稀里哗啦的。</p>
<p>毕业本来是留在北京的，房子都找好了，后来在入职上有点拖拉，而且还不是很保险，不能一直吊在一棵树上嘛。毕业后半个月开始寻找新的工作，朋友帮我找了好几家，去面的也只有两家。后来想了想要么就回到南方吧，反正早晚要回去的，还不如现在就回去。果断退掉了房子（虽然被扣了不少钱，呆北京我也没有多少钱可以交房租了），然后跟朋友挤了一晚上，然后就去杭州面试了，新的生活新的环境还是算可以。没有想到这么快就来到了南方了，而且也没有太大的准备。现在在花厂上班，好好对待第一份工作。</p>
<h3 id="学习技术"><a href="#学习技术" class="headerlink" title="学习技术"></a>学习技术</h3><p>从去年考研的时候，就决定要搞技术，毕竟技术是硬实力，到哪儿都会有碗饭吃。差不多那个时候开始七七八八就开始写PHP了。回首这一年自己折腾的东西挺多的。坑挖得比较多，但挖得都不深。有的时候选择不一，所以刨的坑比较多。既然刨了那么多坑还是写出来吧。</p>
<ul>
<li>年初的时候，参加Swift大会，认识了一些人，再加之去年玩arduino的时候接触了一点swift做iOS App，自然而然入门了swift3，总得来说，这个还是值得学习的一门语言，毕竟我之前没有怎么接触强类型的语言。最近写用swift写一个App，才完成了三分之一，我不知道啥时候可以写出来。</li>
<li>看了一本golang的书《go语言圣经》，会写的那种，谈不上深入，挺喜欢谢大搞的社区(gocn.io)。</li>
<li>七拽八歪地接触了Rust，一门注重高效、安全、并行的系统程序语言，写起来跟go一样爽，比go还好的是支持泛型。希望有一天能用到实际项目中。</li>
<li>还有就是吵得比较火热的前端，我也接触一点Vue.js。前端让我写CSS简直是折磨我，大概就是没有在这一块找到我的兴趣点。</li>
</ul>
<h3 id="看的书"><a href="#看的书" class="headerlink" title="看的书"></a>看的书</h3><p>今年买的书，技术方面的书比较多，自从工作了之后，发现自身暴露出的问题还是挺多的，在买书上面也不再那么吝啬了，相信付出总是有回报的。</p>
<h3 id="做的饭"><a href="#做的饭" class="headerlink" title="做的饭"></a>做的饭</h3><p>周末常常自己做饭，尝试了一些新花样，好多失败了。反正自己能做的也有两道拿手的菜，还有自己做的饭不至于那么的难吃，哈哈哈！</p>
<h3 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h3><p>年初制定的一些目标，实现了一部分，也有一些没有实现越来越远。总之，本命年过得不太顺，自己得到了一些成长。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>2016，即便不好，不还是过过来了嘛，2017年会更好，技术有进步，去实现自己的小想法。</p>
<p>2017年，不挖坑，深挖坑！写好每一段代码，看好每一本书，做好每一道菜。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间过得真快，又一年过去了，不知道从什么时候开始喜欢写年度总结的，最开始好像是在51空间上写，那个时候还是高中的时候，后来就在QQ空间上写，再后来到读大学，在自己的blog上写。去年的总结是我在考研结束的那天晚上开始写的，写了两天。这真巧，今天正好也是今年考研的第二天，趁着
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Programming iOS9（Swift3）学习笔记——主要内容transform</title>
    <link href="http://www.dyike.com/2016/11/28/ios-learn-note-view-bounds-transform/"/>
    <id>http://www.dyike.com/2016/11/28/ios-learn-note-view-bounds-transform/</id>
    <published>2016-11-28T14:22:07.000Z</published>
    <updated>2016-11-30T00:03:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。</p>
<p>这个笔记谈不上翻译，当然目前很大一部分是借鉴<a href="http://wdxtub.com/" target="_blank" rel="external">http://wdxtub.com/</a> 这个blog里的笔记【这个blog文章我常看】，我只是在上面作了一些修改。</p>
<p>为什么这么说呢？因为我操作的环境是在swift3+Xcode8+iOS10。</p>
<p>我只是业余的、业余的、业余的学习iOS开发，如果里面什么错误，欢迎指正！欢迎iOS大牛带我飞。</p>
</blockquote>
<h2 id="首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）："><a href="#首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）：" class="headerlink" title="首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）："></a>首先补充一些知识点（关于CGRect、“NS”和UserDefaults的变化）：</h2><blockquote>
<p>CGRect：<br>Swift 2:<br>let frame = CGRectMake(0, 0, 20, 20)<br>Swift 3:<br>let frame = CGRect(x: 0, y: 0, width: 20, height: 20)</p>
<p>CGPoint<br>Swift 2:<br>let point = CGPointMake(0, 0)<br>Swift 3:<br>let point = CGPoint(x: 0, y: 0)</p>
<p>CGSize<br>Swift 2:<br>let size = CGSizeMake(20, 20)<br>Swift 3:<br>let size = CGSize(width: 20, height: 20)</p>
<p>UIColor<br>Swift 2:<br>let color = UIColor.redColor()<br>Swift 3:<br>let color = UIColor.red</p>
<p>“NS”<br>Swift 2:<br>NSTimer<br>NSData<br>NSError<br>Swift 3:<br>Timer<br>Data<br>Error</p>
<p>UserDefaults<br>Swift 2:<br>NSUserDefaults.standardUserDefaults().//something<br>Swift 3:<br>UserDefaults.standard.//something</p>
</blockquote>
<h3 id="Bounds-and-Center"><a href="#Bounds-and-Center" class="headerlink" title="Bounds and Center"></a>Bounds and Center</h3><p>假设有一个Superview和一个subview，subview是被嵌入了10个points。如图所示：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds1.png" alt="view-demo"><br>实现上图的代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">        v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">        v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">        mainview?.addSubview(v1)</div><div class="line">        v1.addSubview(v2)</div></pre></td></tr></table></figure></p>
<p>关于bounds的属性是一个view在自己的坐标系中的矩形尺寸（frame是在superview的坐标系的）。<br>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds2.png" alt="view-demo"></p>
<p>我们通常都是如此使用bounds的用法。当你需要往一个view里面放东西的时候，无论是手动绘制们还是放一个subview，通常都要使用view的bounds。</p>
<p>当你改变一个view的bounds，他的frame也会对应改变，frame的改变是基于其中心点的（中心点不会变）。</p>
<p>在上面的代码增加两行：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v2.bounds.size.height += <span class="number">20</span></div><div class="line">v2.bounds.size.width += <span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>效果图如下：就是v2基于中心点不变，height和width属性值都增加了20个points，结果就是完全覆盖了紫色的view。<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds3.png" alt="view-demo"></p>
<p>还可以变着花样来：</p>
<p>再增加两行代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v1.bounds.origin.x += <span class="number">10</span></div><div class="line">v1.bounds.origin.y += <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/bounds4.png" alt="view-demo"></p>
<p>不难看出view向原点移动方向的反方向进行了移动，这个因为一个view 的原点是与其frame的左上角一致。</p>
<p>其实我们可以发现：改变view的bounds size是会影响frame的Size，反之亦然，唯一不变的是view的center，。这个属性，跟frame的属性一样，这表示一个subview的位置是在其Superview的坐标系中的位置。通过下面的代码是可以获取的：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">CGPoint</span>(theView.bounds.midX, theView.bounds.midY)</div></pre></td></tr></table></figure></p>
<p>改变 view 的 bounds 不会影响其 center，改变一个 view 的 center 不会影响其 bounds。所以其实一个 view 的 bounds 和 center 就可以确定其在 superview 中的位置，frame 可以看作是一个由 bounds 和 center 组成的表达式的简便写法而已。注意有些情况下 frame 会没有什么意义，但是 bounds 和 center 总是有效的，所以建议多用 bounds 和 center 的组合，也比较容易理解。</p>
<ul>
<li>bounds: 一个 view 自己的坐标系统</li>
<li>center: 一个 view 的坐标系统和其 superview 的坐标系统的关系</li>
</ul>
<p>以下方法是可以进行不同view之间的坐标转换：</p>
<ul>
<li>convert(point: CGPoint, from: UIView?), convert(point: CGPoint, to: UIView?)</li>
<li>convert(rect: CGRect, from: UIView?), convert(rect: CGRect, to: UIView?)</li>
</ul>
<p>如果第二参数为nil，那么就取window的值。比如：如果v2是v1的subview，那么要把v2放到v1的中心，就用：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v2.center  = v1.convert(v1.center, from: v1.superview)</div></pre></td></tr></table></figure></p>
<p>注意，通过改变 center 来设置 view 的位置时，如果高或宽不是偶数，那么可能会导致 misaligned。可以通过打开模拟器的 Debug -&gt; Color Misaligned Images 来进行检测。一个简单的方法是调整好位置之后调用 makeIntegralInPlace 来设置 view 的 frame。</p>
<h3 id="Window-Coordinates-和-Screen-Coordinates"><a href="#Window-Coordinates-和-Screen-Coordinates" class="headerlink" title="Window Coordinates 和 Screen Coordinates"></a>Window Coordinates 和 Screen Coordinates</h3><p>设备屏幕是没有 frame 的，但是有 bounds。Main window 也没有 superview，不过其 frame 被设置为屏幕的 bounds，如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div></pre></td></tr></table></figure>
<p>在绝大数的情况下，window 坐标系就是 screen 坐标系。现在的iOS中坐标系和手机是否选择是有关的，有如下两个属性：</p>
<ul>
<li><p>UIScreen 的 coordinateSpace 属性</p>
<blockquote>
<p>这个坐标空间会旋转，就是高和宽在设备旋转时会呼唤，（0.0， 0.0）是这个app本身的左上方 。</p>
</blockquote>
</li>
<li><p>UIScreen的fixedCoordinateSpace 属性</p>
<blockquote>
<p>这个坐标空间不会变化，就是物理上的左上角，从用户来看，这里的 (0.0, 0.0) 可能是 app 本身的任何一个角。</p>
</blockquote>
</li>
</ul>
<p>可以用下面的方法来对不同坐标空间进行转换：</p>
<ul>
<li>convert(point: CGPoint, from: UICoordinateSpace), convert(point: CGPoint, to: UICoordinateSpace),</li>
<li>convert(rect: CGRect, from: UICoordinateSpace), convert(rect: CGRect, to: UICoordinateSpace)</li>
</ul>
<p>假设界面中有一个 UIView v，我们想知道它的实际设备坐标，可以用下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> r = v.superview!.convert(v.frame, to: <span class="type">UIScreen</span>.main.fixedCoordinateSpace)</div></pre></td></tr></table></figure>
<h3 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h3><p>一个 view 的 transform 属性改变这个 view 是如何被绘制的，实际上就是一个 CGAffineTransform类的 3x3 矩阵。所有的变换都是以这个view的center做基准的，下面的具体实例：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图入下：旋转了45度<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform1.png" alt="view-demo"></p>
<p>注意，这里的view的center和bounds都没有变，但是frame的数值已经没有意义，因为现在它的尺寸是能够覆盖当前view的最小矩形，并不会随着view的旋转而旋转。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.8</span>, y: <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform2.png" alt="view-demo"></p>
<p>view的bounds仍然不收影响，因为subview仍然绘制在相对于Superview的位置。也就是说这个两个view在水平方向一起拉伸。</p>
<p>代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">20</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds)</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v2.transform = <span class="type">CGAffineTransform</span>(translationX: <span class="number">100</span>, y: <span class="number">0</span>)</div><div class="line">v2.transform = v2.transform.rotated(by: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform3.png" alt="view-demo"></p>
<p>再变，代码只需要改动如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v2.transform = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div><div class="line">v2.transform = v2.transform.translatedBy(x: <span class="number">100</span>, y: <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform4.png" alt="view-demo"></p>
<p>还有一种方法能实现上图的效果：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> r = <span class="type">CGAffineTransform</span>(rotationAngle: <span class="number">45</span> * <span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180.0</span>)</div><div class="line"><span class="keyword">let</span> t = <span class="type">CGAffineTransform</span>(translationX: <span class="number">100</span>, y: <span class="number">0</span>)</div><div class="line">v2.transform = t.concatenating(r)</div></pre></td></tr></table></figure></p>
<p>继续增加下面的代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v2.transform = r.inverted().concatenating(v2.transform)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform5.png" alt="view-demo"></p>
<p>再来一个变换：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: v1.bounds.insetBy(dx: <span class="number">10</span>, dy: <span class="number">10</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">v1.transform = <span class="type">CGAffineTransform</span>(a: <span class="number">1</span>, b: <span class="number">0</span>, <span class="built_in">c</span>: -<span class="number">0.2</span>, d: <span class="number">1</span>, tx: <span class="number">0</span>, ty: <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>效果图如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/transform6.png" alt="view-demo"></p>
<h3 id="Trait-Collections-and-Size-Classes"><a href="#Trait-Collections-and-Size-Classes" class="headerlink" title="Trait Collections and Size Classes"></a>Trait Collections and Size Classes</h3><p>界面上的每个 view 都有一个 traitCollection 属性，值是一个 UITraitCollection，包含下面四个属性：</p>
<ul>
<li>displayScale，由当前屏幕决定的缩放尺寸，1(single resolution) 2(double resolution) 3(iPhone 6/6s/7 Plus)</li>
<li>userInterfaceIdiom，一个 UserIterfaceIdiom 值，可能是 .Phone 或 .Pad，来标志不同的设备，默认来说和 UIDevice 的 userInterfaceIdiom 属性一致.</li>
<li>horizontalSizeClass, verticalSizeClass，是 UIUserInterfaceSizeClass 值，可能是 .Regular 或 .Compact<blockquote>
<p>水平和竖直都是 .Regular -&gt; iPad</p>
<p>水平是 .Compact 竖直是 .Regular -&gt; iPhone 在垂直方向，或者 iPad 的分屏应用</p>
<p>水平和竖直都是 .Compact -&gt; iPhone 在水平方向(iPhone 6/6s/7 plus除外)</p>
<p>水平是 .Regular 竖直是 .Compact -&gt; iPhone 6/6s/7 Plus 在水平方向</p>
</blockquote>
</li>
</ul>
<p>当应用运行时如果 trait collection 发生改变，会调用 traitCollectionDidChange 方法。</p>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p>假设superview的bounds变化，其subview的bounds和center是不会变的，实际应用中，我们可能更需要subview根据Superview的变化而变化，这就是Layout。</p>
<p>Layout的主要执行方式：</p>
<ul>
<li><p>Manual layout（手动layout）<br>superview在被更改尺寸会发送layoutSubview消息，如果你新建自己的子类，并且重写layoutSuperview就可以手动更改，这个很麻烦，但是可以做任何你想做的事。</p>
</li>
<li><p>Autoresizing<br>Autoresizing是iOS6之前的方式，主要通过自己的autoresizingMask属性来变化。</p>
</li>
<li><p>Authlayout<br>iOS6中引入的，取决于view的constraints（NSLayoutConstraint的实例）。Autolayout是在layoutSubview的幕后实现，不需要代码也能实现复杂的layoutSubview功能。</p>
</li>
</ul>
<p>通常不会用到手动 layout，autoresizing 基本也是自动的，autolayout 主要在 xCode 的编辑器中进行设定。在代码中创建的 view 默认使用 autoresizing 而不是 autolayout。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。&lt;/p&gt;
&lt;p&gt;这个笔记谈不上翻译，当然目前很大一部分是借鉴&lt;a href=&quot;http://wdxtub.com/&quot; target=&quot;_b
    
    </summary>
    
    
      <category term="iOS，swift" scheme="http://www.dyike.com/tags/iOS%EF%BC%8Cswift/"/>
    
  </entry>
  
  <entry>
    <title>Programming iOS 9 学习笔记-view实验</title>
    <link href="http://www.dyike.com/2016/11/27/ios-learn-note-view-experment/"/>
    <id>http://www.dyike.com/2016/11/27/ios-learn-note-view-experment/</id>
    <published>2016-11-27T13:11:30.000Z</published>
    <updated>2016-11-30T00:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。我看过几次了，每次看的都是从第一个章节开始，过不了两张就不看了。汗死了，现在都是iOS10了，swift3都发布很久了，swift3相对前两个版本来说好很多，改动相当的大，所以说swift的每一个版本都可以算一个新语言。我最近把swift3的文档过了一遍（之前只看过swift1的，swift2没怎么看过）现在又拿出这个本书出来学习。</p>
<p>这个笔记谈不上翻译，当然目前很大一部分是借鉴<a href="http://wdxtub.com/" target="_blank" rel="external">http://wdxtub.com/</a> 这个blog里的笔记【这个blog文章我常看】，我只是在上面作了一些修改。</p>
<p>为什么这么说呢？因为我操作的环境是在swift3+Xcode8+iOS10。</p>
<p>我只是业余的、业余的、业余的学习iOS开发，如果里面什么错误，欢迎指正！欢迎iOS大牛带我飞。</p>
</blockquote>
<h3 id="View的实验"><a href="#View的实验" class="headerlink" title="View的实验"></a>View的实验</h3><p>这里做几个简单的介绍和实验操作：</p>
<h4 id="single-View-Application-："><a href="#single-View-Application-：" class="headerlink" title="single View Application ："></a>single View Application ：</h4><p>一个single view application项目创建后，你将会看到一个包含一个页面的main storyboard 以及一个包含一个main view的view controller的实例。app运行起来，view controller将会成为app的main window的rootViewController，它的main view将会变成window的root view。</p>
<p>在ViewController.swift文件中修改viewDidLoaded()：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="keyword">let</span> mainview = <span class="keyword">self</span>.view</div><div class="line">    <span class="keyword">let</span> v = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">200</span>, width: <span class="number">50</span>, height: <span class="number">50</span>))</div><div class="line">    v.backgroundColor = <span class="type">UIColor</span>.blue   <span class="comment">// small blue square</span></div><div class="line">    mainview?.addSubview(v)    <span class="comment">// add it to main view</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="App-without-a-main-storyboard（-这个例子我就省略了）"><a href="#App-without-a-main-storyboard（-这个例子我就省略了）" class="headerlink" title="App without a main storyboard（ 这个例子我就省略了）"></a>App without a main storyboard（ 这个例子我就省略了）</h4><h3 id="Subview-和-Superview"><a href="#Subview-和-Superview" class="headerlink" title="Subview 和 Superview"></a>Subview 和 Superview</h3><p>在iOS中，一个的subview的一部分或者全部，可以出现在superview之外。一个view可以与另外一个view重叠，也可以在一个view前面绘制部分或全部。<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/view-demo.png" alt="view-demo"></p>
<p>上图三个view都有一个背景颜色，每一个view都相当于是一个带有颜色的矩形。光看上面的图是没法区别这个三个view之间的关系，其实，中间的view（水平方向）是左边view的sibling view。右边的view是中view的一个subview。</p>
<p> view hierarchy的一些特点：</p>
<ul>
<li>一个view被移出，或者引入他的superview，它的subview也会被引入。</li>
<li>一个view的透明度会被其subview继承。</li>
<li>一个view可以限制subview的显示范围。比如不让subview超出view本身的范围，这个叫做clipping，被设置在view的clipsToBounds属性中。</li>
<li>一个superview拥有它的subview。</li>
<li>如果改变一个view的大小，那么它的subview也会被自动设置尺寸。</li>
</ul>
<p>一个UIView有一个superview的属性（一个UIView）和一个subviews属性（一个UIView对象的数组，back-to-front的顺序），在代码中可以判断view hierarchy。有一个方法isDescendantOfView：用来检查一个view是否是另一个view的subview。View还有一个tag属性，有一个方法viewWithTag进行引用。</p>
<blockquote>
<p>注意：这里的这两个func 在swift3中跟swift2有点不一样：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isDescendantOfView</span><span class="params">(view: UIView)</span></span> -&gt; <span class="type">Bool</span>  </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewWithTag</span><span class="params">(tag: Int)</span></span> -&gt; <span class="type">UIView</span>?</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在代码中操作view hierarchy是非常简单的！</p>
<blockquote>
<p>addSubview方法添加一个subview。比如：view.addSubview(button)。<br>removeFromSuperview方法移除一个subview。比如：xxxView.removeFromSuperview();</p>
</blockquote>
<p>注意从superview中移除subview同时也会释放它。如果以后需要重用的话，最好先确定能够把它保存在内存中，通常的方法是把这个view保存在一个属性中。</p>
<p>在进行这些操作时系统也会给出通知，重写下列方法就可以根据需要在不同的情况下进行不同的操作：</p>
<ul>
<li>didAddSubview, willRemoveSubview</li>
<li>didMoveToSuperview, willMoveToSuperview</li>
<li>didMoveToWindow, willMoveToWindow</li>
</ul>
<p>当调用了addSubview，这个view也会被放到其superview的subview数组中的最后一个，也就是说这个view会被最后一个渲染出来。如果view的subviews是被索引的，从0开始（rearmost），这样就可以把view插入到指定位置，已经放到前面/后面，或两个view进行交互。</p>
<ul>
<li>swift3：// Insert subview at specific position<br>insertSubview(_:at:)<br>比如:<br>let f1 = someView.insertSubview(view: at:)</li>
<li>swift3：// Insert subview above/below a specific subview<br>insertSubview(<em>:aboveSubview:)<br>insertSubview(</em>:belowSubview:)<br>比如：<br>let f2 = someView.insertSubview(view: aboveSubview:)<br>let f3 = someView.insertSubview(view: belowSubview:)</li>
<li>swift3: // Exchange two subview’s position<br>exchangeSubview(at:withSubviewAt:)</li>
<li>swift3：// Bring the subview to the front or back of its sibling<br>bringSubview(toFront:)<br>sendSubview(toBack:)</li>
</ul>
<p>看到这里，你可能会感觉有点奇怪，没有一个方法可以直接移除一个superview的所有subview。然后，因为一个superview的subivew数组是一个不可变的数组，遍历subiviews数组，然后依次执行removeFromSuperview()就大差不差了！比如：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rootView.subviews.forEach &#123; $<span class="number">0</span>.removeFromSuperview() &#125;</div></pre></td></tr></table></figure></p>
<h3 id="Visibility-and-Opacity-可见度和不透明"><a href="#Visibility-and-Opacity-可见度和不透明" class="headerlink" title="Visibility and Opacity(可见度和不透明)"></a>Visibility and Opacity(可见度和不透明)</h3><p>一个view的可见度是可以通过hidden属性来设置的。隐藏一个view（包括subview）只是从界面上隐藏，而不需要从view hierarchy结构中删除。一个隐藏的view不能接受触摸的事件。（用户看不到而已，其实是存在的）</p>
<p>backgroundColor属性可以设置view的背景颜色，颜色是属于UIColor类，颜色背景为nil的view，默认是具有透明背景的。</p>
<p>可以通过设置 view 的 alpha 属性来修改透明程度，1.0 是完全不透明，0.0 是透明。假设一个 view 的 alpha 是 0.5，那么它的 subview 的 alpha 都是以 0.5 为基准的，不可能高于 0.5。而 UIColor 也有 alpha 这个属性，所以即使一个 view 的 alpha 是 1.0，它仍旧可能是透明的，因为其 backgroundColor 可以是透明的。一个 alpha 为 0.0 的 view 是完全透明的所以是不可见的，通常来说也不可能被点击。</p>
<p>View 的 alpha 属性不仅影响背景颜色，也会影响其内容的透明度。</p>
<p>view的opaque属性的修改不会影响view的样子，更多的是对于系统绘制的提示。如果一个view的opaque设置true，因为不用考虑透明的绘制，所以效率高一点。并且再设置透明的背景颜色或者 alpha 属性都无效。可能会让人吃惊，它的默认值是 true。</p>
<h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><p>view的frame属性（CGRect类）是他本身的长方形在superview中位置，注意是在superview的坐标系中国的位置。默认来说，superview的坐标系圆点在坐上，向右x增加，向下y增加。</p>
<p>给view的frame设置不同的CGRect属性值，能够改变view的view的位置或者改变尺寸大小（同时改变也可以）。</p>
<p>现在我们画上图大差不差的图：我们在AppDelegate.swift中func application()增加下面几行代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//here we can add subviews</span></div><div class="line"><span class="keyword">let</span> mainview = <span class="keyword">self</span>.window!.rootViewController!.view</div><div class="line"></div><div class="line"><span class="keyword">let</span> v1 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">113</span>, y: <span class="number">111</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v1.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0.4</span>, blue: <span class="number">1</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> v2 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">41</span>, y: <span class="number">56</span>, width: <span class="number">132</span>, height: <span class="number">194</span>))</div><div class="line">v2.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">0.5</span>, green: <span class="number">1</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> v3 = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">43</span>, y: <span class="number">197</span>, width: <span class="number">160</span>, height: <span class="number">230</span>))</div><div class="line">v3.backgroundColor = <span class="type">UIColor</span>(red: <span class="number">1</span>, green: <span class="number">0</span>, blue: <span class="number">0</span>, alpha: <span class="number">1</span>)</div><div class="line"></div><div class="line">mainview?.addSubview(v1)</div><div class="line">v1.addSubview(v2)</div><div class="line">mainview?.addSubview(v3)</div></pre></td></tr></table></figure></p>
<p>效果图如下：（v2是添加在v1上）</p>
<p><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/ios/view-ios10-1.png" alt="view-ios"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。我看过几次了，每次看的都是从第一个章节开始，过不了两张就不看了。汗死了，现在都是iOS10了，swift3都发布很久了，swift3相对前
    
    </summary>
    
    
      <category term="ios，swift" scheme="http://www.dyike.com/tags/ios%EF%BC%8Cswift/"/>
    
  </entry>
  
  <entry>
    <title>Programming iOS 9 学习笔记-view章节</title>
    <link href="http://www.dyike.com/2016/11/26/ios-learn-note-view/"/>
    <id>http://www.dyike.com/2016/11/26/ios-learn-note-view/</id>
    <published>2016-11-26T14:08:34.000Z</published>
    <updated>2016-11-26T14:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>  首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。我看过几次了，每次看的都是从第一个章节开始，过不了两张就不看了。汗死了，现在都是iOS10了，swift3都发布很久了，swift3相对前两个版本来说好很多，改动相当的大，所以说swift的每一个版本都可以算一个新语言。我最近把swift3的文档过了一遍（之前只看过swift1的，swift2没怎么看过）现在又拿出这个本书出来学习。</p>
<p>  这个笔记谈不上翻译，当然目前很大一部分是借鉴<a href="http://wdxtub.com/" target="_blank" rel="external">http://wdxtub.com/</a> 这个blog里的笔记【这个blog文章我常看】，我只是在上面作了一些修改。</p>
<p>为什么这么说呢？因为我操作的环境是在swift3+Xcode8+iOS10。</p>
<p>我只是业余的、业余的、业余的学习iOS开发，如果里面什么错误，欢迎指正！欢迎iOS大牛带我飞。</p>
</blockquote>
<h1 id="第一章Views"><a href="#第一章Views" class="headerlink" title="第一章Views"></a>第一章Views</h1><h3 id="几个概念："><a href="#几个概念：" class="headerlink" title="几个概念："></a>几个概念：</h3><ul>
<li>一个view是UIView类或UIView的子类的对象，知道怎么在界面的矩形区域绘制自己。</li>
<li>一个view也是一个responder(UIView是UIResponder的子类)。是与用户交互的（触摸、点击）。</li>
<li>一个view可以有子view（subview），一个subview只能有一个superview。这就形成了一个view的树状结构。如果从界面上去除（隐藏/移动）一个view，它的subview也将去除（隐藏/移动）。</li>
<li>一个view可以从nib生成，也可以通过代码生成。</li>
</ul>
<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>view hierarchy的顶层是app的window，是UIWindow的一个实例，或者UIView子类的实例。在应用中应该只有一个main window。在启动的时候创建，不会被销毁或者代替。想象一个平时我们使用的app，这是一个什么东西？就是一个应用的背景，并且是superview，其他的view都是他的subview。</p>
<p>app的window需要填充设备的屏幕：window初始化时候，frame设置成UIScreen.main.bounds。如果使用main storyboard, UIApplicationMain 函数会自动完成。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIWindow</span>(frame: <span class="type">UIScreen</span>.main.bounds)</div><div class="line"><span class="comment">//在iOS10 中可以不传入frame参数，默认设置成screen的bounds</span></div><div class="line"><span class="keyword">let</span> w = <span class="type">UIWindow</span>()</div></pre></td></tr></table></figure>
<p>为了保证window在app的生命周期中存在，app delegate类会用一个strong retain policy来维持一个window属性。这个过程是：启动app，UIApplicationMain方法会初始化app delegate类并一直保持这个实例。然后window实例就会被赋值到app delegate实例的window属性上，所以app的整个生命周期都一直保持。如果使用main storyboard，这些都是自动初始化的。</p>
<p>当一个view控制器成为main window的rootViewController， 它的view将会变为main window的有且仅有的一个直接subview，也就是main window上的root view，之后所有的view都是这个root view上的subview。因此，root view是view hierarchy的最顶层的对象，用户是可以看到的。但有时候，用户可能会看到root view之后的window，基于这个原因，可以在给main view 设置好backgroundColor。</p>
<p>app的界面应该是不可见的，知道你window被设置为key window。这个可以通过调用UIWindow实例的makeKeyVisible方法来完成。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul>
<li>使用main storyboard</li>
</ul>
<blockquote>
<ol>
<li>storyboard文件在Info.plist的键为 Main storyboard file base name中指定（UIMainStoryboardFile）</li>
<li>UIApplicationMain实例化UIWindow，设置好frame。把设置好的UIWindow实例指定给app delegate的window属性</li>
<li>storyboard初始化的view controller，指定到 window 的 rootViewController 属性</li>
<li>这些都是发生在app delegate的 application: didFinishLaunchingWithOptions 被调用之前</li>
</ol>
</blockquote>
<ul>
<li>不使用main storyboard</li>
</ul>
<blockquote>
<ol>
<li>在General pane,选择”Main”，并删除</li>
<li>删除Main.storyboard和ViewController.swift</li>
<li>删除AppDelegate.swift的所有内容</li>
</ol>
</blockquote>
<p>例子：An App Delegate class with no storyboard</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="meta">@UIApplicationMain</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span> : <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> window : <span class="type">UIWindow</span>?</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication,</span></span></div><div class="line">        didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</div><div class="line">        -&gt; <span class="type">Bool</span> &#123;</div><div class="line">            <span class="keyword">self</span>.window = <span class="type">UIWindow</span>()</div><div class="line">            <span class="keyword">self</span>.window!.rootViewController = <span class="type">UIViewController</span>()</div><div class="line">            <span class="keyword">self</span>.window!.backgroundColor = <span class="type">UIColor</span>.whiteColor()</div><div class="line">            <span class="keyword">self</span>.window!.makeKeyAndVisible()</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>app一旦运行起来之后，将会有多中方式来引用window：</p>
<ul>
<li>界面中的UIView，会自动创建一个window属性（通过对window的引用创建）。</li>
</ul>
<p>可以使用UIView的window属性来检查这个view是否被嵌入到了window中。如果不是，window属性为nil。一个window的属性为nil的UIView对用户是不可见的。</p>
<ul>
<li>app的delegate实例会保持这个window的引用（window属性）。通过使用shared application的delegate 属性来获取这个引用：<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIApplication</span>.shared.delegate!.window!!</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果不那样使用的话，可以显式转换成app delegate类<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>).window!</div></pre></td></tr></table></figure></p>
<ul>
<li>shared application 会通过它的keyWindow属性来维护一个执行window的引用。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> w = <span class="type">UIApplication</span>.shared.keyWindow!</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是，这个引用不是很稳定。原因：系统会创建临时的window来当做key window。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;  首先有几点需要说明的是：Programming iOS 9是一本很不错的书，纸质书很厚，看完真的是需要毅力的。我看过几次了，每次看的都是从第一个章节开始，过不了两张就不看了。汗死了，现在都是iOS10了，swift3都发布很久了，swift3相
    
    </summary>
    
    
      <category term="swift, iOS" scheme="http://www.dyike.com/tags/swift-iOS/"/>
    
  </entry>
  
  <entry>
    <title>好久没有写东西了</title>
    <link href="http://www.dyike.com/2016/11/02/long-time-no-writing/"/>
    <id>http://www.dyike.com/2016/11/02/long-time-no-writing/</id>
    <published>2016-11-02T13:56:11.000Z</published>
    <updated>2016-11-02T14:13:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一次写东西还是九月份呢，整个十月份没有写东西，今天晚上突然就想写点东西，十一月份了，来杭州三个月了，工作也基本走上了正轨，也转正了。不过最近也不是很忙，说实话，前段时间确实很闲，偏偏闲的时候没有写点东西，现在回过头来想想，我是不是把那段时间给浪费了。</p>
<p>前段时间，首先接触了一点前端的东西，自己比较喜欢Vue框架，就用Vue2.0写了一两个demo，过了一遍文档。坦率地讲，对于前端的东西，自己还存在很多弱点，要是有兴趣，也许当年就可能是选前端了。哈哈哈哈，这都是开玩笑，其实前端还是很好玩的，现在的前端的门槛还是挺高的。慢慢来吧，有时间就去写点demo啥的，学！</p>
<p>后来听朋友讲，rust，看了一下文档，有点被这个当出来的语言给迷住了一会儿，基本都是那种学习的套路，看文档，撸实例代码，好玩，也有些让我头疼的东西比如，泛型，可变性，所有权这些知识点上，还是很含糊的，估计还是要过几遍文档。rust也有很多不错的地方，比如traits。</p>
<p>其他生活方面呢，没有啥特殊变化，目前，周末自己做做饭。真是那句话“吃饭五分钟，做饭两小时”😂，确实有点麻烦，但可以自己想吃啥就吃啥，还能省钱。到目前为止，还没有出现自己做得饭不能吃的情况。生活作息时间也按照日程来了，每天晚上11点开始睡觉，然后早上6点起床！坚持了两个多周了，现在杭州开始越来越冷，早上起床确实需要勇气了。坚持吧！</p>
<p>对了，现在写这个的时候，我旁边的手机还在放董路老师的直播，他老司机每天发车，我不保证每天上车，有时间就看看，至少还能听到不少意思的关于足球的东西。他直播播放的歌曲也挺好听的，能放松一下一天的疲惫！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一次写东西还是九月份呢，整个十月份没有写东西，今天晚上突然就想写点东西，十一月份了，来杭州三个月了，工作也基本走上了正轨，也转正了。不过最近也不是很忙，说实话，前段时间确实很闲，偏偏闲的时候没有写点东西，现在回过头来想想，我是不是把那段时间给浪费了。&lt;/p&gt;
&lt;p&gt;前段时
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php二维数组去重</title>
    <link href="http://www.dyike.com/2016/10/18/php-array-unique/"/>
    <id>http://www.dyike.com/2016/10/18/php-array-unique/</id>
    <published>2016-10-18T13:55:04.000Z</published>
    <updated>2016-10-18T14:08:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>没有啥，就是随便写点关于php数组的处理，数组一直是我的弱项，现在还是做一点记录吧。</p>
<p>对于二维数组咱们分两种情况讨论，一种是因为某一键名的值不能重复，删除重复项；另一种因为内部的一维数组不能完全相同，而删除重复项，下面举例说明：</p>
<h2 id="某一键名的值不能重复，删除重复项"><a href="#某一键名的值不能重复，删除重复项" class="headerlink" title="某一键名的值不能重复，删除重复项"></a>某一键名的值不能重复，删除重复项</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayUnique</span><span class="params">($arr, $key)</span> </span>&#123;</div><div class="line">    $tmp = [];</div><div class="line">    <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">        <span class="comment">//搜索$v[$key]是否在$tmp_arr数组中存在，若存在返回true</span></div><div class="line">        <span class="keyword">if</span> (in_array($v[$key], $tmp)) &#123;</div><div class="line">            <span class="keyword">unset</span>($arr[$k]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $tmp[] = $v[$key];</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    sort($arr); <span class="comment">//sort函数对数组进行排序</span></div><div class="line">    <span class="keyword">return</span> $arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = [</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">123</span>, <span class="string">'name'</span> =&gt; <span class="string">'张三'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">123</span>, <span class="string">'name'</span> =&gt; <span class="string">'李四'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">124</span>, <span class="string">'name'</span> =&gt; <span class="string">'王五'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">125</span>, <span class="string">'name'</span> =&gt; <span class="string">'赵六'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">126</span>, <span class="string">'name'</span> =&gt; <span class="string">'赵六'</span>],</div><div class="line">];</div><div class="line">$key = <span class="string">'id'</span>;</div><div class="line">arrayUnique(&amp;$test, $key);</div><div class="line">print_r($test);</div></pre></td></tr></table></figure>
<p>显示结果就知道了。。。</p>
<h4 id="内部的一维数组不能完全相同，而删除重复项"><a href="#内部的一维数组不能完全相同，而删除重复项" class="headerlink" title="内部的一维数组不能完全相同，而删除重复项"></a>内部的一维数组不能完全相同，而删除重复项</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayUnique</span><span class="params">($array)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($array <span class="keyword">as</span> $v)&#123;</div><div class="line">        $v = join(<span class="string">","</span>, $v); <span class="comment">//降维,也可以用implode,将一维数组转换为用逗号连接的字符串</span></div><div class="line">        $temp[] = $v;</div><div class="line">    &#125;</div><div class="line">    $temp = array_unique($temp);    <span class="comment">//去掉重复的字符串,也就是重复的一维数组</span></div><div class="line">                </div><div class="line">    <span class="keyword">foreach</span> ($temp <span class="keyword">as</span> $k =&gt; $v)&#123;</div><div class="line">        $temp[$k] = explode(<span class="string">","</span>, $v);   <span class="comment">//再将拆开的数组重新组装</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $temp;</div><div class="line">&#125;</div><div class="line">$test = [</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">123</span>, <span class="string">'name'</span> =&gt; <span class="string">'张三'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">123</span>, <span class="string">'name'</span> =&gt; <span class="string">'李四'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">124</span>, <span class="string">'name'</span> =&gt; <span class="string">'王五'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">125</span>, <span class="string">'name'</span> =&gt; <span class="string">'赵六'</span>],</div><div class="line">    [<span class="string">'id'</span> =&gt; <span class="number">126</span>, <span class="string">'name'</span> =&gt; <span class="string">'赵六'</span>],</div><div class="line">];</div><div class="line">$data = arrayUnique($test);</div><div class="line">print_r($data);</div></pre></td></tr></table></figure>
<p>结果显示就知道了。。。。</p>
<p>就这样简单粗暴一点吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有啥，就是随便写点关于php数组的处理，数组一直是我的弱项，现在还是做一点记录吧。&lt;/p&gt;
&lt;p&gt;对于二维数组咱们分两种情况讨论，一种是因为某一键名的值不能重复，删除重复项；另一种因为内部的一维数组不能完全相同，而删除重复项，下面举例说明：&lt;/p&gt;
&lt;h2 id=&quot;某一键
    
    </summary>
    
    
      <category term="php" scheme="http://www.dyike.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>GDB高效调试的一些小tips</title>
    <link href="http://www.dyike.com/2016/09/19/tips-for-productive-debug-with-gdb/"/>
    <id>http://www.dyike.com/2016/09/19/tips-for-productive-debug-with-gdb/</id>
    <published>2016-09-19T14:23:49.000Z</published>
    <updated>2016-09-19T15:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来翻译一篇文章，是关于高效使用GDB调试的。</p>
<h2 id="建议一：Try-GDB-Dashboard"><a href="#建议一：Try-GDB-Dashboard" class="headerlink" title="建议一：Try GDB Dashboard"></a>建议一：Try GDB Dashboard</h2><p>这可能不是你喜欢的“菜”，但像我这样的，喜欢在每一个断点处获得更多的程序信息，所以就尝试GDB仪表板。</p>
<p>它是一款非常棒的组合式的界面，看起来是这样的：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/gdb/gdb-dashboard.png" alt="界面"></p>
<p>从Github仓库(<a href="https://github.com/cyrus-and/gdb-dashboard)，能够获取该项目的更多信息,根据你的需求定制你自己的样式。" target="_blank" rel="external">https://github.com/cyrus-and/gdb-dashboard)，能够获取该项目的更多信息,根据你的需求定制你自己的样式。</a></p>
<h2 id="建议二：Use-a-global-gdbinit-and-a-project-gdbinit"><a href="#建议二：Use-a-global-gdbinit-and-a-project-gdbinit" class="headerlink" title="建议二：Use a global .gdbinit and a project .gdbinit"></a>建议二：Use a global .gdbinit and a project .gdbinit</h2><p><code>.gdbinit</code>是一个配置文件，在gdb启动的时候生效。在你的home目录(~/.gdbinit)可以有一个配置文件做全局设置，或者在当前项目目录 (./.gdbinit)下特定配置。</p>
<p>正如你从下面的提示可以看到，项目中配置<code>.gdbinit</code>对gdb设定自定格式或者别名是非常有效的。</p>
<p>提示：必须用<code>set auto-load local-gdbinit</code>让项目生成<code>.gdbinit</code>文件！</p>
<h2 id="建议三：Use-custom-formatters"><a href="#建议三：Use-custom-formatters" class="headerlink" title="建议三：Use custom formatters"></a>建议三：Use custom formatters</h2><p>通常C/C++如果使用了联合体(unions),在调试器中很难检查的。</p>
<p>为了让他们更加可读，你可以为你的数据类型设定自定义的格式。参见GDB的Pretty Prining(<a href="https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing.html#Pretty-Printing" target="_blank" rel="external">https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing.html#Pretty-Printing</a>)</p>
<p>举个例子，在<a href="https://metricpanda.com/rival-fortress" target="_blank" rel="external">Rival Fortress</a>中有一个矩阵的数据类型(MPEMatrix4),那是许多匿名结构(<a href="https://gcc.gnu.org/onlinedocs/gcc/Unnamed-Fields.html`" target="_blank" rel="external">anonymous structs</a>)的一个联合体(union)。这样使用就是为了方便。</p>
<p>使用了自定义打印格式，前后对比效果如下：<br><img src="https://raw.githubusercontent.com/yf92/yf92.github.io/master/images/gdb/gdb-pretty-printing.png" alt="前后对比"></p>
<p>自定义的格式的源码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MPEMatrixPrinter:</div><div class="line">  <span class="string">""</span><span class="string">"Print a 4x4 matrix."</span><span class="string">""</span></div><div class="line"></div><div class="line">  def __init__(self, val, size):</div><div class="line">    self.val = val</div><div class="line">    self.size = <span class="keyword">int</span>(size)</div><div class="line"></div><div class="line">  def to_string(self):</div><div class="line">    <span class="keyword">return</span> (<span class="string">"\n\t[ %3g %3g %3g %3g ]"</span></div><div class="line">            <span class="string">"\n\t[ %3g %3g %3g %3g ]"</span></div><div class="line">            <span class="string">"\n\t[ %3g %3g %3g %3g ]"</span></div><div class="line">            <span class="string">"\n\t[ %3g %3g %3g %3g ]"</span>) % \</div><div class="line">                (<span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">0</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">1</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">2</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">3</span>]),</div><div class="line">                <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">4</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">5</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">6</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">7</span>]),</div><div class="line">                <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">8</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">9</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">10</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">11</span>]),</div><div class="line">                <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">12</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">13</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">14</span>]), <span class="keyword">float</span>(self.val[<span class="string">"flat"</span>][<span class="number">15</span>]))</div><div class="line"></div><div class="line">def project_type_lookups(val):</div><div class="line">  lookup_tag = val.type.tag</div><div class="line">  <span class="keyword">if</span> lookup_tag == None:</div><div class="line">    <span class="keyword">return</span> None</div><div class="line"></div><div class="line">  match = re.match(r<span class="string">"^MPEMatrix(\d)$"</span>, lookup_tag)</div><div class="line">  <span class="keyword">if</span> match:</div><div class="line">    <span class="keyword">return</span> MPEMatrixPrinter(val, match.group(<span class="number">1</span>))</div><div class="line"></div><div class="line">gdb.pretty_printers.append(project_type_lookups)</div></pre></td></tr></table></figure>
<h2 id="建议四：Use-aliases"><a href="#建议四：Use-aliases" class="headerlink" title="建议四：Use aliases"></a>建议四：Use aliases</h2><p>别名能够非常有效地提高调试的效率，在<code>.gdbinit</code>文件这样设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias -a w = dashboard expression watch</div></pre></td></tr></table></figure>
<h2 id="建议五：Use-automatic-variables"><a href="#建议五：Use-automatic-variables" class="headerlink" title="建议五：Use automatic $ variables"></a>建议五：Use automatic <code>$</code> variables</h2><p>不管什么时候，使用<code>print</code>命令检查某些东西，gdb会像这样在一个变量里自动存储结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print Identity</div><div class="line">$1 = </div><div class="line">        [   1   0   0   0 ]</div><div class="line">        [   0   1   0   0 ]</div><div class="line">        [   0   0   1   0 ]</div><div class="line">        [   0   0   0   1 ]</div></pre></td></tr></table></figure>
<p><code>$1</code>是自动生成的变量，在后面也可这样提取他：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print $1</div><div class="line">$2 = </div><div class="line">        [   1   0   0   0 ]</div><div class="line">        [   0   1   0   0 ]</div><div class="line">        [   0   0   1   0 ]</div><div class="line">        [   0   0   0   1 ]</div></pre></td></tr></table></figure>
<h2 id="建议六：Inspect-array-pointers"><a href="#建议六：Inspect-array-pointers" class="headerlink" title="建议六：Inspect array pointers"></a>建议六：Inspect array pointers</h2><p>在一个数组里面使用C-style的指针，可以使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print *Array@10</div></pre></td></tr></table></figure>
<p>将会打印Array中的10个元素。</p>
<h2 id="建议七：Enable-command-history"><a href="#建议七：Enable-command-history" class="headerlink" title="建议七：Enable command history"></a>建议七：Enable command history</h2><p>设置命令历史记录，在<code>.gdbinit</code>文件中设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set history save on</div></pre></td></tr></table></figure>
<p>在当前目录下默认保存的历史文件(<code>.gdb_history</code>)，但是可以设定输出文件名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set history filename &lt;fname&gt;</div></pre></td></tr></table></figure>
<h2 id="建议八：Detect-if-the-debugger-is-running"><a href="#建议八：Detect-if-the-debugger-is-running" class="headerlink" title="建议八：Detect if the debugger is running"></a>建议八：Detect if the debugger is running</h2><p>这个其实不是关于gdb调试，但是非常的有用。</p>
<p>在windows系统里可以使用<code>IsDebuggerPresent</code>(<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms680345(v=vs.85).aspx)函数来判断debugger是否在运行。" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/windows/desktop/ms680345(v=vs.85).aspx)函数来判断debugger是否在运行。</a><br>在Unix系统也是可以这样使用的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _WIN32</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">IsDebuggerPresent</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> Detected;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> RunningUnderDebugger;</div><div class="line">  <span class="keyword">if</span> (!Detected)</div><div class="line">  &#123;</div><div class="line">    Detected = <span class="number">1</span>;</div><div class="line">    RunningUnderDebugger = ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> RunningUnderDebugger;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来翻译一篇文章，是关于高效使用GDB调试的。&lt;/p&gt;
&lt;h2 id=&quot;建议一：Try-GDB-Dashboard&quot;&gt;&lt;a href=&quot;#建议一：Try-GDB-Dashboard&quot; class=&quot;headerlink&quot; title=&quot;建议一：Try GDB Dashbo
    
    </summary>
    
    
      <category term="GDB" scheme="http://www.dyike.com/tags/GDB/"/>
    
  </entry>
  
  <entry>
    <title>PHP单元测试的学习整理</title>
    <link href="http://www.dyike.com/2016/09/12/php-unint-test/"/>
    <id>http://www.dyike.com/2016/09/12/php-unint-test/</id>
    <published>2016-09-12T08:05:52.000Z</published>
    <updated>2016-09-12T08:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了一点PHP单元测试的东西，这里做一个简单的整理。</p>
<h2 id="什么是单元测试？"><a href="#什么是单元测试？" class="headerlink" title="什么是单元测试？"></a>什么是单元测试？</h2><p>单元测试将你的程序代码进行隔离并证明这个单个部件是正确的。通常情况下，单元测试是非常小、快并且简短的代码片段——比如一个方法。</p>
<h2 id="这样做有什么好处？"><a href="#这样做有什么好处？" class="headerlink" title="这样做有什么好处？"></a>这样做有什么好处？</h2><p>可以保证代码的简洁，增强代码的可读性，同时还有利于编写更多有意义的代码，能减少代码的bug数量等等好处。</p>
<h4 id="从手动测试到单元测试"><a href="#从手动测试到单元测试" class="headerlink" title="从手动测试到单元测试:"></a>从手动测试到单元测试:</h4><p>之前测试(调试)代码的时候基本是这样的：编写代码——&gt;打开浏览器——&gt;给定不同的输入条件——&gt;看输出的结果是否符合预期的结果。对，这个就是手动测试，是对功能设计的测试，不是对我们的代码进行测试。</p>
<p>现在我们想要做的是自动测试，不再像上面说的那样死板的东西。有两种主要的方法可以达到如此效果——TDD(test-driven development)测试驱动开发 和 BDD(behavior-driven development)行为驱动开发。</p>
<blockquote>
<p>TDD是非常简短的，在编写业务代码之前编写测试用例，这种方式依赖于单元测试。正如前面提到的，单元测试是简短的、容易编写的代码片段，也就是说你的业务代码要确保被单元测试的代码所覆盖。TDD的大概流程是针对于每个功能点抽象出接口代码——&gt;编写单元测试的代码——&gt;实现接口——&gt;运行单元测试代码，循环此过程，直到整个单元测试都通过。这样做的好处是：减少代码逻辑的错误，尽可能减少项目中的bug。当然不是所有的项目都适合TDD这个方式。那使用TDD都是在什么情景下呢？</p>
<ul>
<li>(1) 对项目的需求足够的了解 </li>
<li>(2)项目本身的复杂度和依赖性，如果一个项目极其复杂，模块之间又是相互依赖，这种情况下，TDD反正会增大拆分接口和编写测试用例的工作量。</li>
</ul>
<p>BDD,另一种单元测试的方式，就必须要对某些行为要有具体的期望，这样测试才会有意义！</p>
</blockquote>
<h2 id="一些讨论"><a href="#一些讨论" class="headerlink" title="一些讨论"></a>一些讨论</h2><p>写到这里，对每样东西每个人的看法都是不一样，对单元测试也是这样。也有人反对单元测试，每个东西不会是十全十美，当然了我写这篇文章肯定要夸单元测试的好处。现在不妨来讨论讨论。</p>
<h4 id="编写测试用例浪费很多时间？"><a href="#编写测试用例浪费很多时间？" class="headerlink" title="编写测试用例浪费很多时间？"></a>编写测试用例浪费很多时间？</h4><p>首先需要说明的是，编写测试用例代码(额外的代码)显而易见是需要花时间的。对的，这个不只是花费时间的唯一因素。当我们编写完一个项目的业务逻辑的代码，过了好几个月，回过头来去看我们自己的代码，就要花费很长时间去理解我当初为什么要这样编写而不那样编写。也有可能是花费时间去理解别人的代码。fix bug的时候也需要花费时间在自己的代码中穿行。如果我们使用第三方的一些库，库被修改，我们也需要花很多时间review我们的代码……这些时间加起来是不是要比编写测试用例的代码还要多得多。<br>甚至还有人抱怨说，“我编写了测试用例的代码，并没有找到bug，这不是浪费时间？是什么？”既然你编写了测试用例，当你修改了某个部分的代码时，就可以帮你检查出来。至少这样你不需要手动测试你哪些修改过的代码。</p>
<h4 id="我的代码，我了解，我不需要测试？"><a href="#我的代码，我了解，我不需要测试？" class="headerlink" title="我的代码，我了解，我不需要测试？"></a>我的代码，我了解，我不需要测试？</h4><p>有的时候，我们第一次编写业务逻辑代码是非常清晰的，但过了一段时间我们总要花费一点时间来理解当初编写业务逻辑的代码。我们写的测试用例的方法通常有五六行代码组成，但这些方法可用于不同的服务器、不同版本的脚本语言环境。</p>
<h4 id="不可能测试所有的差异？"><a href="#不可能测试所有的差异？" class="headerlink" title="不可能测试所有的差异？"></a>不可能测试所有的差异？</h4><p>这个答案是肯定的，不可能测试所有的差异。但一个单元能够帮你展示你所能覆盖测试的差异。如果你能够根据非单元测试覆盖测试出的差异来保证应用的正常运行，你可以扩展你的测试范围。举个栗子，当你用某个确定的整数作为输入条件成功跑通了程序，你可以扩展这个测试范围，用0、非整数或者其他作为输入条件进行测试。</p>
<h4 id="编写测试用例难？"><a href="#编写测试用例难？" class="headerlink" title="编写测试用例难？"></a>编写测试用例难？</h4><p>编写测试用例很简单，编写nice的测试用例难。这需要一个实践的过程！</p>
<p>总之，学习单元测试是需要花费时间的。即便你是第一次使用单元测试，但这个学习曲线很短而且是有回报的。何乐而不为呢？</p>
<h3 id="补充几点："><a href="#补充几点：" class="headerlink" title="补充几点："></a>补充几点：</h3><h4 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h4><p>编写代码的时候，<code>print_r()</code>和<code>var_dump()</code>确实是一个非常友好的测试，但是没有真正达到测试的目的。手动测试也是比较花费时间、无聊的。当你因为某个功能要修改的旧代码、或因为某个bug要修改某块代码的时候，此时你需要一些东西来测试你的代码是否还有你想要的功能。手动测试前，通常要列出所有输入值（如：负数、0、字符串等等）如果某次测试你忘记了测试字符串的情况就将代码部署到生产环境了。单元测试，不会发生这种事情。</p>
<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>对变量、方法重命名以增强代码的可读性，此时要小心重命名会不会带来新的bug和冲突。有的时候，有些代码跟目标功能一点关联都没有，显然，可以删除这样的代码，但你需要检查剩余的代码还是能够正常工作的。</p>
<h4 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h4><p>测试运行是隔离的。进行测试就是在证明当前代码片段不依赖其他代码块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习了一点PHP单元测试的东西，这里做一个简单的整理。&lt;/p&gt;
&lt;h2 id=&quot;什么是单元测试？&quot;&gt;&lt;a href=&quot;#什么是单元测试？&quot; class=&quot;headerlink&quot; title=&quot;什么是单元测试？&quot;&gt;&lt;/a&gt;什么是单元测试？&lt;/h2&gt;&lt;p&gt;单元测试将你的程序
    
    </summary>
    
    
      <category term="php" scheme="http://www.dyike.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>来杭州入职一个月了，记录点啥呢？</title>
    <link href="http://www.dyike.com/2016/09/01/hang-zhou-one-month/"/>
    <id>http://www.dyike.com/2016/09/01/hang-zhou-one-month/</id>
    <published>2016-09-01T14:34:43.000Z</published>
    <updated>2016-09-01T15:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道不觉，来杭州一个月零两天，入职一个月了，上个月1号入职的，还是挺好记的。来杭州一个的时间，还感觉是在梦里一样。没想到我就来到杭州了，从毕业前到毕业后的半个多月里，我都没有想到过我会回到南方。可能是之前感觉一切都太顺利了，自己成功地避开了一些弯路。其实那样对自己的成长来说是不利的，最后自己还是走上应该要走的路径，这可能就是来杭州的原因了。</p>
<p>杭州对我来说，虽然离家很近，三个多小时的车程就能到家，但给我的感觉还是挺陌生的，在这个城市没有什么亲人，没有什么朋友，没有什么同学。说同学的话也就公司有一个初中同学，还是她帮我内推的简历呢。北京待久了，习惯了那里的一切，认识的朋友也都在那里，感觉那里就是很好的。其实这样认为是不对的，年轻人要敢于适应新的环境，至少我现在发现了杭州的水要北京的水好很多很多很多，还有他们说的很多漂亮妹子（虽然我没有见过）。</p>
<p>还记得三月份的时候，去新浪面试。现在看来那个面试，那个时候的我真的是啥都不会，面试也很糟糕，记得当时胡波问郝明“你是不是把人家问怕了？”，后来胡波说了一句“年轻人这点儿就怕了？要敢于挑战”。在微博的三个月里，对自己的成长挺大的，给了一个机会，让我真正操练起PHP，还见识了靠谱的正超、士博、胡波、周老大……（太多了，不一一说了）还有那个张健，恭喜一下现在是超级奶爸。谢谢你们给了我很大的帮助，你们教的东西，现在好多用上了。嘿嘿</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>来杭州后，再也没有自己做过饭了，是因为自己变懒了吗？差不多也是，再这样下去，好像连熬粥都不会了，更别说烧什么红烧排骨，写到这儿都想吃排骨了😭早餐也不怎么吃了，过得挺没规律的，这个得批评一下自己。生活上其他也没什么了，基本没有什么大的变化，依然爱干净、有轻微洁癖。去超市也不怎么买零食，也就买水果和啤酒。</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>一个月时间，项目也熟悉得差不多了。对zend框架的学习还需要进一步深入（虽然我到现在都没有看文档就胡乱写起了，虽然不太喜欢这个框架，但还是有值得学习的东西）。对于业余时间，就写点前端的东西或者go语言的beego框架。总之，在技术上，要对自己要制定一个目标计划，不能尽瞎搞，什么都搞，什么都不精。工作上的其他就不说了。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>来杭州还狠心地买下了Dell的4K屏，虽然最近在吃土，写代码啥的真的很舒服，以至于我现在都后悔把显示器从公司搬回来，早知道就应该放在公司，我每天在公司用的显示器的时间比在家的时间多多了，工作日都要有一个很糟糕的切换——4K-&gt;1080P-&gt;4K。</p>
<p>用的笔记本是去年暑假自己买的13寸的中配MacBook Pro，到现在使用了一年多了，体验还好。最近发现电池像是不经用啊，貌似是跟我两三个月没关机有关。这个东西，早买早体验。</p>
<p>从北京到杭州托运行李，整理的行李的时候，发现之前的玩的硬件又好久没完了，这一个月里拿出来完了一次，有时间还是要多折腾，感觉这些东西还很有意思的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道不觉，来杭州一个月零两天，入职一个月了，上个月1号入职的，还是挺好记的。来杭州一个的时间，还感觉是在梦里一样。没想到我就来到杭州了，从毕业前到毕业后的半个多月里，我都没有想到过我会回到南方。可能是之前感觉一切都太顺利了，自己成功地避开了一些弯路。其实那样对自己的成长来
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我是这样理解PHP中trait</title>
    <link href="http://www.dyike.com/2016/08/25/php-trait/"/>
    <id>http://www.dyike.com/2016/08/25/php-trait/</id>
    <published>2016-08-25T07:50:22.000Z</published>
    <updated>2016-08-25T09:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>有这样一天，我要去找工作了，虽然我是从三月份开始接触PHP，到现在也就四五个月的样子，面试的时候【才接触三个多月】只要不是那种傻叉的面试官，基本不回你过深的PHP知识，也就是围绕你学过的C/C++啥的问问。</p>
<p>一共面了三家，三家都问了同样的一个问题：<code>说说你理解中的C++中的封装、继承、多态。</code> 这个问题吧，你怎么答都行，毕竟是你自己理解的。第一次吱吱呜呜说了一些，最后感觉自己都不知道自己在说什么。后来就自己总结，看到网上有一个从生物学的角度解释了一番，感觉还可以至少通俗易懂。后来又继续深入总结，在继承这一块，发现PHP虽然是单继承的语言，但还有一个比较特殊的东西，就是trait。这个翻译成中文还有比较奇葩的翻译——性状。一般我们都叫特性，或者直接叫trait。</p>
<p>可能好多人跟我一样有一个困惑：之前我接触PHP的时候，至少我在项目中没有发现使用过这个。后来也就是在毕设中，看到laravel的源码就使用了这个，那个时候也没有深入了解这个东西，看着像一个class。其实trait并不是一个很新的东西，在PHP5.4中加入的一种代码复用的语法，只是很少被关注而已。trait让PHP突破单继承的限制。</p>
<p>下面就看看一个简单的例子：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">trait</span> Hello </div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHello</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">trait</span> World </div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWorld</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"World"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">use</span> <span class="title">Hello</span>, <span class="title">World</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHelloWorld</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$hw = <span class="keyword">new</span> HelloWorld();</div><div class="line">$hw-&gt;getHello();</div><div class="line">$hw-&gt;getWorld();</div><div class="line">$hw-&gt;sayHelloWorld();</div></pre></td></tr></table></figure>
<p>上面的例子可以看出，trait像一个class,可以在写各种属性和方法，然后通过use关键字声明列出trait。由于PHP是单继承的语言，如果你想要继承多个基类，这个时候就需要将这些基类组合，而且这种组合是层叠，最终的效果就是一个树状的结构，但有了trait，就可以随意组合，结构简单。是不是很方便？我们在编写自己的代码前，我们可以把一些属性进行合理的划分，放在一个trait，让代码片段复用，耦合性低，代码清晰可读。</p>
<p>当然了还有一些需要注意的是，什么叫代码合理拆分，而不是将三两个相同的代码片段放到trait中，而是根据自己的需求来决定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有这样一天，我要去找工作了，虽然我是从三月份开始接触PHP，到现在也就四五个月的样子，面试的时候【才接触三个多月】只要不是那种傻叉的面试官，基本不回你过深的PHP知识，也就是围绕你学过的C/C++啥的问问。&lt;/p&gt;
&lt;p&gt;一共面了三家，三家都问了同样的一个问题：&lt;code&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.dyike.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>聊聊PHP中的组件开发</title>
    <link href="http://www.dyike.com/2016/08/21/php-components-development/"/>
    <id>http://www.dyike.com/2016/08/21/php-components-development/</id>
    <published>2016-08-21T04:10:43.000Z</published>
    <updated>2016-08-21T08:44:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾经有这样一个故事：</p>
<blockquote>
<p>小李：超哥啊，我想要写个脚本去注册域名，按照汉字组词拼音来注册域名，发现市面上的汉字词组转拼音的工具不好用啊，都TM是个什么烂鬼。<br>超哥：恩，我去看了一下，确实都不好用啊。放心吧，这下我又可以造轮子了。<br>……<br>几天后，超哥什么话也没有说，向小李抛了一个包，你拿去用吧。</p>
</blockquote>
<p>当我们开始一个新的项目，首先我们需要考虑如何进行开发？<br>通常情况下，可能的方式有：</p>
<ul>
<li>手动创建</li>
<li>选择合适的框架(比如说Laravel)</li>
<li>组件式开发（Components Development）?</li>
</ul>
<p>靠，what is component？<br>严格地说，PHP组件就是一系列相关的类、接口和特性(trait)来解决某个特定的问题。组件中的类、接口和特性通常是放在同一个命名空间中。</p>
<p>可能你又会想，为什么我要使用PHP组件？这个问题问得不错！</p>
<p>我们使用组件开发是为了不重新实现已经实现了的功能，这样就可以把时间花在未实现功能上的开发。使用组件开发，可能是因为时代不一样了，现代的PHP已经很少使用庞大的框架，而是使用具有相互操作性的组件制定解决方案。有的时候，框架不一定能满足我们的需求，这个时候我们通常去自己开发一个新的功能，框架也很难集成第三方的库或者自定义的库，因为他们之间没有使用相同的接口。现在我们可以不受限于框架的束缚，如果想快速完成一个应用的开发，不使用组件自己去重新发明轮子，是不是有点傻呢？</p>
<p><strong>这里想说明的是框架和组件的一些对比。</strong></p>
<p>前面也提到了，框架虽然很强大，给我们提供了很多工具，但总会出现框架解决不了我们现有的需求问题，这个时候我们通常的做法就是自己开发功能，我们自定义的库又很难集成到框架中。一个好框架需要花费大量的投入时间来维护，我们在选择一个框架的时候要着眼框架的未来。（这么说，PHP组件是不是要比框架好呢？其实也不能这样说，PHP组件也有可能会终止开发的可能，尤其是只有一个核心开发者，万一坚持不下去呢？）</p>
<p>那是不是框架一无是处呢？其实框架并不是一无是处。像laravel这样的现代流行的PHP框架，代码很优雅。（虽然laravel没有使用PSR-2社区标准，但仍然是一个相当出色的框架）还有一些古老的框架也在向现代PHP转变，比如内容管理框架Drupal。之前的Drupal7还是使用过程式PHP代码编写，代码还在全局命名空间中，舍弃了现代PHP，支持陈旧的代码根基。但是到了Drupal8使用不同的PHP组件构建了一个现代化的内容管理平台，向现代PHP靠拢！这个对Drupal8点个赞（我入职第一周看Drupal7的项目，看了两天的代码，一脸的懵逼，后来放弃了！）。</p>
<p>在菜市场买菜，菜有好的跟不好的区分，PHP组件也是这样的。所以说，我们不能认为只要是PHP组件的开发都是好的！下面还是说说好的PHP组件长得是什么样子：</p>
<ul>
<li>PHP组件的代码小巧玲珑，短小精悍，解决某个问题却使用很少的代码。一个PHP组件可以是一个类，也可以是多个类，分别放在不同子命名的空间里。组件中类没有限定数量，根据自己的解决问题的需求。</li>
<li>PHP组件的功能单一。我们常说单一功能职责化，代码模块化。组件不是万能的，而是讲究术业有专攻，就是解决特定问题。</li>
<li>PHP组件之间的相互协调性，一个组件解决一个问题，一个项目解决多个问题。所以PHP组件代码放在自己的命名空间，防止与其他组件冲突。</li>
<li>PHP组件的测试良好，因为短小精悍，所以测试比较简单。最好本身提供测试，并且有充足的覆盖度。</li>
<li>有完善的文档，有完善的文档，有完善的文档。组件要让使用者，易于安装，理解和使用。所以说写一个好的README文档真的很重要。要想提高的自己开发的组件的知名度，首先，组件确实好；其次，就是提供相当nice的README文档【这个要去学一下】。还有源码中也要有详细的注释，为组件中的类、属性和方法添加行内容文档块，说明参数、返回值和可能抛出的异常。</li>
</ul>
<p>关于最后的选择，究竟我是选择使用组件式开发还是框架开发？</p>
<p>这个答案就是根据自己的需求来选择。其实现代的PHP框架就是在构建一些小型PHP组件上的一系列的约定。如果能通过一些PHP组件就能解决实际问题的项目就使用组件开发。组件开发能够让代码保持轻量级和灵活性，很容易将一个组件变成另外一个项目的组件。</p>
<p>如果是大型的项目，能够从框架的一些约定、标准和结构中受益的话，那就使用框架。因为框架能帮我们决定好多事情。但框架的灵活性较低一点，框架提供了一些拿来就用的工具，这样看来，框架也是一个很好的选择。</p>
<p>总之，根据自己的需求来选择适合自己的东西！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经有这样一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小李：超哥啊，我想要写个脚本去注册域名，按照汉字组词拼音来注册域名，发现市面上的汉字词组转拼音的工具不好用啊，都TM是个什么烂鬼。&lt;br&gt;超哥：恩，我去看了一下，确实都不好用啊。放心吧，这下我又可以造轮子了。&lt;b
    
    </summary>
    
    
      <category term="PHP组件" scheme="http://www.dyike.com/tags/PHP%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
</feed>
